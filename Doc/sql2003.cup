BNF Grammar for ISO/IEC 9075-2:2003 - Database Language SQL (SQL-2003) SQL/Foundation
=====================================================================================

@(#)$Id: sql-2003-2.bnf,v 1.16 2011/07/11 18:00:02 jleffler Exp $



--hr
--bl
--li ALTER DOMAIN  alter_domain_statement 
--li ALTER TABLE  alter_table_statement 
--li CLOSE cursor  close_statement 
--li Column definition  column_definition 
--li COMMIT WORK  commit_statement 
--li CONNECT  connect_statement 
--li CREATE ASSERTION  assertion_definition 
--li CREATE CHARACTER SET  character_set_definition 
--li CREATE COLLATION  collation_definition 
--li CREATE DOMAIN  domain_definition 
--li CREATE FUNCTION  schema_function 
--li CREATE PROCEDURE  schema_procedure 
--li CREATE SCHEMA  schema_definition 
--li CREATE TABLE  table_definition 
--li CREATE TRANSLATION  translation_definition 
--li CREATE TRIGGER  trigger_definition 
--li CREATE VIEW  view_definition 
--li Data type  data_type 
--li DEALLOCATE PREPARE  deallocate_prepared_statement 
--li DECLARE cursor  declare_cursor   dynamic_declare_cursor 
--li DECLARE LOCAL TEMPORARY TABLE  temporary_table_declaration 
--li DELETE  delete_statement:_positioned   delete_statement:_searched   dynamic_delete_statement:_positioned 
--li DESCRIBE  describe_statement 
--li DESCRIPTOR statements  system_descriptor_statement 
--li DISCONNECT  disconnect_statement 
--li EXECUTE  execute_statement 
--li EXECUTE IMMEDIATE  execute_immediate_statement 
--li FETCH cursor  fetch_statement 
--li FROM clause  from_clause 
--li GET DIAGNOSTICS  get_diagnostics_statement 
--li GRANT  grant_statement 
--li GROUP BY clause  group_by_clause 
--li HAVING clause  having_clause 
--li INSERT  insert_statement 
--li Literals  literal 
--li Keywords  key_word 
--li MERGE  merge_statement 
--li OPEN cursor  open_statement 
--li ORDER BY clause  order_by_clause 
--li PREPARE  prepare_statement 
--li REVOKE  revoke_statement 
--li ROLLBACK WORK  rollback_statement 
--li SAVEPOINT  savepoint_statement 
--li Search condition  search_condition   regular_expression 
--li SELECT  query_specification 
--li SET CATALOG  set_catalog_statement 
--li SET CONNECTION  set_connection_statement 
--li SET CONSTRAINTS  set_constraints_mode_statement 
--li SET NAMES  set_names_statement 
--li SET SCHEMA  set_schema_statement 
--li SET SESSION AUTHORIZATION  set_session_user_identifier_statement 
--li SET TIME ZONE  set_local_time_zone_statement 
--li SET TRANSACTION  set_transaction_statement 
--li SQL Client MODULE  SQL-client_module_definition 
--li UPDATE  update_statement:_positioned   update_statement:_searched   dynamic_update_statement:_positioned 
--li Value expression  value_expression 
--li WHERE clause  where_clause 
--/bl

--hr



 SQL_terminal_character  ::=  SQL_language_character 

 SQL_language_character  ::=  simple_Latin_letter  |  digit  |  SQL_special_character 

 simple_Latin_letter  ::=  simple_Latin_upper_case_letter  |  simple_Latin_lower_case_letter 

 simple_Latin_upper_case_letter  ::=
		A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z

 simple_Latin_lower_case_letter  ::=
		a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z

 digit  ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

 SQL_special_character  ::=
		 space 
	|	 double_quote 
	|	 percent 
	|	 ampersand 
	|	 quote 
	|	 left_paren 
	|	 right_paren 
	|	 asterisk 
	|	 plus_sign 
	|	 comma 
	|	 minus_sign 
	|	 period 
	|	 solidus 
	|	 colon 
	|	 semicolon 
	|	 less_than_operator 
	|	 equals_operator 
	|	 greater_than_operator 
	|	 question_mark 
	|	 left_bracket 
	|	 right_bracket 
	|	 circumflex 
	|	 underscore 
	|	 vertical_bar 
	|	 left_brace 
	|	 right_brace 

 space  ::= !! See the Syntax Rules.

 double_quote  ::= "

 percent  ::= %

 ampersand  ::= &

 quote  ::= '

 left_paren  ::= (

 right_paren  ::= )

 asterisk  ::= *

 plus_sign  ::= +

 comma  ::= ,

 minus_sign  ::= -

 period  ::= .

 solidus  ::= /

 colon  ::= :

 semicolon  ::= ;

 less_than_operator  ::=  

 equals_operator  ::= =

 greater_than_operator  ::= >

 question_mark  ::= ?


 left_bracket_or_trigraph  ::=  left_bracket  |  left_bracket_trigraph 

 right_bracket_or_trigraph  ::=  right_bracket  |  right_bracket_trigraph 

 left_bracket  ::= [

 left_bracket_trigraph  ::= ??(

 right_bracket  ::= ]

 right_bracket_trigraph  ::= ??)

 circumflex  ::= ^

 underscore  ::= _

 vertical_bar  ::= |

 left_brace  ::= {

 right_brace  ::= }

--hr


 token  ::=  nondelimiter_token  |  delimiter_token 

 nondelimiter_token  ::=
		 regular_identifier 
	|	 key_word 
	|	 unsigned_numeric_literal 
	|	 national_character_string_literal 
	|	 bit_string_literal 
	|	 hex_string_literal 
	|	 large_object_length_token 
	|	 multiplier 

 regular_identifier  ::=  identifier_body 

 identifier_body  ::=  identifier_start  [  identifier_part ... ]

 identifier_part  ::=  identifier_start  |  identifier_extend 


 identifier_start  ::= !! See the Syntax Rules.

 identifier_extend  ::= !! See the Syntax Rules.

 large_object_length_token  ::=  digit ...  multiplier 

 multiplier  ::= K | M | G

 delimited_identifier  ::=  double_quote   delimited_identifier_body   double_quote 

 delimited_identifier_body  ::=  delimited_identifier_part ... 

 delimited_identifier_part  ::=  nondoublequote_character  |  doublequote_symbol 


 Unicode_delimited_identifier  ::=
		U ampersand  double_quote   Unicode_delimiter_body   double_quote 
		 Unicode_escape_specifier 


 Unicode_escape_specifier  ::= [ UESCAPE  quote   Unicode_escape_character   quote  ]

 Unicode_delimiter_body  ::=  Unicode_identifier_part ...

 Unicode_identifier_part  ::=  delimited_identifier_part  |  Unicode_escape_value 

 Unicode_escape_value  ::=
		 Unicode_4_digit_escape_value 
	|	 Unicode_6_digit_escape_value 
	|	 Unicode_character_escape_value 


 Unicode_4_digit_escape_value  ::=  Unicode_escape_character  hexit  hexit  hexit  hexit 



 Unicode_6_digit_escape_value  ::=
		 Unicode_escape_character  plus_sign  hexit  hexit  hexit  hexit  hexit  hexit 


 Unicode_character_escape_value  ::=  Unicode_escape_character  Unicode_escape_character 





 Unicode_escape_character  ::= !! See the Syntax Rules (15-18 above).


 nondoublequote_character  ::= !! See the Syntax Rules.


 doublequote_symbol  ::=  double_quote   double_quote 

 delimiter_token  ::=
		 character_string_literal 
	|	 date_string 
	|	 time_string 
	|	 timestamp_string 
	|	 interval_string 
	|	 delimited_identifier 
	|	 Unicode_delimited_identifier 
	|	 SQL_special_character 
	|	 not_equals_operator 
	|	 greater_than_or_equals_operator 
	|	 less_than_or_equals_operator 
	|	 concatenation_operator 
	|	 right_arrow 
	|	 left_bracket_trigraph 
	|	 right_bracket_trigraph 
	|	 double_colon 
	|	 double_period 


 not_equals_operator  ::=  less_than_operator   greater_than_operator 

 greater_than_or_equals_operator  ::=  greater_than_operator   equals_operator 

 less_than_or_equals_operator  ::=  less_than_operator   equals_operator 

 concatenation_operator  ::=  vertical_bar   vertical_bar 

 right_arrow  ::=  minus_sign   greater_than_operator 

 double_colon  ::=  colon   colon 

 double_period  ::=  period   period 

 separator  ::= {  comment  |  white_space  }...

 comment  ::=  simple_comment  |  bracketed_comment 

 simple_comment  ::=  simple_comment_introducer  [  comment_character ... ]  newline 

 simple_comment_introducer  ::=  minus_sign  minus_sign  [  minus_sign ... ]


 bracketed_comment  ::=
		 bracketed_comment_introducer   bracketed_comment_contents   bracketed_comment_terminator 

 bracketed_comment_introducer  ::=  slash   asterisk 

 bracketed_comment_terminator  ::=  asterisk   slash 

 bracketed_comment_contents  ::= [ {  comment_character  |  separator  }... ]

 comment_character  ::=  nonquote_character  |  quote 

 newline  ::= !! See the Syntax Rules.


 key_word  ::=  reserved_word  |  non-reserved_word 

 non-reserved_word  ::=
		A
	|	ABS
	|	ABSOLUTE
	|	ACTION
	|	ADA
	|	ADMIN
	|	AFTER
	|	ALWAYS
	|	ASC
	|	ASSERTION
	|	ASSIGNMENT
	|	ATTRIBUTE
	|	ATTRIBUTES
	|	AVG
	|	BEFORE
	|	BERNOULLI
	|	BREADTH
	|	C
	|	CARDINALITY
	|	CASCADE
	|	CATALOG
	|	CATALOG_NAME
	|	CEIL
	|	CEILING
	|	CHAIN
	|	CHARACTERISTICS
	|	CHARACTERS
	|	CHARACTER_LENGTH
	|	CHARACTER_SET_CATALOG
	|	CHARACTER_SET_NAME
	|	CHARACTER_SET_SCHEMA
	|	CHAR_LENGTH
	|	CHECKED
	|	CLASS_ORIGIN
	|	COALESCE
	|	COBOL
	|	CODE_UNITS
	|	COLLATION
	|	COLLATION_CATALOG
	|	COLLATION_NAME
	|	COLLATION_SCHEMA
	|	COLLECT
	|	COLUMN_NAME
	|	COMMAND_FUNCTION
	|	COMMAND_FUNCTION_CODE
	|	COMMITTED
	|	CONDITION
	|	CONDITION_NUMBER
	|	CONNECTION_NAME
	|	CONSTRAINTS
	|	CONSTRAINT_CATALOG
	|	CONSTRAINT_NAME
	|	CONSTRAINT_SCHEMA
	|	CONSTRUCTORS
	|	CONTAINS
	|	CONVERT
	|	CORR
	|	COUNT
	|	COVAR_POP
	|	COVAR_SAMP
	|	CUME_DIST
	|	CURRENT_COLLATION
	|	CURSOR_NAME
	|	DATA
	|	DATETIME_INTERVAL_CODE
	|	DATETIME_INTERVAL_PRECISION
	|	DEFAULTS
	|	DEFERRABLE
	|	DEFERRED
	|	DEFINED
	|	DEFINER
	|	DEGREE
	|	DENSE_RANK
	|	DEPTH
	|	DERIVED
	|	DESC
	|	DESCRIPTOR
	|	DIAGNOSTICS
	|	DISPATCH
	|	DOMAIN
	|	DYNAMIC_FUNCTION
	|	DYNAMIC_FUNCTION_CODE
	|	EQUALS
	|	EVERY
	|	EXCEPTION
	|	EXCLUDE
	|	EXCLUDING
	|	EXP
	|	EXTRACT
	|	FINAL
	|	FIRST
	|	FLOOR
	|	FOLLOWING
	|	FORTRAN
	|	FOUND
	|	FUSION
	|	G
	|	GENERAL
	|	GO
	|	GOTO
	|	GRANTED
	|	HIERARCHY
	|	IMPLEMENTATION
	|	INCLUDING
	|	INCREMENT
	|	INITIALLY
	|	INSTANCE
	|	INSTANTIABLE
	|	INTERSECTION
	|	INVOKER
	|	ISOLATION
	|	K
	|	KEY
	|	KEY_MEMBER
	|	KEY_TYPE
	|	LAST
	|	LENGTH
	|	LEVEL
	|	LN
	|	LOCATOR
	|	LOWER
	|	M
	|	MAP
	|	MATCHED
	|	MAX
	|	MAXVALUE
	|	MESSAGE_LENGTH
	|	MESSAGE_OCTET_LENGTH
	|	MESSAGE_TEXT
	|	MIN
	|	MINVALUE
	|	MOD
	|	MORE
	|	MUMPS
	|	NAME
	|	NAMES
	|	NESTING
	|	NEXT
	|	NORMALIZE
	|	NORMALIZED
	|	NULLABLE
	|	NULLIF
	|	NULLS
	|	NUMBER
	|	OBJECT
	|	OCTETS
	|	OCTET_LENGTH
	|	OPTION
	|	OPTIONS
	|	ORDERING
	|	ORDINALITY
	|	OTHERS
	|	OVERLAY
	|	OVERRIDING
	|	PAD
	|	PARAMETER_MODE
	|	PARAMETER_NAME
	|	PARAMETER_ORDINAL_POSITION
	|	PARAMETER_SPECIFIC_CATALOG
	|	PARAMETER_SPECIFIC_NAME
	|	PARAMETER_SPECIFIC_SCHEMA
	|	PARTIAL
	|	PASCAL
	|	PATH
	|	PERCENTILE_CONT
	|	PERCENTILE_DISC
	|	PERCENT_RANK
	|	PLACING
	|	PLI
	|	POSITION
	|	POWER
	|	PRECEDING
	|	PRESERVE
	|	PRIOR
	|	PRIVILEGES
	|	PUBLIC
	|	RANK
	|	READ
	|	RELATIVE
	|	REPEATABLE
	|	RESTART
	|	RETURNED_CARDINALITY
	|	RETURNED_LENGTH
	|	RETURNED_OCTET_LENGTH
	|	RETURNED_SQLSTATE
	|	ROLE
	|	ROUTINE
	|	ROUTINE_CATALOG
	|	ROUTINE_NAME
	|	ROUTINE_SCHEMA
	|	ROW_COUNT
	|	ROW_NUMBER
	|	SCALE
	|	SCHEMA
	|	SCHEMA_NAME
	|	SCOPE_CATALOG
	|	SCOPE_NAME
	|	SCOPE_SCHEMA
	|	SECTION
	|	SECURITY
	|	SELF
	|	SEQUENCE
	|	SERIALIZABLE
	|	SERVER_NAME
	|	SESSION
	|	SETS
	|	SIMPLE
	|	SIZE
	|	SOURCE
	|	SPACE
	|	SPECIFIC_NAME
	|	SQRT
	|	STATE
	|	STATEMENT
	|	STDDEV_POP
	|	STDDEV_SAMP
	|	STRUCTURE
	|	STYLE
	|	SUBCLASS_ORIGIN
	|	SUBSTRING
	|	SUM
	|	TABLESAMPLE
	|	TABLE_NAME
	|	TEMPORARY
	|	TIES
	|	TOP_LEVEL_COUNT
	|	TRANSACTION
	|	TRANSACTIONS_COMMITTED
	|	TRANSACTIONS_ROLLED_BACK
	|	TRANSACTION_ACTIVE
	|	TRANSFORM
	|	TRANSFORMS
	|	TRANSLATE
	|	TRIGGER_CATALOG
	|	TRIGGER_NAME
	|	TRIGGER_SCHEMA
	|	TRIM
	|	TYPE
	|	UNBOUNDED
	|	UNCOMMITTED
	|	UNDER
	|	UNNAMED
	|	USAGE
	|	USER_DEFINED_TYPE_CATALOG
	|	USER_DEFINED_TYPE_CODE
	|	USER_DEFINED_TYPE_NAME
	|	USER_DEFINED_TYPE_SCHEMA
	|	VIEW
	|	WORK
	|	WRITE
	|	ZONE

 reserved_word  ::=
		ADD
	|	ALL
	|	ALLOCATE
	|	ALTER
	|	AND
	|	ANY
	|	ARE
	|	ARRAY
	|	AS
	|	ASENSITIVE
	|	ASYMMETRIC
	|	AT
	|	ATOMIC
	|	AUTHORIZATION
	|	BEGIN
	|	BETWEEN
	|	BIGINT
	|	BINARY
	|	BLOB
	|	BOOLEAN
	|	BOTH
	|	BY
	|	CALL
	|	CALLED
	|	CASCADED
	|	CASE
	|	CAST
	|	CHAR
	|	CHARACTER
	|	CHECK
	|	CLOB
	|	CLOSE
	|	COLLATE
	|	COLUMN
	|	COMMIT
	|	CONNECT
	|	CONSTRAINT
	|	CONTINUE
	|	CORRESPONDING
	|	CREATE
	|	CROSS
	|	CUBE
	|	CURRENT
	|	CURRENT_DATE
	|	CURRENT_DEFAULT_TRANSFORM_GROUP
	|	CURRENT_PATH
	|	CURRENT_ROLE
	|	CURRENT_TIME
	|	CURRENT_TIMESTAMP
	|	CURRENT_TRANSFORM_GROUP_FOR_TYPE
	|	CURRENT_USER
	|	CURSOR
	|	CYCLE
	|	DATE
	|	DAY
	|	DEALLOCATE
	|	DEC
	|	DECIMAL
	|	DECLARE
	|	DEFAULT
	|	DELETE
	|	DEREF
	|	DESCRIBE
	|	DETERMINISTIC
	|	DISCONNECT
	|	DISTINCT
	|	DOUBLE
	|	DROP
	|	DYNAMIC
	|	EACH
	|	ELEMENT
	|	ELSE
	|	END
	|	END-EXEC
	|	ESCAPE
	|	EXCEPT
	|	EXEC
	|	EXECUTE
	|	EXISTS
	|	EXTERNAL
	|	FALSE
	|	FETCH
	|	FILTER
	|	FLOAT
	|	FOR
	|	FOREIGN
	|	FREE
	|	FROM
	|	FULL
	|	FUNCTION
	|	GET
	|	GLOBAL
	|	GRANT
	|	GROUP
	|	GROUPING
	|	HAVING
	|	HOLD
	|	HOUR
	|	IDENTITY
	|	IMMEDIATE
	|	IN
	|	INDICATOR
	|	INNER
	|	INOUT
	|	INPUT
	|	INSENSITIVE
	|	INSERT
	|	INT
	|	INTEGER
	|	INTERSECT
	|	INTERVAL
	|	INTO
	|	IS
	|	ISOLATION
	|	JOIN
	|	LANGUAGE
	|	LARGE
	|	LATERAL
	|	LEADING
	|	LEFT
	|	LIKE
	|	LOCAL
	|	LOCALTIME
	|	LOCALTIMESTAMP
	|	MATCH
	|	MEMBER
	|	MERGE
	|	METHOD
	|	MINUTE
	|	MODIFIES
	|	MODULE
	|	MONTH
	|	MULTISET
	|	NATIONAL
	|	NATURAL
	|	NCHAR
	|	NCLOB
	|	NEW
	|	NO
	|	NONE
	|	NOT
	|	NULL
	|	NUMERIC
	|	OF
	|	OLD
	|	ON
	|	ONLY
	|	OPEN
	|	OR
	|	ORDER
	|	OUT
	|	OUTER
	|	OUTPUT
	|	OVER
	|	OVERLAPS
	|	PARAMETER
	|	PARTITION
	|	PRECISION
	|	PREPARE
	|	PRIMARY
	|	PROCEDURE
	|	RANGE
	|	READS
	|	REAL
	|	RECURSIVE
	|	REF
	|	REFERENCES
	|	REFERENCING
	|	REGR_AVGX
	|	REGR_AVGY
	|	REGR_COUNT
	|	REGR_INTERCEPT
	|	REGR_R2
	|	REGR_SLOPE
	|	REGR_SXX
	|	REGR_SXY
	|	REGR_SYY
	|	RELEASE
	|	RESULT
	|	RETURN
	|	RETURNS
	|	REVOKE
	|	RIGHT
	|	ROLLBACK
	|	ROLLUP
	|	ROW
	|	ROWS
	|	SAVEPOINT
	|	SCROLL
	|	SEARCH
	|	SECOND
	|	SELECT
	|	SENSITIVE
	|	SESSION_USER
	|	SET
	|	SIMILAR
	|	SMALLINT
	|	SOME
	|	SPECIFIC
	|	SPECIFICTYPE
	|	SQL
	|	SQLEXCEPTION
	|	SQLSTATE
	|	SQLWARNING
	|	START
	|	STATIC
	|	SUBMULTISET
	|	SYMMETRIC
	|	SYSTEM
	|	SYSTEM_USER
	|	TABLE
	|	THEN
	|	TIME
	|	TIMESTAMP
	|	TIMEZONE_HOUR
	|	TIMEZONE_MINUTE
	|	TO
	|	TRAILING
	|	TRANSLATION
	|	TREAT
	|	TRIGGER
	|	TRUE
	|	UESCAPE
	|	UNION
	|	UNIQUE
	|	UNKNOWN
	|	UNNEST
	|	UPDATE
	|	UPPER
	|	USER
	|	USING
	|	VALUE
	|	VALUES
	|	VAR_POP
	|	VAR_SAMP
	|	VARCHAR
	|	VARYING
	|	WHEN
	|	WHENEVER
	|	WHERE
	|	WIDTH_BUCKET
	|	WINDOW
	|	WITH
	|	WITHIN
	|	WITHOUT
	|	YEAR

--hr

 literal  ::=  signed_numeric_literal  |  general_literal 

 unsigned_literal  ::=  unsigned_numeric_literal  |  general_literal 

 general_literal  ::=
		 character_string_literal 
	|	 national_character_string_literal 
	|	 Unicode_character_string_literal 
	|	 binary_string_literal 
	|	 datetime_literal 
	|	 interval_literal 
	|	 boolean_literal 

 character_string_literal  ::=
		[  introducer  character_set_specification  ]
		 quote  [  character_representation ... ]  quote 
		[ {  separator   quote  [  character_representation ... ]  quote  }... ]

 introducer  ::=  underscore 

 character_representation  ::=  nonquote_character  |  quote_symbol 

 nonquote_character  ::= !! See the Syntax Rules.


 quote_symbol  ::=  quote  quote 

 national_character_string_literal  ::=
		N  quote  [  character_representation ... ]  quote 
		[ {  separator   quote  [  character_representation ... ]  quote  }... ]

 Unicode_character_string_literal  ::=
		[  introducer  character_set_specification  ]
		U ampersand  quote  [  Unicode_representation ... ]  quote 
		[ {  separator   quote  [  Unicode_representation ... ]  quote  }... ]
		[ ESCAPE  escape_character  ]

 Unicode_representation  ::=  character_representation  |  Unicode_escape_value 

 binary_string_literal  ::=
		X  quote  [ {  hexit  hexit  }... ]  quote 
		[ {  separator   quote  [ {  hexit  hexit  }... ]  quote  }... ]
		[ ESCAPE  escape_character  ]

 hexit  ::=  digit  | A | B | C | D | E | F | a | b | c | d | e | f

 signed_numeric_literal  ::= [  sign  ]  unsigned_numeric_literal 

 unsigned_numeric_literal  ::=  exact_numeric_literal  |  approximate_numeric_literal 

 exact_numeric_literal  ::=
		 unsigned_integer  [  period  [  unsigned_integer  ] ]
	|	 period   unsigned_integer 

 sign  ::=  plus_sign  |  minus_sign 

 approximate_numeric_literal  ::=  mantissa  E  exponent 

 mantissa  ::=  exact_numeric_literal 

 exponent  ::=  signed_integer 

 signed_integer  ::= [  sign  ]  unsigned_integer 

 datetime_literal  ::=  date_literal  |  time_literal  |  timestamp_literal 

 date_literal  ::= DATE  date_string 

 time_literal  ::= TIME  time_string 

 timestamp_literal  ::= TIMESTAMP  timestamp_string 

 date_string  ::=  quote   unquoted_date_string   quote 

 time_string  ::=  quote   unquoted_time_string   quote 

 timestamp_string  ::=  quote   unquoted_timestamp_string   quote 

 time_zone_interval  ::=  sign   hours_value   colon   minutes_value 

 date_value  ::=  years_value   minus_sign   months_value   minus_sign   days_value 

 time_value  ::=  hours_value   colon   minutes_value   colon   seconds_value 

 interval_literal  ::= INTERVAL [  sign  ]  interval_string   interval_qualifier 

 interval_string  ::=  quote   unquoted_interval_string   quote 

 unquoted_date_string  ::=  date_value 

 unquoted_time_string  ::=  time_value  [  time_zone_interval  ]

 unquoted_timestamp_string  ::=  unquoted_date_string   space   unquoted_time_string 

 unquoted_interval_string  ::= [  sign  ] {  year-month_literal  |  day-time_literal  }

 year-month_literal  ::=  years_value  | [  years_value   minus_sign  ]  months_value 

 day-time_literal  ::=  day-time_interval  |  time_interval 

 day-time_interval  ::=
		 days_value  [  space   hours_value  [  colon   minutes_value  [  colon   seconds_value  ] ] ]

 time_interval  ::=
		 hours_value  [  colon   minutes_value  [  colon   seconds_value  ] ]
	|	 minutes_value  [  colon   seconds_value  ]
	|	 seconds_value 

 years_value  ::=  datetime_value 

 months_value  ::=  datetime_value 

 days_value  ::=  datetime_value 

 hours_value  ::=  datetime_value 

 minutes_value  ::=  datetime_value 

 seconds_value  ::=  seconds_integer_value  [  period  [  seconds_fraction  ] ]

 seconds_integer_value  ::=  unsigned_integer 

 seconds_fraction  ::=  unsigned_integer 

 datetime_value  ::=  unsigned_integer 

 boolean_literal  ::= TRUE | FALSE | UNKNOWN

--hr

 identifier  ::=  actual_identifier 

 actual_identifier  ::=  regular_identifier  |  delimited_identifier 

 SQL_language_identifier  ::=
		 SQL_language_identifier_start  [ {  underscore  |  SQL_language_identifier_part  }... ]

 SQL_language_identifier_start  ::=  simple_Latin_letter 

 SQL_language_identifier_part  ::=  simple_Latin_letter  |  digit 

 authorization_identifier  ::=  role_name  |  user_identifier 

 table_name  ::=  local_or_schema_qualified_name 

 domain_name  ::=  schema_qualified_name 

 schema_name  ::= [  catalog_name   period  ]  unqualified_schema_name 

 catalog_name  ::=  identifier 

 schema_qualified_name  ::= [  schema_name   period  ]  qualified_identifier 

 local_or_schema_qualified_name  ::= [  local_or_schema_qualifier   period  ]  qualified_identifier 

 local_or_schema_qualifier  ::=  schema_name  | MODULE

 qualified_identifier  ::=  identifier 

 column_name  ::=  identifier 

 correlation_name  ::=  identifier 

 query_name  ::=  identifier 

 SQL-client_module_name  ::=  identifier 

 procedure_name  ::=  identifier 

 schema_qualified_routine_name  ::=  schema_qualified_name 

 method_name  ::=  identifier 

 specific_name  ::=  schema_qualified_name 

 cursor_name  ::=  local_qualified_name 

 local_qualified_name  ::= [  local_qualifier   period  ]  qualified_identifier 

 local_qualifier  ::= MODULE

 host_parameter_name  ::=  colon   identifier 

 SQL_parameter_name  ::=  identifier 

 constraint_name  ::=  schema_qualified_name 

 external_routine_name  ::=  identifier  |  character_string_literal 

 trigger_name  ::=  schema_qualified_name 

 collation_name  ::=  schema_qualified_name 

 character_set_name  ::= [  schema_name   period  ]  SQL_language_identifier 

 transliteration_name  ::=  schema_qualified_name 

 transcoding_name  ::=  schema_qualified_name 

 user-defined_type_name  ::=  schema_qualified_type_name 

 schema-resolved_user-defined_type_name  ::=  user-defined_type_name 

 schema_qualified_type_name  ::= [  schema_name   period  ]  qualified_identifier 

 attribute_name  ::=  identifier 

 field_name  ::=  identifier 

 savepoint_name  ::=  identifier 

 sequence_generator_name  ::=  schema_qualified_name 

 role_name  ::=  identifier 

 user_identifier  ::=  identifier 

 connection_name  ::=  simple_value_specification 

 SQL-server_name  ::=  simple_value_specification 

 connection_user_name  ::=  simple_value_specification 

 SQL_statement_name  ::=  statement_name  |  extended_statement_name 

 statement_name  ::=  identifier 

 extended_statement_name  ::= [  scope_option  ]  simple_value_specification 

 dynamic_cursor_name  ::=  cursor_name  |  extended_cursor_name 

 extended_cursor_name  ::= [  scope_option  ]  simple_value_specification 

 descriptor_name  ::= [  scope_option  ]  simple_value_specification 

 scope_option  ::= GLOBAL | LOCAL

 window_name  ::=  identifier 

--hr


 data_type  ::=
		 predefined_type 
	|	 row_type 
	|	 path-resolved_user-defined_type_name 
	|	 reference_type 
	|	 collection_type 

 predefined_type  ::=
		 character_string_type  [ CHARACTER SET  character_set_specification  ] [  collate_clause  ]
	|	 national_character_string_type  [  collate_clause  ]
	|	 binary_large_object_string_type 
	|	 numeric_type 
	|	 boolean_type 
	|	 datetime_type 
	|	 interval_type 

 character_string_type  ::=
		CHARACTER [  left_paren   length   right_paren  ]
	|	CHAR [  left_paren   length   right_paren  ]
	|	CHARACTER VARYING  left_paren   length   right_paren 
	|	CHAR VARYING  left_paren   length   right_paren 
	|	VARCHAR  left_paren   length   right_paren 
	|	CHARACTER LARGE OBJECT [  left_paren   large_object_length   right_paren  ]
	|	CHAR LARGE OBJECT [  left_paren   large_object_length   right_paren  ]
	|	CLOB [  left_paren   large_object_length   right_paren  ]

 national_character_string_type  ::=
		NATIONAL CHARACTER [  left_paren   length   right_paren  ]
	|	NATIONAL CHAR [  left_paren   length   right_paren  ]
	|	NCHAR [  left_paren   length   right_paren  ]
	|	NATIONAL CHARACTER VARYING  left_paren   length   right_paren 
	|	NATIONAL CHAR VARYING  left_paren   length   right_paren 
	|	NCHAR VARYING  left_paren   length   right_paren 
	|	NATIONAL CHARACTER LARGE OBJECT [  left_paren   large_object_length   right_paren  ]
	|	NCHAR LARGE OBJECT [  left_paren   large_object_length   right_paren  ]
	|	NCLOB [  left_paren   large_object_length   right_paren  ]

 binary_large_object_string_type  ::=
		BINARY LARGE OBJECT [  left_paren   large_object_length   right_paren  ]
	|	BLOB [  left_paren   large_object_length   right_paren  ]

 numeric_type  ::=  exact_numeric_type  |  approximate_numeric_type 

 exact_numeric_type  ::=
		NUMERIC [  left_paren   precision  [  comma   scale  ]  right_paren  ]
	|	DECIMAL [  left_paren   precision  [  comma   scale  ]  right_paren  ]
	|	DEC [  left_paren   precision  [  comma   scale  ]  right_paren  ]
	|	SMALLINT
	|	INTEGER
	|	INT
	|	BIGINT

 approximate_numeric_type  ::=
		FLOAT [  left_paren   precision   right_paren  ]
	|	REAL
	|	DOUBLE PRECISION

 length  ::=  unsigned_integer 

 large_object_length  ::=
		 unsigned_integer  [  multiplier  ] [  char_length_units  ]
	|	 large_object_length_token  [  char_length_units  ]

 char_length_units  ::= CHARACTERS | CODE_UNITS | OCTETS

 precision  ::=  unsigned_integer 

 scale  ::=  unsigned_integer 

 boolean_type  ::= BOOLEAN

 datetime_type  ::=
		DATE
	|	TIME [  left_paren   time_precision   right_paren  ] [  with_or_without_time_zone  ]
	|	TIMESTAMP [  left_paren   timestamp_precision   right_paren  ] [  with_or_without_time_zone  ]

 with_or_without_time_zone  ::= WITH TIME ZONE | WITHOUT TIME ZONE

 time_precision  ::=  time_fractional_seconds_precision 

 timestamp_precision  ::=  time_fractional_seconds_precision 

 time_fractional_seconds_precision  ::=  unsigned_integer 

 interval_type  ::= INTERVAL  interval_qualifier 

 row_type  ::= ROW  row_type_body 

 row_type_body  ::=  left_paren   field_definition  [ {  comma   field_definition  }... ]  right_paren 

 reference_type  ::= REF  left_paren   referenced_type   right_paren  [  scope_clause  ]

 scope_clause  ::= SCOPE  table_name 

 referenced_type  ::=  path-resolved_user-defined_type_name 

 path-resolved_user-defined_type_name  ::=  user-defined_type_name 

 path-resolved_user-defined_type_name  ::=  user-defined_type_name 

 collection_type  ::=  array_type  |  multiset_type 

 array_type  ::=  data_type  ARRAY [  left_bracket_or_trigraph   unsigned_integer   right_bracket_or_trigraph  ]

 multiset_type  ::=  data_type  MULTISET

--hr

 field_definition  ::=  field_name   data_type  [  reference_scope_check  ]

--hr

 value_expression_primary  ::=
		 parenthesized_value_expression 
	|	 nonparenthesized_value_expression_primary 

 parenthesized_value_expression  ::=  left_paren   value_expression   right_paren 

 nonparenthesized_value_expression_primary  ::=
		 unsigned_value_specification 
	|	 column_reference 
	|	 set_function_specification 
	|	 window_function 
	|	 scalar_subquery 
	|	 case_expression 
	|	 cast_specification 
	|	 field_reference 
	|	 subtype_treatment 
	|	 method_invocation 
	|	 static_method_invocation 
	|	 new_specification 
	|	 attribute_or_method_reference 
	|	 reference_resolution 
	|	 collection_value_constructor 
	|	 array_element_reference 
	|	 multiset_element_reference 
	|	 routine_invocation 
	|	 next_value_expression 

--hr

 value_specification  ::=  literal  |  general_value_specification 

 unsigned_value_specification  ::=  unsigned_literal  |  general_value_specification 

 general_value_specification  ::=
		 host_parameter_specification 
	|	 SQL_parameter_reference 
	|	 dynamic_parameter_specification 
	|	 embedded_variable_specification 
	|	 current_collation_specification 
	|	CURRENT_DEFAULT_TRANSFORM_GROUP
	|	CURRENT_PATH
	|	CURRENT_ROLE
	|	CURRENT_TRANSFORM_GROUP_FOR_TYPE  path-resolved_user-defined_type_name 
	|	CURRENT_USER
	|	SESSION_USER
	|	SYSTEM_USER
	|	USER
	|	VALUE

 simple_value_specification  ::=
		 literal 
	|	 host_parameter_name 
	|	 SQL_parameter_reference 
	|	 embedded_variable_name 

 target_specification  ::=
		 host_parameter_specification 
	|	 SQL_parameter_reference 
	|	 column_reference 
	|	 target_array_element_specification 
	|	 dynamic_parameter_specification 
	|	 embedded_variable_specification 

 simple_target_specification  ::=
		 host_parameter_specification 
	|	 SQL_parameter_reference 
	|	 column_reference 
	|	 embedded_variable_name 

 host_parameter_specification  ::=  host_parameter_name  [  indicator_parameter  ]

 dynamic_parameter_specification  ::=  question_mark 

 embedded_variable_specification  ::=  embedded_variable_name  [  indicator_variable  ]

 indicator_variable  ::= [ INDICATOR ]  embedded_variable_name 

 indicator_parameter  ::= [ INDICATOR ]  host_parameter_name 

 target_array_element_specification  ::=
		 target_array_reference   left_bracket_or_trigraph   simple_value_specification   right_bracket_or_trigraph  

 target_array_reference  ::=  SQL_parameter_reference  |  column_reference 

 current_collation_specification  ::= CURRENT_COLLATION  left_paren   string_value_expression   right_paren 

--hr

 contextually_typed_value_specification  ::=
		 implicitly_typed_value_specification  |  default_specification 

 implicitly_typed_value_specification  ::=  null_specification  |  empty_specification 

 null_specification  ::= NULL

 empty_specification  ::=
		ARRAY  left_bracket_or_trigraph   right_bracket_or_trigraph 
	|	MULTISET  left_bracket_or_trigraph   right_bracket_or_trigraph 

 default_specification  ::= DEFAULT

--hr

 identifier_chain  ::=  identifier  [ {  period   identifier  }... ]

 basic_identifier_chain  ::=  identifier_chain 

--hr

 column_reference  ::=
		 basic_identifier_chain 
	|	MODULE  period   qualified_identifier   period   column_name 

--hr

 SQL_parameter_reference  ::=  basic_identifier_chain 

--hr

 set_function_specification  ::=  aggregate_function  |  grouping_operation 

 grouping_operation  ::= GROUPING  left_paren   column_reference  [ {  comma   column_reference  }... ]  right_paren 

--hr

 window_function  ::=  window_function_type  OVER  window_name_or_specification 

 window_function_type  ::=
		 rank_function_type   left_paren   right_paren 
	|	ROW_NUMBER  left_paren   right_paren 
	|	 aggregate_function 

 rank_function_type  ::= RANK | DENSE_RANK | PERCENT_RANK | CUME_DIST

 window_name_or_specification  ::=  window_name  |  in-line_window_specification 

 in-line_window_specification  ::=  window_specification 

--hr


 case_expression  ::=  case_abbreviation  |  case_specification 

 case_abbreviation  ::=
		NULLIF  left_paren   value_expression   comma   value_expression   right_paren 
	|	COALESCE  left_paren   value_expression  {  comma   value_expression  }...  right_paren 

 case_specification  ::=  simple_case  |  searched_case 

 simple_case  ::= CASE  case_operand   simple_when_clause ... [  else_clause  ] END

 searched_case  ::= CASE  searched_when_clause ... [  else_clause  ] END

 simple_when_clause  ::= WHEN  when_operand  THEN  result 

 searched_when_clause  ::= WHEN  search_condition  THEN  result 

 else_clause  ::= ELSE  result 

 case_operand  ::=  row_value_predicand  |  overlaps_predicate_part 

 when_operand  ::=
		 row_value_predicand 
	|	 comparison_predicate_part_2 
	|	 between_predicate_part_2 
	|	 in_predicate_part_2 
	|	 character_like_predicate_part_2 
	|	 octet_like_predicate_part_2 
	|	 similar_predicate_part_2 
	|	 null_predicate_part_2 
	|	 quantified_comparison_predicate_part_2 
	|	 match_predicate_part_2 
	|	 overlaps_predicate_part_2 
	|	 distinct_predicate_part_2 
	|	 member_predicate_part_2 
	|	 submultiset_predicate_part_2 
	|	 set_predicate_part_2 
	|	 type_predicate_part_2 

 result  ::=  result_expression  | NULL

 result_expression  ::=  value_expression 

--hr

 cast_specification  ::= CAST  left_paren   cast_operand  AS  cast_target   right_paren 

 cast_operand  ::=  value_expression  |  implicitly_typed_value_specification 

 cast_target  ::=  domain_name  |  data_type 

--hr

 next_value_expression  ::= NEXT VALUE FOR  sequence_generator_name 

--hr

 field_reference  ::=  value_expression_primary   period   field_name 

--hr

 subtype_treatment  ::=
		TREAT  left_paren   subtype_operand  AS  target_subtype   right_paren 

 subtype_operand  ::=  value_expression 

 target_subtype  ::=
		 path-resolved_user-defined_type_name 
	|	 reference_type 

--hr

 method_invocation  ::=  direct_invocation  |  generalized_invocation 

 direct_invocation  ::=
		 value_expression_primary   period   method_name  [  SQL_argument_list  ]

 generalized_invocation  ::=
		 left_paren   value_expression_primary  AS  data_type   right_paren   period   method_name 
		[  SQL_argument_list  ]

 method_selection  ::=  routine_invocation 

 constructor_method_selection  ::=  routine_invocation 

--hr

 static_method_invocation  ::=
		 path-resolved_user-defined_type_name   double_colon   method_name  [  SQL_argument_list  ]

 static_method_selection  ::=  routine_invocation 

--hr

 new_specification  ::= NEW  routine_invocation 

 new_invocation  ::=  method_invocation  |  routine_invocation 

--hr

 attribute_or_method_reference  ::=
		 value_expression_primary   dereference_operator   qualified_identifier 
		[  SQL_argument_list  ]

 dereference_operator  ::=  right_arrow 

--hr

 dereference_operation  ::=  reference_value_expression   dereference_operator   attribute_name 

--hr

 method_reference  ::=
		 value_expression_primary   dereference_operator   method_name   SQL_argument_list 

--hr

 reference_resolution  ::= DEREF  left_paren   reference_value_expression   right_paren 

--hr

 array_element_reference  ::=
		 array_value_expression   left_bracket_or_trigraph   numeric_value_expression   right_bracket_or_trigraph  

--hr
	
 multiset_element_reference  ::=
		ELEMENT  left_paren   multset_value_expression   right_paren 



 value_expression  ::=
		 common_value_expression 
	|	 boolean_value_expression 
	|	 row_value_expression 

 common_value_expression  ::=
		 numeric_value_expression 
	|	 string_value_expression 
	|	 datetime_value_expression 
	|	 interval_value_expression 
	|	 user-defined_type_value_expression 
	|	 reference_value_expression 
	|	 collection_value_expression 

 user-defined_type_value_expression  ::=  value_expression_primary 

 reference_value_expression  ::=  value_expression_primary 

 collection_value_expression  ::=  array_value_expression  |  multiset_value_expression 

 collection_value_constructor  ::=  array_value_constructor  |  multiset_value_constructor 



 numeric_value_expression  ::=
		 term 
	|	 numeric_value_expression   plus_sign   term 
	|	 numeric_value_expression   minus_sign   term 

 term  ::=
		 factor 
	|	 term   asterisk   factor 
	|	 term   solidus   factor 

 factor  ::= [  sign  ]  numeric_primary 

 numeric_primary  ::=
		 value_expression_primary 
	|	 numeric_value_function 



 numeric_value_function  ::=
		 position_expression 
	|	 extract_expression 
	|	 length_expression 
	|	 cardinality_expression 
	|	 absolute_value_expression 
	|	 modulus_expression 
	|	 natural_logarithm 
	|	 exponential_function 
	|	 power_function 
	|	 square_root 
	|	 floor_function 
	|	 ceiling_function 
	|	 width_bucket_function 

 position_expression  ::=
		 string_position_expression 
	|	 blob_position_expression 

 string_position_expression  ::=
		POSITION  left_paren   string_value_expression  IN  string_value_expression  [ USING  char_length_units  ]  right_paren 

 blob_position_expression  ::=
		POSITION  left_paren   blob_value_expression  IN  blob_value_expression   right_paren 

 length_expression  ::=
		 char_length_expression 
	|	 octet_length_expression 

 char_length_expression  ::=
		{ CHAR_LENGTH | CHARACTER_LENGTH }  left_paren   string_value_expression  [ USING  char_length_units  ]  right_paren 

 octet_length_expression  ::= OCTET_LENGTH  left_paren   string_value_expression   right_paren 

 extract_expression  ::= EXTRACT  left_paren   extract_field  FROM  extract_source   right_paren 

 extract_field  ::=  primary_datetime_field  |  time_zone_field 

 time_zone_field  ::= TIMEZONE_HOUR | TIMEZONE_MINUTE

 extract_source  ::=  datetime_value_expression  |  interval_value_expression 

 cardinality_expression  ::= CARDINALITY  left_paren   collection_value_expression   right_paren 

 absolute_value_expression  ::= ABS  left_paren   numeric_value_expression   right_paren 

 modulus_expression  ::= MOD  left_paren   numeric_value_expression_dividend   comma   numeric_value_expression_divisor  right_paren 

 natural_logarithm  ::= LN  left_paren   numeric_value_expression   right_paren 

 exponential_function  ::= EXP  left_paren   numeric_value_expression   right_paren 

 power_function  ::= POWER  left_paren   numeric_value_expression_base   comma   numeric_value_expression_exponent   right_paren 

 numeric_value_expression_base  ::=  numeric_value_expression 

 numeric_value_expression_exponent  ::=  numeric_value_expression 

 square_root  ::= SQRT  left_paren   numeric_value_expression   right_paren 

 floor_function  ::= FLOOR  left_paren   numeric_value_expression   right_paren 

 ceiling_function  ::= { CEIL | CEILING }  left_paren   numeric_value_expression   right_paren 

 width_bucket_function  ::= WIDTH_BUCKET  left_paren   width_bucket_operand   comma   width_bucket_bound_1   comma   width_bucket_bound_2   comma   width_bucket_count   right_paren 

 width_bucket_operand  ::=  numeric_value_expression 

 width_bucket_bound_1  ::=  numeric_value_expression 

 width_bucket_bound_2  ::=  numeric_value_expression 

 width_bucket_count  ::=  numeric_value_expression 



 string_value_expression  ::=  character_value_expression  |  blob_value_expression 

 character_value_expression  ::=  concatenation  |  character_factor 

 concatenation  ::=  character_value_expression   concatenation_operator   character_factor 

 character_factor  ::=  character_primary  [  collate_clause  ]

 character_primary  ::=  value_expression_primary  |  string_value_function 

 blob_value_expression  ::=  blob_concatenation  |  blob_factor 

 blob_factor  ::=  blob_primary 

 blob_primary  ::=  value_expression_primary  |  string_value_function 

 blob_concatenation  ::=  blob_value_expression   concatenation_operator   blob_factor 



 string_value_function  ::=  character_value_function  |  blob_value_function 

 character_value_function  ::=
		 character_substring_function 
	|	 regular_expression_substring_function 
	|	 fold 
	|	 transcoding 
	|	 character_transliteration 
	|	 trim_function 
	|	 character_overlay_function 
	|	 normalize_function 
	|	 specific_type_method 

 character_substring_function  ::=
		SUBSTRING  left_paren   character_value_expression  FROM  start_position 
		[ FOR  string_length  ] [ USING  char_length_units  ]  right_paren 

 regular_expression_substring_function  ::=
		SUBSTRING  left_paren   character_value_expression 
		SIMILAR  character_value_expression  ESCAPE  escape_character   right_paren 

 fold  ::= { UPPER | LOWER }  left_paren   character_value_expression   right_paren 

 transcoding  ::= CONVERT  left_paren   character_value_expression  USING  transcoding_name   right_paren 

 character_transliteration  ::= TRANSLATE  left_paren   character_value_expression  USING  transliteration_name   right_paren 

 trim_function  ::= TRIM  left_paren   trim_operands   right_paren 

 trim_operands  ::= [ [  trim_specification  ] [  trim_character  ] FROM ]  trim_source 

 trim_source  ::=  character_value_expression 

 trim_specification  ::= LEADING | TRAILING | BOTH

 trim_character  ::=  character_value_expression 

 character_overlay_function  ::= 
		OVERLAY  left_paren   character_value_expression  PLACING  character_value_expression 
		FROM  start_position  [ FOR  string_length  ] [ USING  char_length_units  ]  right_paren 

 normalize_function  ::= NORMALIZE  left_paren   character_value_expression   right_paren 

 specific_type_method  ::=  user-defined_type_value_expression   period  SPECIFICTYPE

 blob_value_function  ::=
		 blob_substring_function 
	|	 blob_trim_function 
	|	 blob_overlay_function 

 blob_substring_function  ::=
		SUBSTRING  left_paren   blob_value_expression  FROM  start_position  [ FOR  string_length  ]  right_paren 

 blob_trim_function  ::= TRIM  left_paren   blob_trim_operands   right_paren 

 blob_trim_operands  ::= [ [  trim_specification  ] [  trim_octet  ] FROM ]  blob_trim_source 

 blob_trim_source  ::=  blob_value_expression 

 trim_octet  ::=  blob_value_expression 

 blob_overlay_function  ::=
		OVERLAY  left_paren   blob_value_expression  PLACING  blob_value_expression 
		FROM  start_position  [ FOR  string_length  ]  right_paren 

 start_position  ::=  numeric_value_expression 

 string_length  ::=  numeric_value_expression 



 datetime_value_expression  ::=
		 datetime_term 
	|	 interval_value_expression   plus_sign   datetime_term 
	|	 datetime_value_expression   plus_sign   interval_term 
	|	 datetime_value_expression   minus_sign   interval_term 

 datetime_term  ::=  datetime_factor 

 datetime_factor  ::=  datetime_primary  [  time_zone  ]

 datetime_primary  ::=  value_expression_primary  |  datetime_value_function 

 time_zone  ::= AT  time_zone_specifier 

 time_zone_specifier  ::= LOCAL | TIME ZONE  interval_primary 



 datetime_value_function  ::=
		 current_date_value_function 
	|	 current_time_value_function 
	|	 current_timestamp_value_function 
	|	 current_local_time_value_function 
	|	 current_local_timestamp_value_function 

 current_date_value_function  ::= CURRENT_DATE

 current_time_value_function  ::= CURRENT_TIME [  left_paren   time_precision   right_paren  ]

 current_local_time_value_function  ::= LOCALTIME [  left_paren   time_precision   right_paren  ]

 current_timestamp_value_function  ::= CURRENT_TIMESTAMP [  left_paren   timestamp_precision   right_paren  ]

 current_local_timestamp_value_function  ::= LOCALTIMESTAMP [  left_paren   timestamp_precision   right_paren  ]



 interval_value_expression  ::=
		 interval_term 
	|	 interval_value_expression_1   plus_sign   interval_term_1 
	|	 interval_value_expression_1   minus_sign   interval_term_1 
	|	 left_paren   datetime_value_expression   minus_sign   datetime_term   right_paren   interval_qualifier 

 interval_term  ::=
		 interval_factor 
	|	 interval_term_2   asterisk   factor 
	|	 interval_term_2   solidus   factor 
	|	 term   asterisk   interval_factor 

 interval_factor  ::= [  sign  ]  interval_primary 

 interval_primary  ::=
		 value_expression_primary  [  interval_qualifier  ]
	|	 interval_value_function 

 interval_value_expression_1  ::=  interval_value_expression 

 interval_term_1  ::=  interval_term 

 interval_term_2  ::=  interval_term 


 interval_value_function  ::=  interval_absolute_value_function 

 interval_absolute_value_function  ::= ABS  left_paren   interval_value_expression   right_paren 


 boolean_value_expression  ::=
		 boolean_term 
	|	 boolean_value_expression  OR  boolean_term 

 boolean_term  ::=
		 boolean_factor 
	|	 boolean_term  AND  boolean_factor 

 boolean_factor  ::= [ NOT ]  boolean_test 

 boolean_test  ::=  boolean_primary  [ IS [ NOT ]  truth_value  ]

 truth_value  ::= TRUE | FALSE | UNKNOWN

 boolean_primary  ::=  predicate  |  boolean_predicand 

 boolean_predicand  ::=
		 parenthesized_boolean_value_expression 
	|	 nonparenthesized_value_expression_primary 

 parenthesized_boolean_value_expression  ::=  left_paren   boolean_value_expression   right_paren 


 array_value_expression  ::=  array_concatenation  |  array_factor 

 array_concatenation  ::=  array_value_expression_1   concatenation_operator   array_factor 

 array_value_expression_1  ::=  array_value_expression 

 array_factor  ::=  value_expression_primary 


 array_value_constructor  ::=
		 array_value_constructor_by_enumeration 
	|	 array_value_constructor_by_query 

 array_value_constructor_by_enumeration  ::=
		ARRAY  left_bracket_or_trigraph   array_element_list   right_bracket_or_trigraph 

 array_element_list  ::=  array_element  [ {  comma   array_element  }... ]

 array_element  ::=  value_expression 

 array_value_constructor_by_query  ::=
		ARRAY  left_paren   query_expression  [  order_by_clause  ]  right_paren 


 multiset_value_expression  ::=
		 multiset_term 
	|	 multiset_value_expression  MULTISET UNION [ ALL | DISTINCT ]  multiset_term 
	|	 multiset_value_expression  MULTISET EXCEPT [ ALL | DISTINCT ]  multiset_term 

 multiset_term  ::=
		 multiset_primary 
	|	 multiset_term  MULTISET INTERSECT [ ALL | DISTINCT ]  multiset_primary 

 multiset_primary  ::=  multiset_value_function  |  value_expression_primary 


 multiset_value_function  ::=  multiset_set_function 

 multiset_set_function  ::= SET  left_paren   multiset_value_expression   right_paren 


 multiset_value_constructor  ::=
		 multiset_value_constructor_by_enumeration 
	|	 multiset_value_constructor_by_query 
	|	 table_value_constructor_by_query 

 multiset_value_constructor_by_enumeration  ::= MULTISET  left_bracket_or_trigraph   multiset_element_list   right_bracket_or_trigraph 

 multiset_element_list  ::=  multiset_element  [ {  comma   multiset_element  } ]

 multiset_element  ::=  value_expression 

 multiset_value_constructor_by_query  ::= MULTISET  left_paren   query_expression   right_paren 

 table_value_constructor_by_query  ::= TABLE  left_paren   query_expression   right_paren 

--hr



 row_value_constructor  ::=
		 common_value_expression 
	|	 boolean_value_expression 
	|	 explicit_row_value_constructor 

 explicit_row_value_constructor  ::=
		 left_paren   row_value_constructor_element   comma   row_value_constructor_element_list   right_paren 
	|	ROW  left_paren   row_value_constructor_element_list   right_paren 
	|	 row_subquery 

 row_value_constructor_element_list  ::=
		 row_value_constructor_element  [ {  comma   row_value_constructor_element  }... ]

 row_value_constructor_element  ::=  value_expression 

 contextually_typed_row_value_constructor  ::=
		 common_value_expression 
	|	 boolean_value_expression 
	|	 contextually_typed_value_specification 
	|	 left_paren   contextually_typed_row_value_constructor_element   comma   contextually_typed_row_value_constructor_element_list   right_paren 
	|	ROW  left_paren   contextually_typed_row_value_constructor_element_list   right_paren 

 contextually_typed_row_value_constructor_element_list  ::=
		 contextually_typed_row_value_constructor_element 
		[ {  comma   contextually_typed_row_value_constructor_element  }... ]

 contextually_typed_row_value_constructor_element  ::=
		 value_expression 
	|	 contextually_typed_value_specification 

 row_value_constructor_predicand  ::=
		 common_value_expression 
	|	 boolean_predicand 
	|	 explicit_row_value_constructor 



 row_value_expression  ::=
		 row_value_special_case 
	|	 explicit_row_value_constructor 

 table_row_value_expression  ::=
		 row_value_special_case 
	|	 row_value_constructor 

 contextually_typed_row_value_expression  ::=
		 row_value_special_case 
	|	 contextually_typed_row_value_constructor 

 row_value_predicand  ::=
		 row_value_special_case 
	|	 row_value_constructor_predicand 

 row_value_special_case  ::=  nonparenthesized_value_expression_primary 



 table_value_constructor  ::= VALUES  row_value_expression_list 

 row_value_expression_list  ::=  table_row_value_expression  [ {  comma   table_row_value_expression  }... ]

 contextually_typed_table_value_constructor  ::= VALUES  contextually_typed_row_value_expression_list 

 contextually_typed_row_value_expression_list  ::=  contextually_typed_row_value_expression  [ {  comma   contextually_typed_row_value_expression  }... ]



 table_expression  ::=
		 from_clause 
		[  where_clause  ]
		[  group_by_clause  ]
		[  having_clause  ]
		[  window_clause  ]



 from_clause  ::= FROM  table_reference_list 

 table_reference_list  ::=  table_reference  [ {  comma   table_reference  }... ]



 table_reference  ::=  table_primary_or_joined_table  [  sample_clause  ]

 table_primary_or_joined_table  ::=  table_primary  |  joined_table 

 sample_clause  ::=
		TABLESAMPLE  sample_method   left_paren   sample_percentage   right_paren  [  repeatable_clause  ]

 sample_method  ::= BERNOULLI | SYSTEM

 repeatable_clause  ::= REPEATABLE  left_paren   repeat_argument   right_paren 

 sample_percentage  ::=  numeric_value_expression 

 repeat_argument  ::=  numeric_value_expression 

 table_primary  ::=
		 table_or_query_name  [ [ AS ]  correlation_name  [  left_paren   derived_column_list   right_paren  ] ]
	|	 derived_table  [ AS ]  correlation_name  [  left_paren   derived_column_list   right_paren  ]
	|	 lateral_derived_table  [ AS ]  correlation_name  [  left_paren   derived_column_list   right_paren  ]
	|	 collection_derived_table  [ AS ]  correlation_name  [  left_paren   derived_column_list   right_paren  ]
	|	 table_function_derived_table  [ AS ]  correlation_name  [  left_paren   derived_column_list   right_paren  ]
	|	 only_spec  [ [ AS ]  correlation_name  [  left_paren   derived_column_list   right_paren  ] ]
	|	 left_paren   joined_table   right_paren 

 only_spec  ::= ONLY  left_paren   table_or_query_name   right_paren 

 lateral_derived_table  ::= LATERAL  table_subquery 

 collection_derived_table  ::= UNNEST  left_paren   collection_value_expression   right_paren  [ WITH ORDINALITY ]

 table_function_derived_table  ::= TABLE  left_paren   collection_value_expression   right_paren 

 derived_table  ::=  table_subquery 

 table_or_query_name  ::=  table_name  |  query_name 

 derived_column_list  ::=  column_name_list 

 column_name_list  ::=  column_name  [ {  comma   column_name  }... ]



 joined_table  ::=
		 cross_join 
	|	 qualified_join 
	|	 natural_join 
	|	 union_join 

 cross_join  ::=  table_reference  CROSS JOIN  table_primary 

 qualified_join  ::=  table_reference  [  join_type  ] JOIN  table_reference   join_specification 

 natural_join  ::=  table_reference  NATURAL [  join_type  ] JOIN  table_primary 

 union_join  ::=  table_reference  UNION JOIN  table_primary 

 join_specification  ::=  join_condition  |  named_columns_join 

 join_condition  ::= ON  search_condition 

 named_columns_join  ::= USING  left_paren   join_column_list   right_paren 

 join_type  ::= INNER |  outer_join_type  [ OUTER ] 

 outer_join_type  ::= LEFT | RIGHT | FULL

 join_column_list  ::=  column_name_list 



 where_clause  ::= WHERE  search_condition 



 group_by_clause  ::= GROUP BY [  set_quantifier  ]  grouping_element_list 

 grouping_element_list  ::=  grouping_element  [ {  comma   grouping_element  }... ]

 grouping_element  ::=
		 ordinary_grouping_set 
	|	 rollup_list 
	|	 cube_list 
	|	 grouping_sets_specification 
	|	 empty_grouping_set 

 ordinary_grouping_set  ::=
		 grouping_column_reference 
	|	 left_paren   grouping_column_reference_list   right_paren 

 grouping_column_reference  ::=  column_reference  [  collate_clause  ]

 grouping_column_reference_list  ::=  grouping_column_reference  [ {  comma   grouping_column_reference  }... ]

 rollup_list  ::= ROLLUP  left_paren   ordinary_grouping_set_list   right_paren 

 ordinary_grouping_set_list  ::=  ordinary_grouping_set  [ {  comma   ordinary_grouping_set  }... ]

 cube_list  ::= CUBE  left_paren   ordinary_grouping_set_list   right_paren 

 grouping_sets_specification  ::= GROUPING SETS  left_paren   grouping_set_list   right_paren 

 grouping_set_list  ::=  grouping_set  [ {  comma   grouping_set  }... ]

 grouping_set  ::=
		 ordinary_grouping_set 
	|	 rollup_list 
	|	 cube_list 
	|	 grouping_sets_specification 
	|	 empty_grouping_set 

 empty_grouping_set  ::=  left_paren   right_paren 



 having_clause  ::= HAVING  search_condition 



 window_clause  ::= WINDOW  window_definition_list 

 window_definition_list  ::=  window_definition  [ {  comma   window_definition  }... ]

 window_definition  ::=  new_window_name  AS  window_specification 

 new_window_name  ::=  window_name 

 window_specification  ::=  left_paren   window_specification_details   right_paren 

 window_specification_details  ::=
		[  existing_window_name  ] [  window_partition_clause  ] [  window_order_clause  ] [  window_frame_clause  ]

 existing_window_name  ::=  window_name 

 window_partition_clause  ::= PARTITION BY  window_partition_column_reference_list 

 window_partition_column_reference_list  ::=  window_partition_column_reference  [ {  comma   window_partition_column_reference  }... ]

 window_partition_column_reference  ::=  column_reference  [  collate_clause  ]

 window_order_clause  ::= ORDER BY  sort_specification_list 

 window_frame_clause  ::=  window_frame_units   window_frame_extent  [  window_frame_exclusion  ]

 window_frame_units  ::= ROWS | RANGE

 window_frame_extent  ::=  window_frame_start  |  window_frame_between 

 window_frame_start  ::= UNBOUNDED PRECEDING |  window_frame_preceding  | CURRENT ROW

 window_frame_preceding  ::=  unsigned_value_specification  PRECEDING

 window_frame_between  ::= BETWEEN  window_frame_bound_1  AND  window_frame_bound_2 

 window_frame_bound_1  ::=  window_frame_bound 

 window_frame_bound_2  ::=  window_frame_bound 

 window_frame_bound  ::=
		 window_frame_start 
	|	UNBOUNDED FOLLOWING
	|	 window_frame_following 

 window_frame_following  ::=  unsigned_value_specification  FOLLOWING

 window_frame_exclusion  ::=
		EXCLUDE CURRENT ROW
	|	EXCLUDE GROUP
	|	EXCLUDE TIES
	|	EXCLUDE NO OTHERS



 query_specification  ::= SELECT [  set_quantifier  ]  select_list   table_expression 

 select_list  ::=  asterisk  |  select_sublist  [ {  comma   select_sublist  }... ]

 select_sublist  ::=  derived_column  |  qualified_asterisk 

 qualified_asterisk  ::=
		 asterisked_identifier_chain   period   asterisk 
	|	 all_fields_reference 

 asterisked_identifier_chain  ::=  asterisked_identifier  [ {  period   asterisked_identifier  }... ]

 asterisked_identifier  ::=  identifier 

 derived_column  ::=  value_expression  [  as_clause  ]

 as_clause  ::= [ AS ]  column_name 

 all_fields_reference  ::=  value_expression_primary   period   asterisk  [ AS  left_paren   all_fields_column_name_list   right_paren  ]

 all_fields_column_name_list  ::=  column_name_list 



 query_expression  ::= [  with_clause  ]  query_expression_body 

 with_clause  ::= WITH [ RECURSIVE ]  with_list 

 with_list  ::=  with_list_element  [ {  comma   with_list_element  }... ]

 with_list_element  ::=
		 query_name  [  left_paren   with_column_list   right_paren  ]
		AS  left_paren   query_expression   right_paren  [  search_or_cycle_clause  ]

 with_column_list  ::=  column_name_list 

 query_expression_body  ::=  non-join_query_expression  |  joined_table 

 non-join_query_expression  ::=
		 non-join_query_term 
	|	 query_expression_body  UNION [ ALL | DISTINCT ] [  corresponding_spec  ]  query_term 
	|	 query_expression_body  EXCEPT [ ALL | DISTINCT ] [  corresponding_spec  ]  query_term 

 query_term  ::=  non-join_query_term  |  joined_table 

 non-join_query_term  ::=
		 non-join_query_primary 
	|	 query_term  INTERSECT [ ALL | DISTINCT ] [  corresponding_spec  ]  query_primary 

 query_primary  ::=  non-join_query_primary  |  joined_table 

 non-join_query_primary  ::=  simple_table  |  left_paren   non-join_query_expression   right_paren 

 simple_table  ::=
		 query_specification 
	|	 table_value_constructor 
	|	 explicit_table 

 explicit_table  ::= TABLE  table_or_query_name 

 corresponding_spec  ::= CORRESPONDING [ BY  left_paren   corresponding_column_list   right_paren  ]

 corresponding_column_list  ::=  column_name_list 



 search_or_cycle_clause  ::=
		 search_clause 
	|	 cycle_clause 
	|	 search_clause   cycle_clause 

 search_clause  ::= SEARCH  recursive_search_order  SET  sequence_column 

 recursive_search_order  ::=
		DEPTH FIRST BY  sort_specification_list 
	|	BREADTH FIRST BY  sort_specification_list 

 sequence_column  ::=  column_name 

 cycle_clause  ::=
		CYCLE  cycle_column_list 
		SET  cycle_mark_column  TO  cycle_mark_value 
		DEFAULT  non-cycle_mark_value 
		USING  path_column 

 cycle_column_list  ::=  cycle_column  [ {  comma   cycle_column  }... ]

 cycle_column  ::=  column_name 

 cycle_mark_column  ::=  column_name 

 path_column  ::=  column_name 

 cycle_mark_value  ::=  value_expression 

 non-cycle_mark_value  ::=  value_expression 



 scalar_subquery  ::=  subquery 

 row_subquery  ::=  subquery 

 table_subquery  ::=  subquery 

 subquery  ::=  left_paren   query_expression   right_paren 

--hr



 predicate  ::=
		 comparison_predicate 
	|	 between_predicate 
	|	 in_predicate 
	|	 like_predicate 
	|	 similar_predicate 
	|	 null_predicate 
	|	 quantified_comparison_predicate 
	|	 exists_predicate 
	|	 unique_predicate 
	|	 normalized_predicate 
	|	 match_predicate 
	|	 overlaps_predicate 
	|	 distinct_predicate 
	|	 member_predicate 
	|	 submultiset_predicate 
	|	 set_predicate 
	|	 type_predicate 



 comparison_predicate  ::=  row_value_predicand   comparison_predicate_part_2 

 comparison_predicate_part_2  ::=  comp_op   row_value_predicand 

 comp_op  ::=
		 equals_operator 
	|	 not_equals_operator 
	|	 less_than_operator 
	|	 greater_than_operator 
	|	 less_than_or_equals_operator 
	|	 greater_than_or_equals_operator 



 between_predicate  ::=  row_value_predicand   between_predicate_part_2 

 between_predicate_part_2  ::= [ NOT ] BETWEEN [ ASYMMETRIC | SYMMETRIC ]  row_value_predicand  AND  row_value_predicand 



 in_predicate  ::=  row_value_predicand   in_predicate_part_2  

 in_predicate_part_2  ::= [ NOT ] IN  in_predicate_value 

 in_predicate_value  ::=
		 table_subquery 
	|	 left_paren   in_value_list   right_paren 

 in_value_list  ::=  row_value_expression  [ {  comma   row_value_expression  }... ]



 like_predicate  ::=  character_like_predicate  |  octet_like_predicate 

 character_like_predicate  ::=  row_value_predicand   character_like_predicate_part_2 

 character_like_predicate_part_2  ::= [ NOT ] LIKE  character_pattern  [ ESCAPE  escape_character  ]

 character_pattern  ::=  character_value_expression 

 escape_character  ::=  character_value_expression 

 octet_like_predicate  ::=  row_value_predicand   octet_like_predicate_part_2 

 octet_like_predicate_part_2  ::= [ NOT ] LIKE  octet_pattern  [ ESCAPE  escape_octet  ]

 octet_pattern  ::=  blob_value_expression 

 escape_octet  ::=  blob_value_expression 



 similar_predicate  ::=  row_value_predicand   similar_predicate_part_2 

 similar_predicate_part_2  ::= [ NOT ] SIMILAR TO  similar_pattern  [ ESCAPE  escape_character  ]

 similar_pattern  ::=  character_value_expression 

 regular_expression  ::=
		 regular_term 
	|	 regular_expression   vertical_bar   regular_term 

 regular_term  ::=
		 regular_factor 
	|	 regular_term   regular_factor 

 regular_factor  ::=
		 regular_primary 
	|	 regular_primary   asterisk 
	|	 regular_primary   plus_sign 
	|	 regular_primary   question_mark 
	|	 regular_primary   repeat_factor 

 repeat_factor  ::=  left_brace   low_value  [  upper_limit  ]  right_brace 

 upper_limit  ::=  comma  [  high_value  ]

 low_value  ::=  unsigned_integer 

 high_value  ::=  unsigned_integer 

 regular_primary  ::=
		 character_specifier 
	|	 percent 
	|	 regular_character_set 
	|	 left_paren   regular_expression   right_paren 

 character_specifier  ::=  non-escaped_character  |  escaped_character 

 non-escaped_character  ::= !! See the Syntax Rules.

 escaped_character  ::= !! See the Syntax Rules.

 regular_character_set  ::=
		 underscore 
	|	 left_bracket   character_enumeration ...  right_bracket 
	|	 left_bracket   circumflex   character_enumeration ...  right_bracket 
	|	 left_bracket   character_enumeration_include ...   circumflex   character_enumeration_exclude ...  right_bracket 

 character_enumeration_include  ::=  character_enumeration 

 character_enumeration_exclude  ::=  character_enumeration 

 character_enumeration  ::=
		 character_specifier 
	|	 character_specifier   minus_sign   character_specifier 
	|	 left_bracket   colon   regular_character_set_identifier   colon   right_bracket 

 regular_character_set_identifier  ::=  identifier 



 null_predicate  ::=  row_value_predicand   null_predicate_part_2 

 null_predicate_part_2  ::= IS [ NOT ] NULL 



 quantified_comparison_predicate  ::=  row_value_predicand   quantified_comparison_predicate_part_2 

 quantified_comparison_predicate_part_2  ::=  comp_op   quantifier   table_subquery 

 quantifier  ::=  all  |  some 

 all  ::= ALL

 some  ::= SOME | ANY



 exists_predicate  ::= EXISTS  table_subquery 



 unique_predicate  ::= UNIQUE  table_subquery 



 normalized_predicate  ::=  string_value_expression  IS [ NOT ] NORMALIZED



 match_predicate  ::=  row_value_predicand   match_predicate_part_2 

 match_predicate_part_2  ::= MATCH [ UNIQUE ] [ SIMPLE | PARTIAL | FULL ]  table_subquery 



 overlaps_predicate  ::=  overlaps_predicate_part_1   overlaps_predicate_part_2 

 overlaps_predicate_part_1  ::=  row_value_predicand_1 

 overlaps_predicate_part_2  ::= OVERLAPS  row_value_predicand_2 

 row_value_predicand_1  ::=  row_value_predicand 

 row_value_predicand_2  ::=  row_value_predicand 



 distinct_predicate  ::=  row_value_predicand_3   distinct_predicate_part_2 

 distinct_predicate_part_2  ::= IS DISTINCT FROM  row_value_predicand_4 

 row_value_predicand_3  ::=  row_value_predicand 

 row_value_predicand_4  ::=  row_value_predicand 



 member_predicate  ::=  row_value_predicand   member_predicate_part_2 

 member_predicate_part_2  ::= [ NOT ] MEMBER [ OF ]  multiset_value_expression 



 submultiset_predicate  ::=  row_value_predicand   submultiset_predicate_part_2 

 submultiset_predicate_part_2  ::= [ NOT ] SUBMULTISET [ OF ]  multiset_value_expression 



 set_predicate  ::=  row_value_predicand   set_predicate_part_2 

 set_predicate_part_2  ::= IS [ NOT ] A SET



 type_predicate  ::=  row_value_predicand   type_predicate_part_2 

 type_predicate_part_2  ::= IS [ NOT ] OF  left_paren   type_list   right_paren 

 type_list  ::=  user-defined_type_specification  [ {  comma   user-defined_type_specification  }... ]

 user-defined_type_specification  ::=
		 inclusive_user-defined_type_specification 
	|	 exclusive_user-defined_type_specification 

 inclusive_user-defined_type_specification  ::=  path-resolved_user-defined_type_name 

 exclusive_user-defined_type_specification  ::= ONLY  path-resolved_user-defined_type_name 



 search_condition  ::=  boolean_value_expression 

--hr
























--hr



 interval_qualifier  ::=
		 start_field  TO  end_field 
	|	 single_datetime_field 

 start_field  ::=  non-second_primary_datetime_field  [  left_paren   interval_leading_field_precision   right_paren  ]

 end_field  ::=
		 non-second_primary_datetime_field 
	|	SECOND [  left_paren   interval_fractional_seconds_precision   right_paren  ]

 single_datetime_field  ::=
		 non-second_primary_datetime_field  [  left_paren   interval_leading_field_precision   right_paren  ]
	|	SECOND [  left_paren   interval_leading_field_precision  [  comma   interval_fractional_seconds_precision  ]  right_paren  ]

 primary_datetime_field  ::=
		 non-second_primary_datetime_field 
	|	SECOND

 non-second_primary_datetime_field  ::= YEAR | MONTH | DAY | HOUR | MINUTE

 interval_fractional_seconds_precision  ::=  unsigned_integer 

 interval_leading_field_precision  ::=  unsigned_integer 



 language_clause  ::= LANGUAGE  language_name 

 language_name  ::= ADA | C | COBOL | FORTRAN | MUMPS | PASCAL | PLI | SQL


--##  table_border=1 
--##  tr   th  Language keyword  /th   th  Relevant standard  /th   /tr 
--##  tr  td ADA /td  td ISO/IEC 8652 /td  /tr 
--##  tr  td C /td  td ISO/IEC 9899 /td  /tr 
--##  tr  td COBOL /td  td ISO 1989 /td  /tr 
--##  tr  td FORTRAN /td  td ISO 1539 /td  /tr 
--##  tr  td MUMPS /td  td ISO/IEC 11756 /td  /tr 
--##  tr  td PASCAL /td  td ISO/IEC 7185 and ISO/IEC 10206 /td  /tr 
--##  tr  td PLI /td  td ISO 6160 /td  /tr 
--##  tr  td SQL /td  td ISO/IEC 9075 /td  /tr 
--##  /table 



 path_specification  ::= PATH  schema_name_list 

 schema_name_list  ::=  schema_name  [ {  comma   schema_name  }... ]



 routine_invocation  ::=  routine_name   SQL_argument_list 

 routine_name  ::= [  schema_name   period  ]  qualified_identifier 

 SQL_argument_list  ::=  left_paren  [  SQL_argument  [ {  comma   SQL_argument  }... ] ]  right_paren 

 SQL_argument  ::=
		 value_expression 
	|	 generalized_expression 
	|	 target_specification 

 generalized_expression  ::=  value_expression  AS  path-resolved_user-defined_type_name 



 character_set_specification  ::=
		 standard_character_set_name 
	|	 implementation-defined_character_set_name 
	|	 user-defined_character_set_name 

 standard_character_set_name  ::=  character_set_name 

 implementation-defined_character_set_name  ::=  character_set_name 

 user-defined_character_set_name  ::=  character_set_name 



 specific_routine_designator  ::=
		SPECIFIC  routine_type   specific_name 
			|	 routine_type   member_name 
		[ FOR  schema-resolved_user-defined_type_name  ]

 routine_type  ::=
		ROUTINE
	|	FUNCTION
	|	PROCEDURE
	|	[ INSTANCE | STATIC | CONSTRUCTOR ] METHOD

 member_name  ::=  member_name_alternatives  [  data_type_list  ]

 member_name_alternatives  ::=  schema_qualified_routine_name  |  method_name 

 data_type_list  ::=  left_paren  [  data_type  [ {  comma   data_type  }... ] ]  right_paren 



 collate_clause  ::= COLLATE  collation_name 



 constraint_name_definition  ::= CONSTRAINT  constraint_name 

 constraint_characteristics  ::=
		 constraint_check_time  [ [ NOT ] DEFERRABLE ]
	|	[ NOT ] DEFERRABLE [  constraint_check_time  ]

 constraint_check_time  ::= INITIALLY DEFERRED | INITIALLY IMMEDIATE



 aggregate_function  ::=
		COUNT  left_paren   asterisk   right_paren  [  filter_clause  ]
	|	 general_set_function  [  filter_clause  ]
	|	 binary_set_function  [  filter_clause  ]
	|	 ordered_set_function  [  filter_clause  ]

 general_set_function  ::=  set_function_type   left_paren  [  set_quantifier  ]  value_expression   right_paren 

 set_function_type  ::=  computational_operation 

 computational_operation  ::=
		AVG | MAX | MIN | SUM
	|	EVERY | ANY | SOME
	|	COUNT
	|	STDDEV_POP | STDDEV_SAMP | VAR_SAMP | VAR_POP
	|	COLLECT | FUSION | INTERSECTION

 set_quantifier  ::= DISTINCT | ALL

 filter_clause  ::= FILTER  left_paren  WHERE  search_condition   right_paren 

 binary_set_function  ::=  binary_set_function_type   left_paren   dependent_variable_expression   comma   independent_variable_expression   right_paren 

 binary_set_function_type  ::=
		COVAR_POP | COVAR_SAMP | CORR | REGR_SLOPE
	|	REGR_INTERCEPT | REGR_COUNT | REGR_R2 | REGR_AVGX | REGR_AVGY
	|	REGR_SXX | REGR_SYY | REGR_SXY

 dependent_variable_expression  ::=  numeric_value_expression 

 independent_variable_expression  ::=  numeric_value_expression 

 ordered_set_function  ::=  hypothetical_set_function  |  inverse_distribution_function 

 hypothetical_set_function  ::=  rank_function_type   left_paren   hypothetical_set_function_value_expression_list   right_paren   within_group_specification 

 within_group_specification  ::= WITHIN GROUP  left_paren  ORDER BY  sort_specification_list   right_paren 

 hypothetical_set_function_value_expression_list  ::=  value_expression  [ {  comma   value_expression  }... ]

 inverse_distribution_function  ::=  inverse_distribution_function_type   left_paren   inverse_distribution_function_argument   right_paren   within_group_specification 

 inverse_distribution_function_argument  ::=  numeric_value_expression 

 inverse_distribution_function_type  ::= PERCENTILE_CONT | PERCENTILE_DISC



 sort_specification_list  ::=  sort_specification  [ {  comma   sort_specification  }... ]

 sort_specification  ::=  sort_key  [  ordering_specification  ] [  null_ordering  ]

 sort_key  ::=  value_expression 

 ordering_specification  ::= ASC | DESC

 null_ordering  ::= NULLS FIRST | NULLS LAST

--hr



 schema_definition  ::= CREATE SCHEMA  schema_name_clause  [  schema_character_set_or_path  ] [  schema_element ... ]

 schema_character_set_or_path  ::=
		 schema_character_set_specification 
	|	 schema_path_specification 
	|	 schema_character_set_specification   schema_path_specification 
	|	 schema_path_specification   schema_character_set_specification 

 schema_name_clause  ::=
		 schema_name 
	|	AUTHORIZATION  schema_authorization_identifier 
	|	 schema_name  AUTHORIZATION  schema_authorization_identifier 

 schema_authorization_identifier  ::=  authorization_identifier 

 schema_character_set_specification  ::= DEFAULT CHARACTER SET  character_set_specification 

 schema_path_specification  ::=  path_specification 

 schema_element  ::=
		 table_definition 
	|	 view_definition 
	|	 domain_definition 
	|	 character_set_definition 
	|	 collation_definition 
	|	 transliteration_definition 
	|	 assertion_definition 
	|	 trigger_definition 
	|	 user-defined_type_definition 
	|	 user-defined_cast_definition 
	|	 user-defined_ordering_definition 
	|	 transform_definition 
	|	 schema_routine 
	|	 sequence_generator_definition 
	|	 grant_statement 
	|	 role_definition 



 drop_schema_statement  ::= DROP SCHEMA  schema_name   drop_behavior 

 drop_behavior  ::= CASCADE | RESTRICT



 table_definition  ::=
		CREATE [  table_scope  ] TABLE  table_name   table_contents_source 
		[ ON COMMIT  table_commit_action  ROWS ]

 table_contents_source  ::=
		 table_element_list 
	|	OF  path-resolved_user-defined_type_name  [  subtable_clause  ] [  table_element_list  ]
	|	 as_subquery_clause 

 table_scope  ::=  global_or_local  TEMPORARY

 global_or_local  ::= GLOBAL | LOCAL

 table_commit_action  ::= PRESERVE | DELETE

 table_element_list  ::=  left_paren   table_element  [ {  comma   table_element  }... ]  right_paren 

 table_element  ::=
		 column_definition 
	|	 table_constraint_definition 
	|	 like_clause 
	|	 self-referencing_column_specification 
	|	 column_options 

 self-referencing_column_specification  ::= REF IS  self-referencing_column_name   reference_generation 

 reference_generation  ::= SYSTEM GENERATED | USER GENERATED | DERIVED

 self-referencing_column_name  ::=  column_name 

 column_options  ::=  column_name  WITH OPTIONS  column_option_list 

 column_option_list  ::= [  scope_clause  ] [  default_clause  ] [  column_constraint_definition ... ]

 subtable_clause  ::= UNDER  supertable_clause 

 supertable_clause  ::=  supertable_name 

 supertable_name  ::=  table_name 

 like_clause  ::= LIKE  table_name  [  like_options  ]

 like_options  ::=  identity_option  |  column_default_option 

 identity_option  ::= INCLUDING IDENTITY | EXCLUDING IDENTITY

 column_default_option  ::= INCLUDING DEFAULTS | EXCLUDING DEFAULTS

 as_subquery_clause  ::= [  left_paren   column_name_list   right_paren  ] AS  subquery   with_or_without_data 

 with_or_without_data  ::= WITH NO DATA | WITH DATA



 column_definition  ::=
		 column_name  [  data_type  |  domain_name  ] [  reference_scope_check  ]
		[  default_clause  |  identity_column_specification  |  generation_clause  ]
		[  column_constraint_definition ... ] [  collate_clause  ]

 column_constraint_definition  ::= [  constraint_name_definition  ]  column_constraint  [  constraint_characteristics  ]

 column_constraint  ::=
		NOT NULL
	|	 unique_specification 
	|	 references_specification 
	|	 check_constraint_definition 

 reference_scope_check  ::= REFERENCES ARE [ NOT ] CHECKED [ ON DELETE  reference_scope_check_action  ]

 reference_scope_check_action  ::=  referential_action 

 identity_column_specification  ::=
		GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY
		[  left_paren   common_sequence_generator_options   right_paren  ]

 generation_clause  ::=  generation_rule  AS  generation_expression 

 generation_rule  ::= GENERATED ALWAYS

 generation_expression  ::=  left_paren   value_expression   right_paren 



 default_clause  ::= DEFAULT  default_option 

 default_option  ::=
		 literal 
	|	 datetime_value_function 
	|	USER
	|	CURRENT_USER
	|	CURRENT_ROLE
	|	SESSION_USER
	|	SYSTEM_USER
	|	CURRENT_PATH
	|	 implicitly_typed_value_specification 



 table_constraint_definition  ::= [  constraint_name_definition  ]  table_constraint  [  constraint_characteristics  ]

 table_constraint  ::=
		 unique_constraint_definition 
	|	 referential_constraint_definition 
	|	 check_constraint_definition 



 unique_constraint_definition  ::=
		 unique_specification   left_paren   unique_column_list   right_paren 
	|	UNIQUE ( VALUE )

 unique_specification  ::= UNIQUE | PRIMARY KEY

 unique_column_list  ::=  column_name_list 



 referential_constraint_definition  ::= FOREIGN KEY  left_paren   referencing_columns   right_paren   references_specification 

 references_specification  ::= REFERENCES  referenced_table_and_columns  [ MATCH  match_type  ] [  referential_triggered_action  ]

 match_type  ::= FULL | PARTIAL | SIMPLE

 referencing_columns  ::=  reference_column_list 

 referenced_table_and_columns  ::=  table_name  [  left_paren   reference_column_list   right_paren  ]

 reference_column_list  ::=  column_name_list 

 referential_triggered_action  ::=  update_rule  [  delete_rule  ] |  delete_rule  [  update_rule  ]

 update_rule  ::= ON UPDATE  referential_action 

 delete_rule  ::= ON DELETE  referential_action 

 referential_action  ::= CASCADE | SET NULL | SET DEFAULT | RESTRICT | NO ACTION



 check_constraint_definition  ::= CHECK  left_paren   search_condition   right_paren 



 alter_table_statement  ::= ALTER TABLE  table_name   alter_table_action 

 alter_table_action  ::=
		 add_column_definition 
	|	 alter_column_definition 
	|	 drop_column_definition 
	|	 add_table_constraint_definition 
	|	 drop_table_constraint_definition 



 add_column_definition  ::= ADD [ COLUMN ]  column_definition 



 alter_column_definition  ::= ALTER [ COLUMN ]  column_name   alter_column_action 

 alter_column_action  ::=
		 set_column_default_clause 
	|	 drop_column_default_clause 
	|	 add_column_scope_clause 
	|	 drop_column_scope_clause 
	|	 alter_identity_column_specification 



 set_column_default_clause  ::= SET  default_clause 



 drop_column_default_clause  ::= DROP DEFAULT



 add_column_scope_clause  ::= ADD  scope_clause 



 drop_column_scope_clause  ::= DROP SCOPE  drop_behavior 



 alter_identity_column_specification  ::=  alter_identity_column_option ...

 alter_identity_column_option  ::=
		 alter_sequence_generator_restart_option 
	|	SET  basic_sequence_generator_option 



 drop_column_definition  ::= DROP [ COLUMN ]  column_name   drop_behavior 



 add_table_constraint_definition  ::= ADD  table_constraint_definition 



 drop_table_constraint_definition  ::= DROP CONSTRAINT  constraint_name   drop_behavior 



 drop_table_statement  ::= DROP TABLE  table_name   drop_behavior 



 view_definition  ::=
		CREATE [ RECURSIVE ] VIEW  table_name   view_specification  AS  query_expression 
		[ WITH [  levels_clause  ] CHECK OPTION ]

 view_specification  ::=  regular_view_specification  |  referenceable_view_specification 

 regular_view_specification  ::= [  left_paren   view_column_list   right_paren  ]

 referenceable_view_specification  ::= OF  path-resolved_user-defined_type_name  [  subview_clause  ] [  view_element_list  ]

 subview_clause  ::= UNDER  table_name 

 view_element_list  ::=  left_paren   view_element  [ {  comma   view_element  }... ]  right_paren 

 view_element  ::=  self-referencing_column_specification  |  view_column_option 

 view_column_option  ::=  column_name  WITH OPTIONS  scope_clause 

 levels_clause  ::= CASCADED | LOCAL

 view_column_list  ::=  column_name_list 



 drop_view_statement  ::= DROP VIEW  table_name   drop_behavior 



 domain_definition  ::=
		CREATE DOMAIN  domain_name  [ AS ]  data_type 
		[  default_clause  ] [  domain_constraint ... ] [  collate_clause  ]

 domain_constraint  ::= [  constraint_name_definition  ]  check_constraint_definition  [  constraint_characteristics  ]



 alter_domain_statement  ::= ALTER DOMAIN  domain_name   alter_domain_action 

 alter_domain_action  ::=
		 set_domain_default_clause 
	|	 drop_domain_default_clause 
	|	 add_domain_constraint_definition 
	|	 drop_domain_constraint_definition 



 set_domain_default_clause  ::= SET  default_clause 



 drop_domain_default_clause  ::= DROP DEFAULT



 add_domain_constraint_definition  ::= ADD  domain_constraint 



 drop_domain_constraint_definition  ::= DROP CONSTRAINT  constraint_name 



 drop_domain_statement  ::= DROP DOMAIN  domain_name   drop_behavior 



 character_set_definition  ::=
		CREATE CHARACTER SET  character_set_name  [ AS ]  character_set_source  [  collate_clause  ]

 character_set_source  ::= GET  character_set_specification 



 drop_character_set_statement  ::= DROP CHARACTER SET  character_set_name 



 collation_definition  ::=
		CREATE COLLATION  collation_name  FOR  character_set_specification 
		FROM  existing_collation_name  [  pad_characteristic  ]

 existing_collation_name  ::=  collation_name 

 pad_characteristic  ::= NO PAD | PAD SPACE



 drop_collation_statement  ::= DROP COLLATION  collation_name   drop_behavior 



 transliteration_definition  ::=
		CREATE TRANSLATION  transliteration_name  FOR  source_character_set_specification 
		TO  target_character_set_specification  FROM  transliteration_source 

 source_character_set_specification  ::=  character_set_specification 

 target_character_set_specification  ::=  character_set_specification 

 transliteration_source  ::=  existing_transliteration_name  |  transliteration_routine 

 existing_transliteration_name  ::=  transliteration_name 

 transliteration_routine  ::=  specific_routine_designator 



 drop_transliteration_statement  ::= DROP TRANSLATION  transliteration_name 



 assertion_definition  ::=
		CREATE ASSERTION  constraint_name  CHECK  left_paren   search_condition   right_paren  [  constraint_characteristics  ]



 drop_assertion_statement  ::= DROP ASSERTION  constraint_name 



 trigger_definition  ::=
		CREATE TRIGGER  trigger_name   trigger_action_time   trigger_event 
		ON  table_name  [ REFERENCING  old_or_new_values_alias_list  ]
		 triggered_action 

 trigger_action_time  ::= BEFORE | AFTER

 trigger_event  ::= INSERT | DELETE | UPDATE [ OF  trigger_column_list  ]

 trigger_column_list  ::=  column_name_list 

 triggered_action  ::=
		[ FOR EACH { ROW | STATEMENT } ]
		[ WHEN  left_paren   search_condition   right_paren  ]
		 triggered_SQL_statement 

 triggered_SQL_statement  ::=
		 SQL_procedure_statement 
	|	BEGIN ATOMIC {  SQL_procedure_statement   semicolon  }...  END

 old_or_new_values_alias_list  ::=  old_or_new_values_alias ...

 old_or_new_values_alias  ::=
		OLD [ ROW ] [ AS ]  old_values_correlation_name 
	|	NEW [ ROW ] [ AS ]  new_values_correlation_name 
	|	OLD TABLE [ AS ]  old_values_table_alias 
	|	NEW TABLE [ AS ]  new_values_table_alias 

 old_values_table_alias  ::=  identifier 

 new_values_table_alias  ::=  identifier 

 old_values_correlation_name  ::=  correlation_name 

 new_values_correlation_name  ::=  correlation_name 



 drop_trigger_statement  ::= DROP TRIGGER  trigger_name 



 user-defined_type_definition  ::= CREATE TYPE  user-defined_type_body 

 user-defined_type_body  ::=
		 schema-resolved_user-defined_type_name  [  subtype_clause  ]
		[ AS  representation  ] [  user-defined_type_option_list  ] [  method_specification_list  ]

 user-defined_type_option_list  ::=  user-defined_type_option  [  user-defined_type_option ... ]

 user-defined_type_option  ::=
		 instantiable_clause 
	|	 finality 
	|	 reference_type_specification 
	|	 ref_cast_option 
	|	 cast_option 

 subtype_clause  ::=
		UNDER  supertype_name 

 supertype_name  ::=
		 path-resolved_user-defined_type_name 

 representation  ::=  predefined_type  |  member_list 

 member_list  ::=  left_paren   member  [ {  comma   member  }... ]  right_paren 

 member  ::=  attribute_definition 

 instantiable_clause  ::= INSTANTIABLE | NOT INSTANTIABLE

 finality  ::= FINAL | NOT FINAL

 reference_type_specification  ::=
		 user-defined_representation 
	|	 derived_representation 
	|	 system-generated_representation 

 user-defined_representation  ::= REF USING  predefined_type 

 derived_representation  ::= REF FROM  list_of_attributes 

 system-generated_representation  ::= REF IS SYSTEM GENERATED

 ref_cast_option  ::= [  cast_to_ref  ] [  cast_to_type  ]

 cast_to_ref  ::= CAST  left_paren  SOURCE AS REF  right_paren  WITH  cast_to_ref_identifier 

 cast_to_ref_identifier  ::=  identifier 

 cast_to_type  ::= CAST  left_paren  REF AS SOURCE  right_paren  WITH  cast_to_type_identifier 

 cast_to_type_identifier  ::=  identifier 

 list_of_attributes  ::=  left_paren   attribute_name  [ {  comma   attribute_name  }...]  right_paren 

 cast_option  ::= [  cast_to_distinct  ] [  cast_to_source  ]

 cast_to_distinct  ::=
		CAST  left_paren  SOURCE AS DISTINCT  right_paren 
		WITH  cast_to_distinct_identifier 

 cast_to_distinct_identifier  ::=  identifier 

 cast_to_source  ::=
		CAST  left_paren  DISTINCT AS SOURCE  right_paren 
		WITH  cast_to_source_identifier 

 cast_to_source_identifier  ::=  identifier 

 method_specification_list  ::=  method_specification  [ {  comma   method_specification  }... ]

 method_specification  ::=  original_method_specification  |  overriding_method_specification 

 original_method_specification  ::=
		 partial_method_specification  [ SELF AS RESULT ] [ SELF AS LOCATOR ] [  method_characteristics  ]

 overriding_method_specification  ::= OVERRIDING  partial_method_specification 

 partial_method_specification  ::=
		[ INSTANCE | STATIC | CONSTRUCTOR ] METHOD  method_name   SQL_parameter_declaration_list 
		 returns_clause  [ SPECIFIC  specific_method_name  ]

 specific_method_name  ::= [  schema_name   period  ] qualified_identifier 

 method_characteristics  ::=  method_characteristic ...

 method_characteristic  ::=
		 language_clause 
	|	 parameter_style_clause 
	|	 deterministic_characteristic 
	|	 SQL-data_access_indication 
	|	 null-call_clause 



 attribute_definition  ::=
		 attribute_name   data_type  [  reference_scope_check  ] [  attribute_default  ] [  collate_clause  ]

 attribute_default  ::=  default_clause 



 alter_type_statement  ::=
ALTER TYPE  schema-resolved_user-defined_type_name   alter_type_action 

 alter_type_action  ::=
		 add_attribute_definition 
	|	 drop_attribute_definition 
	|	 add_original_method_specification 
	|	 add_overriding_method_specification 
	|	 drop_method_specification 



 add_attribute_definition  ::= ADD ATTRIBUTE  attribute_definition 



 drop_attribute_definition  ::= DROP ATTRIBUTE  attribute_name  RESTRICT



 add_original_method_specification  ::= ADD  original_method_specification 



 add_overriding_method_specification  ::= ADD  overriding_method_specification 



 drop_method_specification  ::= DROP  specific_method_specification_designator  RESTRICT

 specific_method_specification_designator  ::= [ INSTANCE | STATIC | CONSTRUCTOR ] METHOD  method_name   data_type_list 



 drop_data_type_statement  ::= DROP TYPE  schema-resolved_user-defined_type_name   drop_behavior 



 SQL-invoked_routine  ::=  schema_routine 

 schema_routine  ::=  schema_procedure  |  schema_function 

 schema_procedure  ::= CREATE  SQL-invoked_procedure 

 schema_function  ::= CREATE  SQL-invoked_function 

 SQL-invoked_procedure  ::=
		PROCEDURE  schema_qualified_routine_name   SQL_parameter_declaration_list   routine_characteristics   routine_body 

 SQL-invoked_function  ::=
		{  function_specification  |  method_specification_designator  }  routine_body 

 SQL_parameter_declaration_list  ::=
		 left_paren  [  SQL_parameter_declaration  [ {  comma   SQL_parameter_declaration  }... ] ]  right_paren 

 SQL_parameter_declaration  ::= [  parameter_mode  ] [  SQL_parameter_name  ]  parameter_type  [ RESULT ]

 parameter_mode  ::= IN | OUT | INOUT

 parameter_type  ::=  data_type  [  locator_indication  ]

 locator_indication  ::= AS LOCATOR

 function_specification  ::=
		FUNCTION  schema_qualified_routine_name 
		 SQL_parameter_declaration_list   returns_clause   routine_characteristics  [  dispatch_clause  ]

 method_specification_designator  ::=
		SPECIFIC METHOD  specific_method_name 
	|	[ INSTANCE | STATIC | CONSTRUCTOR ] METHOD  method_name   SQL_parameter_declaration_list 
		[  returns_clause  ] FOR  schema-resolved_user-defined_type_name 

 routine_characteristics  ::= [  routine_characteristic ... ]

 routine_characteristic  ::=
		 language_clause 
	|	 parameter_style_clause 
	|	SPECIFIC  specific_name 
	|	 deterministic_characteristic 
	|	 SQL-data_access_indication 
	|	 null-call_clause 
	|	 dynamic_result_sets_characteristic 
	|	 savepoint_level_indication 

 savepoint_level_indication  ::= NEW SAVEPOINT LEVEL | OLD SAVEPOINT LEVEL

 dynamic_result_sets_characteristic  ::= DYNAMIC RESULT SETS  maximum_dynamic_result_sets 

 parameter_style_clause  ::= PARAMETER STYLE  parameter_style 

 dispatch_clause  ::= STATIC DISPATCH

 returns_clause  ::= RETURNS  returns_type 

 returns_type  ::=
		 returns_data_type  [  result_cast  ]
	|	 returns_table_type 

 returns_table_type  ::= TABLE  table_function_column_list 

 table_function_column_list  ::=
		 left_paren 
		 table_function_column_list_element  [ {  comma   table_function_column_list_element  }... ]
		 right_paren 

 table_function_column_list_element  ::=  column_name   data_type 

 result_cast  ::= CAST FROM  result_cast_from_type 

 result_cast_from_type  ::=  data_type  [  locator_indication  ]

 returns_data_type  ::=  data_type  [  locator_indication  ]

 routine_body  ::=
		 SQL_routine_spec 
	|	 external_body_reference 

 SQL_routine_spec  ::= [  rights_clause  ]  SQL_routine_body 

 rights_clause  ::= SQL SECURITY INVOKER | SQL SECURITY DEFINER

 SQL_routine_body  ::=  SQL_procedure_statement 

 external_body_reference  ::=
		EXTERNAL [ NAME  external_routine_name  ] [  parameter_style_clause  ]
		[  transform_group_specification  ] [  external_security_clause  ]

 external_security_clause  ::=
		EXTERNAL SECURITY DEFINER
	|	EXTERNAL SECURITY INVOKER
	|	EXTERNAL SECURITY IMPLEMENTATION DEFINED

 parameter_style  ::= SQL | GENERAL

 deterministic_characteristic  ::= DETERMINISTIC | NOT DETERMINISTIC

 SQL-data_access_indication  ::=
		NO SQL
	|	CONTAINS SQL
	|	READS SQL DATA
	|	MODIFIES SQL DATA

 null-call_clause  ::=
		RETURNS NULL ON NULL INPUT
	|	CALLED ON NULL INPUT

 maximum_dynamic_result_sets  ::=  unsigned_integer 

 transform_group_specification  ::= TRANSFORM GROUP {  single_group_specification  |  multiple_group_specification  }

 single_group_specification  ::=  group_name 

 multiple_group_specification  ::=  group_specification  [ {  comma   group_specification  }... ]

 group_specification  ::=  group_name  FOR TYPE  path-resolved_user-defined_type_name 



 alter_routine_statement  ::= ALTER  specific_routine_designator   alter_routine_characteristics   alter_routine_behavior 

 alter_routine_characteristics  ::=  alter_routine_characteristic ...

 alter_routine_characteristic  ::=
		 language_clause 
	|	 parameter_style_clause 
	|	 SQL-data_access_indication 
	|	 null-call_clause 
	|	 dynamic_result_sets_characteristic 
	|	NAME  external_routine_name 

 alter_routine_behavior  ::= RESTRICT



 drop_routine_statement  ::= DROP  specific_routine_designator   drop_behavior 



 user-defined_cast_definition  ::=
		CREATE CAST  left_paren   source_data_type  AS  target_data_type   right_paren 
		WITH  cast_function  [ AS ASSIGNMENT ]

 cast_function  ::=  specific_routine_designator 

 source_data_type  ::=  data_type 

 target_data_type  ::=  data_type 



 drop_user-defined_cast_statement  ::=
		DROP CAST  left_paren   source_data_type  AS  target_data_type   right_paren   drop_behavior 



 user-defined_ordering_definition  ::=
		CREATE ORDERING FOR  schema-resolved_user-defined_type_name   ordering_form 

 ordering_form  ::=  equals_ordering_form  |  full_ordering_form 

 equals_ordering_form  ::= EQUALS ONLY BY  ordering_category 

 full_ordering_form  ::= ORDER FULL BY  ordering_category 

 ordering_category  ::=  relative_category  |  map_category  |  state_category 

 relative_category  ::= RELATIVE WITH  relative_function_specification 

 map_category  ::= MAP WITH  map_function_specification 

 state_category  ::= STATE [  specific_name  ]

 relative_function_specification  ::=  specific_routine_designator 

 map_function_specification  ::=  specific_routine_designator 



 drop_user-defined_ordering_statement  ::=
		DROP ORDERING FOR  schema-resolved_user-defined_type_name   drop_behavior 



 transform_definition  ::= CREATE { TRANSFORM | TRANSFORMS } FOR  schema-resolved_user-defined_type_name   transform_group ...

 transform_group  ::=  group_name   left_paren   transform_element_list   right_paren 

 group_name  ::=  identifier 

 transform_element_list  ::=  transform_element  [  comma   transform_element  ]

 transform_element  ::=  to_sql  |  from_sql 

 to_sql  ::= TO SQL WITH  to_sql_function 

 from_sql  ::= FROM SQL WITH  from_sql_function 

 to_sql_function  ::=  specific_routine_designator 

 from_sql_function  ::=  specific_routine_designator 



 alter_transform_statement  ::=
		ALTER { TRANSFORM | TRANSFORMS } FOR  schema-resolved_user-defined_type_name   alter_group ...

 alter_group  ::=  group_name   left_paren   alter_transform_action_list   right_paren 

 alter_transform_action_list  ::=  alter_transform_action  [ {  comma   alter_transform_action  }... ]

 alter_transform_action  ::=  add_transform_element_list  |  drop_transform_element_list 



 add_transform_element_list  ::= ADD  left_paren   transform_element_list   right_paren 



 drop_transform_element_list  ::= DROP  left_paren   transform_kind  [  comma   transform_kind  ]  drop_behavior   right_paren 

 transform_kind  ::= TO SQL | FROM SQL



 drop_transform_statement  ::=
		DROP { TRANSFORM | TRANSFORMS }  transforms_to_be_dropped  FOR  schema-resolved_user-defined_type_name   drop_behavior 

 transforms_to_be_dropped  ::= ALL |  transform_group_element 

 transform_group_element  ::=  group_name 



 sequence_generator_definition  ::= CREATE SEQUENCE  sequence_generator_name  [  sequence_generator_options  ]

 sequence_generator_options  ::=  sequence_generator_option  ...

 sequence_generator_option  ::=  sequence_generator_data_type_option  |  common_sequence_generator_options 

 common_sequence_generator_options  ::=  common_sequence_generator_option  ...

 common_sequence_generator_option  ::=  sequence_generator_start_with_option  |  basic_sequence_generator_option 

 basic_sequence_generator_option  ::=
		 sequence_generator_increment_by_option 
	|	 sequence_generator_maxvalue_option 
	|	 sequence_generator_minvalue_option 
	|	 sequence_generator_cycle_option 

 sequence_generator_data_type_option  ::= AS  data_type 

 sequence_generator_start_with_option  ::= START WITH  sequence_generator_start_value 

 sequence_generator_start_value  ::=  signed_numeric_literal 

 sequence_generator_increment_by_option  ::= INCREMENT BY  sequence_generator_increment 

 sequence_generator_increment  ::=  signed_numeric_literal 

 sequence_generator_maxvalue_option  ::=
		MAXVALUE  sequence_generator_max_value 
	|	NO MAXVALUE

 sequence_generator_max_value  ::=  signed_numeric_literal 

 sequence_generator_minvalue_option  ::= MINVALUE  sequence_generator_min_value  | NO MINVALUE

 sequence_generator_min_value  ::=  signed_numeric_literal 

 sequence_generator_cycle_option  ::= CYCLE | NO CYCLE



 alter_sequence_generator_statement  ::=
		ALTER SEQUENCE  sequence_generator_name   alter_sequence_generator_options 

 alter_sequence_generator_options  ::=  alter_sequence_generator_option ...

 alter_sequence_generator_option  ::=
		 alter_sequence_generator_restart_option 
	|	 basic_sequence_generator_option 

 alter_sequence_generator_restart_option  ::= RESTART WITH  sequence_generator_restart_value 

 sequence_generator_restart_value  ::=  signed_numeric_literal 



 drop_sequence_generator_statement  ::= DROP SEQUENCE  sequence_generator_name   drop_behavior 

--hr



 grant_statement  ::=  grant_privilege_statement  |  grant_role_statement 



 grant_privilege_statement  ::=
		GRANT  privileges  TO  grantee  [ {  comma   grantee  }... ]
		[ WITH HIERARCHY OPTION ] [ WITH GRANT OPTION ] [ GRANTED BY  grantor  ]



 privileges  ::=  object_privileges  ON  object_name 

 object_name  ::=
		[ TABLE ]  table_name 
	|	DOMAIN  domain_name 
	|	COLLATION  collation_name 
	|	CHARACTER SET  character_set_name 
	|	TRANSLATION  transliteration_name 
	|	TYPE  schema-resolved_user-defined_type_name 
	|	SEQUENCE  sequence_generator_name 
	|	 specific_routine_designator 

 object_privileges  ::=
		ALL PRIVILEGES
	|	 action  [ {  comma   action  }... ]

 action  ::=
		SELECT
	|	SELECT  left_paren   privilege_column_list   right_paren 
	|	SELECT  left_paren   privilege_method_list   right_paren 
	|	DELETE
	|	INSERT [  left_paren   privilege_column_list   right_paren  ]
	|	UPDATE [  left_paren   privilege_column_list   right_paren  ]
	|	REFERENCES [  left_paren   privilege_column_list   right_paren  ]
	|	USAGE
	|	TRIGGER
	|	UNDER
	|	EXECUTE

 privilege_method_list  ::=  specific_routine_designator  [ {  comma   specific_routine_designator  }... ]

 privilege_column_list  ::=  column_name_list 

 grantee  ::= PUBLIC |  authorization_identifier 

 grantor  ::= CURRENT_USER | CURRENT_ROLE



 role_definition  ::= CREATE ROLE  role_name  [ WITH ADMIN  grantor  ]



 grant_role_statement  ::=
		GRANT  role_granted  [ {  comma   role_granted  }... ]
		TO  grantee  [ {  comma   grantee  }... ] [ WITH ADMIN OPTION ] [ GRANTED BY  grantor  ]

 role_granted  ::=  role_name 



 drop_role_statement  ::= DROP ROLE  role_name 



 revoke_statement  ::=
		 revoke_privilege_statement 
	|	 revoke_role_statement 

 revoke_privilege_statement  ::=
		REVOKE [  revoke_option_extension  ]  privileges  FROM  grantee  [ {  comma   grantee  }... ]
		[ GRANTED BY  grantor  ]  drop_behavior 

 revoke_option_extension  ::= GRANT OPTION FOR | HIERARCHY OPTION FOR

 revoke_role_statement  ::=
		REVOKE [ ADMIN OPTION FOR ]  role_revoked  [ {  comma   role_revoked  }... ]
		FROM  grantee  [ {  comma   grantee  }... ] [ GRANTED BY  grantor  ]  drop_behavior 

 role_revoked  ::=  role_name 

--hr



 SQL-client_module_definition  ::=
		 module_name_clause   language_clause   module_authorization_clause 
		[  module_path_specification  ]
		[  module_transform_group_specification  ]
		[  module_collation  ]
		[  temporary_table_declaration ... ]
		 module_contents ...

 module_authorization_clause  ::=
		SCHEMA  schema_name 
	|	AUTHORIZATION  module_authorization_identifier  [ FOR STATIC { ONLY | AND DYNAMIC } ]
	|	SCHEMA  schema_name  AUTHORIZATION  module_authorization_identifier  [ FOR STATIC { ONLY | AND DYNAMIC } ]

 module_authorization_identifier  ::=  authorization_identifier 

 module_path_specification  ::=  path_specification 

 module_transform_group_specification  ::=  transform_group_specification 

 module_collations  ::=  module_collation_specification ...

 module_collation_specification  ::= COLLATION  collation_name  [ FOR  character_set_specification_list  ]

 character_set_specification_list  ::=  character_set_specification  [ {  comma   character_set_specification  }... ]

 module_contents  ::=
		 declare_cursor 
	|	 dynamic_declare_cursor 
	|	 externally-invoked_procedure 



 module_name_clause  ::=
		MODULE [  SQL-client_module_name  ] [  module_character_set_specification  ]

 module_character_set_specification  ::= NAMES ARE  character_set_specification 



 externally-invoked_procedure  ::=
		PROCEDURE  procedure_name   host_parameter_declaration_list   semicolon 
		 SQL_procedure_statement   semicolon 

 host_parameter_declaration_list  ::=
		 left_paren   host_parameter_declaration  [ {  comma   host_parameter_declaration  }... ]  right_paren 

 host_parameter_declaration  ::=
		 host_parameter_name   host_parameter_data_type 
	|	 status_parameter 

 host_parameter_data_type  ::=  data_type  [  locator_indication  ]

 status_parameter  ::= SQLSTATE




 SQL_procedure_statement  ::=  SQL_executable_statement 

 SQL_executable_statement  ::=
		 SQL_schema_statement 
	|	 SQL_data_statement 
	|	 SQL_control_statement 
	|	 SQL_transaction_statement 
	|	 SQL_connection_statement 
	|	 SQL_session_statement 
	|	 SQL_diagnostics_statement 
	|	 SQL_dynamic_statement 

 SQL_schema_statement  ::=
		 SQL_schema_definition_statement 
	|	 SQL_schema_manipulation_statement 

 SQL_schema_definition_statement  ::=
		 schema_definition 
	|	 table_definition 
	|	 view_definition 
	|	 SQL-invoked_routine 
	|	 grant_statement 
	|	 role_definition 
	|	 domain_definition 
	|	 character_set_definition 
	|	 collation_definition 
	|	 transliteration_definition 
	|	 assertion_definition 
	|	 trigger_definition 
	|	 user-defined_type_definition 
	|	 user-defined_cast_definition 
	|	 user-defined_ordering_definition 
	|	 transform_definition 
	|	 sequence_generator_definition 

 SQL_schema_manipulation_statement  ::=
		 drop_schema_statement 
	|	 alter_table_statement 
	|	 drop_table_statement 
	|	 drop_view_statement 
	|	 alter_routine_statement 
	|	 drop_routine_statement 
	|	 drop_user-defined_cast_statement 
	|	 revoke_statement 
	|	 drop_role_statement 
	|	 alter_domain_statement 
	|	 drop_domain_statement 
	|	 drop_character_set_statement 
	|	 drop_collation_statement 
	|	 drop_transliteration_statement 
	|	 drop_assertion_statement 
	|	 drop_trigger_statement 
	|	 alter_type_statement 
	|	 drop_data_type_statement 
	|	 drop_user-defined_ordering_statement 
	|	 alter_transform_statement 
	|	 drop_transform_statement  |  alter_sequence_generator_statement 
	|	 drop_sequence_generator_statement 

 SQL_data_statement  ::=
		 open_statement 
	|	 fetch_statement 
	|	 close_statement 
	|	 select_statement:_single_row 
	|	 free_locator_statement 
	|	 hold_locator_statement 
	|	 SQL_data_change_statement 

 SQL_data_change_statement  ::=
		 delete_statement:_positioned 
	|	 delete_statement:_searched 
	|	 insert_statement 
	|	 update_statement:_positioned 
	|	 update_statement:_searched 
	|	 merge_statement 

 SQL_control_statement  ::=
		 call_statement 
	|	 return_statement 

 SQL_transaction_statement  ::=
		 start_transaction_statement 
	|	 set_transaction_statement 
	|	 set_constraints_mode_statement 
	|	 savepoint_statement 
	|	 release_savepoint_statement 
	|	 commit_statement 
	|	 rollback_statement 

 SQL_connection_statement  ::=
		 connect_statement 
	|	 set_connection_statement 
	|	 disconnect_statement 

 SQL_session_statement  ::=
		 set_session_user_identifier_statement 
	|	 set_role_statement 
	|	 set_local_time_zone_statement 
	|	 set_session_characteristics_statement 
	|	 set_catalog_statement 
	|	 set_schema_statement 
	|	 set_names_statement 
	|	 set_path_statement 
	|	 set_transform_group_statement 
	|	 set_session_collation_statement 

 SQL_diagnostics_statement  ::=  get_diagnostics_statement 

 SQL_dynamic_statement  ::=
		 system_descriptor_statement 
	|	 prepare_statement 
	|	 deallocate_prepared_statement 
	|	 describe_statement 
	|	 execute_statement 
	|	 execute_immediate_statement 
	|	 SQL_dynamic_data_statement 

 SQL_dynamic_data_statement  ::=
		 allocate_cursor_statement 
	|	 dynamic_open_statement 
	|	 dynamic_fetch_statement 
	|	 dynamic_close_statement 
	|	 dynamic_delete_statement:_positioned 
	|	 dynamic_update_statement:_positioned 

 system_descriptor_statement  ::=
		 allocate_descriptor_statement 
	|	 deallocate_descriptor_statement 
	|	 set_descriptor_statement 
	|	 get_descriptor_statement 


Table 16 -- Data type correspondences for C

--##  table_border=1 
--##  tr  th  SQL Data Type  /th  th  C Data Type  /th  /tr 

--##  tr  td  SQLSTATE  /td  td  char, with length 6  /td  /tr 
--##  tr  td  CHARACTER (L) sup 3 /sup   /td  td  char, with length (L+1)*k sup 1 /sup   /td  /tr 
--##  tr  td  CHARACTER VARYING (L) sup 3 /sup   /td  td  char, with length (L+1)*k sup 1 /sup   /td  /tr 
--##  tr  td  CHARACTER LARGE OBJECT(L)  /td  td 
--##  pre 
--## struct {
--## long hvn sup 3 /sup _reserved
--## unsigned long hvn sup 2 /sup _length
--## char sup 3 /sup  hvn sup 2 /sup _data[L];
--## } hvn sup 2 /sup 
--##  /pre   /td  /tr 
--##  tr  td  BINARY LARGE OBJECT(L)  /td  td 
--##  pre  struct {
--## long hvn sup 2 /sup _reserved
--## unsigned long hvn sup 2 /sup _length
--## char hvn sup 2 /sup _data[L];
--## } hvn sup 2 /sup 
--##  /pre   /td  /tr 
--##  tr  td  NUMERIC(P,S)  /td  td  None  /td  /tr 
--##  tr  td  DECIMAL(P,S)  /td  td  None  /td  /tr 
--##  tr  td  SMALLINT  /td  td  pointer to short  /td  /tr 
--##  tr  td  INTEGER  /td  td  pointer to long  /td  /tr 
--##  tr  td  BIGINT  /td  td  pointer to long long  /td  /tr 
--##  tr  td  FLOAT(P)  /td  td  None  /td  /tr 
--##  tr  td  REAL  /td  td  pointer to float  /td  /tr 
--##  tr  td  DOUBLE PRECISION  /td  td  pointer to double  /td  /tr 
--##  tr  td  BOOLEAN  /td  td  pointer to long  /td  /tr 
--##  tr  td  DATE  /td  td  None  /td  /tr 
--##  tr  td  TIME(T)  /td  td  None  /td  /tr 
--##  tr  td  TIMESTAMP(T)  /td  td  None  /td  /tr 
--##  tr  td  INTERVAL(Q)  /td  td  None  /td  /tr 
--##  tr  td  user-defined type  /td  td  None  /td  /tr 
--##  tr  td  REF  /td  td  char, with length N  /td  /tr 
--##  tr  td  ROW  /td  td  None  /td  /tr 
--##  tr  td  ARRAY  /td  td  None  /td  /tr 
--##  tr  td  MULTISET  /td  td  None  /td  /tr 
--##  /table 


--hr



 declare_cursor  ::=
		DECLARE  cursor_name  [  cursor_sensitivity  ] [  cursor_scrollability  ] CURSOR
		[  cursor_holdability  ] [  cursor_returnability  ] FOR  cursor_specification 

 cursor_sensitivity  ::= SENSITIVE | INSENSITIVE | ASENSITIVE

 cursor_scrollability  ::= SCROLL | NO SCROLL

 cursor_holdability  ::= WITH HOLD | WITHOUT HOLD

 cursor_returnability  ::= WITH RETURN | WITHOUT RETURN

 cursor_specification  ::=  query_expression  [  order_by_clause  ] [  updatability_clause  ] 

 updatability_clause  ::= FOR { READ ONLY | UPDATE [ OF  column_name_list  ] }

 order_by_clause  ::= ORDER BY  sort_specification_list 



 open_statement  ::= OPEN  cursor_name 



 fetch_statement  ::=
		FETCH [ [  fetch_orientation  ] FROM ]  cursor_name  INTO  fetch_target_list 

 fetch_orientation  ::=
		NEXT
	|	PRIOR
	|	FIRST
	|	LAST
	|	{ ABSOLUTE | RELATIVE }  simple_value_specification 

 fetch_target_list  ::=  target_specification  [ {  comma   target_specification  }... ]



 close_statement  ::= CLOSE  cursor_name 



 select_statement:_single_row  ::=
		SELECT [  set_quantifier  ]  select_list  INTO  select_target_list   table_expression 

 select_target_list  ::=  target_specification  [ {  comma   target_specification  }... ]



 delete_statement:_positioned  ::= DELETE FROM  target_table  WHERE CURRENT OF  cursor_name 

 target_table  ::=
		 table_name 
	|	ONLY  left_paren   table_name   right_paren 



 delete_statement:_searched  ::= DELETE FROM  target_table  [ WHERE  search_condition  ]



 insert_statement  ::= INSERT INTO  insertion_target   insert_columns_and_source 

 insertion_target  ::=  table_name 

 insert_columns_and_source  ::=
		 from_subquery 
	|	 from_constructor 
	|	 from_default 

 from_subquery  ::= [  left_paren   insert_column_list   right_paren  ] [  override_clause  ]  query_expression 

 from_constructor  ::=
		[  left_paren   insert_column_list   right_paren  ] [  override_clause  ]  contextually_typed_table_value_constructor 

 override_clause  ::= OVERRIDING USER VALUE | OVERRIDING SYSTEM VALUE

 from_default  ::= DEFAULT VALUES

 insert_column_list  ::=  column_name_list 



 merge_statement  ::=
		MERGE INTO  target_table  [ [ AS ]  merge_correlation_name  ]
		USING  table_reference  ON  search_condition   merge_operation_specification 

 merge_correlation_name  ::=  correlation_name 

 merge_operation_specification  ::=  merge_when_clause ...

 merge_when_clause  ::=  merge_when_matched_clause  |  merge_when_not_matched_clause 

 merge_when_matched_clause  ::= WHEN MATCHED THEN  merge_update_specification 

 merge_when_not_matched_clause  ::= WHEN NOT MATCHED THEN  merge_insert_specification 

 merge_update_specification  ::= UPDATE SET  set_clause_list 

 merge_insert_specification  ::=
		INSERT [  left_paren   insert_column_list   right_paren  ]
		[  override_clause  ] VALUES  merge_insert_value_list 

 merge_insert_value_list  ::=
		 left_paren   merge_insert_value_element  [ {  comma   merge_insert_value_element  }... ]  right_paren 

 merge_insert_value_element  ::=  value_expression  |  contextually_typed_value_specification 



 update_statement:_positioned  ::= UPDATE  target_table  SET  set_clause_list  WHERE CURRENT OF  cursor_name 



 update_statement:_searched  ::= UPDATE  target_table  SET  set_clause_list  [ WHERE  search_condition  ]



 set_clause_list  ::=  set_clause  [ {  comma   set_clause  }... ]

 set_clause  ::=
		 multiple_column_assignment 
	|	 set_target   equals_operator   update_source 

 set_target  ::=  update_target  |  mutated_set_clause 

 multiple_column_assignment  ::=  set_target_list   equals_operator   assigned_row 

 set_target_list  ::=  left_paren   set_target  [ {  comma   set_target  }... ]  right_paren 

 assigned_row  ::=  contextually_typed_row_value_expression 

 update_target  ::=
		 object_column 
	|	 object_column   left_bracket_or_trigraph   simple_value_specification   right_bracket_or_trigraph 

 object_column  ::=  column_name 

 mutated_set_clause  ::=  mutated_target   period   method_name 

 mutated_target  ::=  object_column  |  mutated_set_clause 

 update_source  ::=  value_expression  |  contextually_typed_value_specification 



 temporary_table_declaration  ::=
		DECLARE LOCAL TEMPORARY TABLE  table_name   table_element_list 
		[ ON COMMIT  table_commit_action  ROWS ]



 free_locator_statement  ::= FREE LOCATOR  locator_reference  [ {  comma   locator_reference  }... ]

 locator_reference  ::=  host_parameter_name  |  embedded_variable_name 



 hold_locator_statement  ::= HOLD LOCATOR  locator_reference  [ {  comma   locator_reference  }... ]













--hr



 call_statement  ::= CALL  routine_invocation 



 return_statement  ::= RETURN  return_value 

 return_value  ::=  value_expression  | NULL

--hr



 start_transaction_statement  ::= START TRANSACTION [  transaction_mode  [ {  comma   transaction_mode  }...] ]

 transaction_mode  ::=  isolation_level  |  transaction_access_mode  |  diagnostics_size 

 transaction_access_mode  ::= READ ONLY | READ WRITE

 isolation_level  ::= ISOLATION LEVEL  level_of_isolation 

 level_of_isolation  ::= READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE

 diagnostics_size  ::= DIAGNOSTICS SIZE  number_of_conditions 

 number_of_conditions  ::=  simple_value_specification 



 set_transaction_statement  ::= SET [ LOCAL ]  transaction_characteristics 

 transaction_characteristics  ::= TRANSACTION  transaction_mode  [ {  comma   transaction_mode  }... ]



 set_constraints_mode_statement  ::= SET CONSTRAINTS  constraint_name_list  { DEFERRED | IMMEDIATE }

 constraint_name_list  ::= ALL |  constraint_name  [ {  comma   constraint_name  }... ]



 savepoint_statement  ::= SAVEPOINT  savepoint_specifier 

 savepoint_specifier  ::=  savepoint_name 



 release_savepoint_statement  ::= RELEASE SAVEPOINT  savepoint_specifier 



 commit_statement  ::= COMMIT [ WORK ] [ AND [ NO ] CHAIN ]



 rollback_statement  ::= ROLLBACK [ WORK ] [ AND [ NO ] CHAIN ] [  savepoint_clause  ]

 savepoint_clause  ::= TO SAVEPOINT  savepoint_specifier 

--hr



 connect_statement  ::= CONNECT TO  connection_target 

 connection_target  ::=
		 SQL-server_name  [ AS  connection_name  ] [ USER  connection_user_name  ]
	|	DEFAULT



 set_connection_statement  ::= SET CONNECTION  connection_object 

 connection_object  ::= DEFAULT |  connection_name  



 disconnect_statement  ::= DISCONNECT  disconnect_object 

 disconnect_object  ::=  connection_object  | ALL |	CURRENT

--hr



 set_session_characteristics_statement  ::= SET SESSION CHARACTERISTICS AS  session_characteristic_list 

 session_characteristic_list  ::=  session_characteristic  [ {  comma   session_characteristic  }... ]

 session_characteristic  ::=  transaction_characteristics 



 set_session_user_identifier_statement  ::= SET SESSION AUTHORIZATION  value_specification 



 set_role_statement  ::= SET ROLE  role_specification 

 role_specification  ::=  value_specification  | NONE



 set_local_time_zone_statement  ::= SET TIME ZONE  set_time_zone_value 

 set_time_zone_value  ::=  interval_value_expression  | LOCAL



 set_catalog_statement  ::= SET  catalog_name_characteristic 

 catalog_name_characteristic  ::= CATALOG  value_specification 



 set_schema_statement  ::= SET  schema_name_characteristic 

 schema_name_characteristic  ::= SCHEMA  value_specification 



 set_names_statement  ::= SET  character_set_name_characteristic 

 character_set_name_characteristic  ::= NAMES  value_specification 



 set_path_statement  ::= SET  SQL-path_characteristic 

 SQL-path_characteristic  ::= PATH  value_specification 



 set_transform_group_statement  ::= SET  transform_group_characteristic 

 transform_group_characteristic  ::=
		DEFAULT TRANSFORM GROUP  value_specification 
	|	TRANSFORM GROUP FOR TYPE  path-resolved_user-defined_type_name   value_specification 



 set_session_collation_statement  ::=
		SET COLLATION  collation_specification  [ FOR  character_set_specification_list  ]
	|	SET NO COLLATION [ FOR  character_set_specification_list  ]

 character_set_specification_list  ::=  character_set_specification  [ ,  character_set_specification ... ]

 collation_specification  ::=  value_specification 

--hr



 allocate_descriptor_statement  ::= ALLOCATE [ SQL ] DESCRIPTOR  descriptor_name  [ WITH MAX  occurrences  ]

 occurrences  ::=  simple_value_specification 



 deallocate_descriptor_statement  ::= DEALLOCATE [ SQL ] DESCRIPTOR  descriptor_name 



 get_descriptor_statement  ::= GET [ SQL ] DESCRIPTOR  descriptor_name   get_descriptor_information 

 get_descriptor_information  ::=
		 get_header_information  [ {  comma   get_header_information  }... ]
	|	VALUE  item_number   get_item_information  [ {  comma   get_item_information  }... ]

 get_header_information  ::=  simple_target_specification_1   equals_operator   header_item_name 

 header_item_name  ::= COUNT | KEY_TYPE | DYNAMIC_FUNCTION | DYNAMIC_FUNCTION_CODE | TOP_LEVEL_COUNT

 get_item_information  ::=  simple_target_specification_2   equals_operator   descriptor_item_name 

 item_number  ::=  simple_value_specification 

 simple_target_specification_1  ::=  simple_target_specification 

 simple_target_specification_2  ::=  simple_target_specification 

 descriptor_item_name  ::=
		CARDINALITY
	|	CHARACTER_SET_CATALOG
	|	CHARACTER_SET_NAME
	|	CHARACTER_SET_SCHEMA
	|	COLLATION_CATALOG
	|	COLLATION_NAME
	|	COLLATION_SCHEMA
	|	DATA
	|	DATETIME_INTERVAL_CODE
	|	DATETIME_INTERVAL_PRECISION
	|	DEGREE
	|	INDICATOR
	|	KEY_MEMBER
	|	LENGTH
	|	LEVEL
	|	NAME
	|	NULLABLE
	|	OCTET_LENGTH
	|	PARAMETER_MODE
	|	PARAMETER_ORDINAL_POSITION
	|	PARAMETER_SPECIFIC_CATALOG
	|	PARAMETER_SPECIFIC_NAME
	|	PARAMETER_SPECIFIC_SCHEMA
	|	PRECISION
	|	RETURNED_CARDINALITY
	|	RETURNED_LENGTH
	|	RETURNED_OCTET_LENGTH
	|	SCALE
	|	SCOPE_CATALOG
	|	SCOPE_NAME
	|	SCOPE_SCHEMA
	|	TYPE
	|	UNNAMED
	|	USER_DEFINED_TYPE_CATALOG
	|	USER_DEFINED_TYPE_NAME
	|	USER_DEFINED_TYPE_SCHEMA
	|	USER_DEFINED_TYPE_CODE



 set_descriptor_statement  ::= SET [ SQL ] DESCRIPTOR  descriptor_name   set_descriptor_information 

 set_descriptor_information  ::=
		 set_header_information  [ {  comma   set_header_information  }... ]
	|	VALUE  item_number   set_item_information  [ {  comma   set_item_information  }... ]

 set_header_information  ::=  header_item_name   equals_operator   simple_value_specification_1 

 set_item_information  ::=  descriptor_item_name   equals_operator   simple_value_specification_2 

 simple_value_specification_1  ::=  simple_value_specification 

 simple_value_specification_2  ::=  simple_value_specification 

 item_number  ::=  simple_value_specification 



 prepare_statement  ::=
		PREPARE  SQL_statement_name  [  attributes_specification  ] FROM  SQL_statement_variable 

 attributes_specification  ::= ATTRIBUTES  attributes_variable 

 attributes_variable  ::=  simple_value_specification 

 SQL_statement_variable  ::=  simple_value_specification 

 preparable_statement  ::=
		 preparable_SQL_data_statement 
	|	 preparable_SQL_schema_statement 
	|	 preparable_SQL_transaction_statement 
	|	 preparable_SQL_control_statement 
	|	 preparable_SQL_session_statement 
	|	 preparable_implementation-defined_statement 

 preparable_SQL_data_statement  ::=
		 delete_statement:_searched 
	|	 dynamic_single_row_select_statement 
	|	 insert_statement 
	|	 dynamic_select_statement 
	|	 update_statement:_searched 
	|	 merge_statement 
	|	 preparable_dynamic_delete_statement:_positioned 
	|	 preparable_dynamic_update_statement:_positioned 

 preparable_SQL_schema_statement  ::=  SQL_schema_statement 

 preparable_SQL_transaction_statement  ::=  SQL_transaction_statement 

 preparable_SQL_control_statement  ::=  SQL_control_statement 

 preparable_SQL_session_statement  ::=  SQL_session_statement 

 dynamic_select_statement  ::=  cursor_specification 

 preparable_implementation-defined_statement  ::= !! See the Syntax Rules.



 cursor_attributes  ::=  cursor_attribute ...

 cursor_attribute  ::=
		 cursor_sensitivity 
	|	 cursor_scrollability 
	|	 cursor_holdability 
	|	 cursor_returnability 



 deallocate_prepared_statement  ::= DEALLOCATE PREPARE  SQL_statement_name 



 describe_statement  ::=  describe_input_statement  |  describe_output_statement 

 describe_input_statement  ::= DESCRIBE INPUT  SQL_statement_name   using_descriptor  [  nesting_option  ]

 describe_output_statement  ::= DESCRIBE [ OUTPUT ]  described_object   using_descriptor  [  nesting_option  ]

 nesting_option  ::= WITH NESTING | WITHOUT NESTING

 using_descriptor  ::= USING [ SQL ] DESCRIPTOR  descriptor_name 

 described_object  ::=
		 SQL_statement_name 
	|	CURSOR  extended_cursor_name  STRUCTURE



 input_using_clause  ::=  using_arguments  |  using_input_descriptor 

 using_arguments  ::= USING  using_argument  [ {  comma   using_argument  }... ]

 using_argument  ::=  general_value_specification 

 using_input_descriptor  ::=  using_descriptor 



 output_using_clause  ::=  into_arguments  |  into_descriptor 

 into_arguments  ::= INTO  into_argument  [ {  comma   into_argument  }... ]

 into_argument  ::=  target_specification 

 into_descriptor  ::= INTO [ SQL ] DESCRIPTOR  descriptor_name 



 execute_statement  ::= EXECUTE  SQL_statement_name  [  result_using_clause  ] [  parameter_using_clause  ]

 result_using_clause  ::=  output_using_clause 

 parameter_using_clause  ::=  input_using_clause 



 execute_immediate_statement  ::= EXECUTE IMMEDIATE  SQL_statement_variable 



 dynamic_declare_cursor  ::=
		DECLARE  cursor_name  [  cursor_sensitivity  ] [  cursor_scrollability  ] CURSOR
		[  cursor_holdability  ] [  cursor_returnability  ] FOR  statement_name 



 allocate_cursor_statement  ::= ALLOCATE  extended_cursor_name   cursor_intent 

 cursor_intent  ::=  statement_cursor  |  result_set_cursor 

 statement_cursor  ::=
		[  cursor_sensitivity  ] [  cursor_scrollability  ] CURSOR
		[  cursor_holdability  ] [  cursor_returnability  ] FOR  extended_statement_name 

 result_set_cursor  ::= FOR PROCEDURE  specific_routine_designator 



 dynamic_open_statement  ::= OPEN  dynamic_cursor_name  [  input_using_clause  ]



 dynamic_fetch_statement  ::= FETCH [ [  fetch_orientation  ] FROM ]  dynamic_cursor_name   output_using_clause 



 dynamic_single_row_select_statement  ::=  query_specification 



 dynamic_close_statement  ::= CLOSE  dynamic_cursor_name 



 dynamic_delete_statement:_positioned  ::= DELETE FROM  target_table  WHERE CURRENT OF  dynamic_cursor_name 



 dynamic_update_statement:_positioned  ::=
		UPDATE  target_table  SET  set_clause_list  WHERE CURRENT OF  dynamic_cursor_name 



 preparable_dynamic_delete_statement:_positioned  ::=
		DELETE [ FROM  target_table  ] WHERE CURRENT OF [  scope_option  ]  cursor_name 



 preparable_dynamic_update_statement:_positioned  ::=
		UPDATE [  target_table  ] SET  set_clause_list  WHERE CURRENT OF [  scope_option  ]  cursor_name 

--hr



 embedded_SQL_host_program  ::=
		 embedded_SQL_Ada_program 
	|	 embedded_SQL_C_program 
	|	 embedded_SQL_COBOL_program 
	|	 embedded_SQL_Fortran_program 
	|	 embedded_SQL_MUMPS_program 
	|	 embedded_SQL_Pascal_program 
	|	 embedded_SQL_PL/I_program 

 embedded_SQL_statement  ::=  SQL_prefix   statement_or_declaration  [  SQL_terminator  ]

 statement_or_declaration  ::=
		 declare_cursor 
	|	 dynamic_declare_cursor 
	|	 temporary_table_declaration 
	|	 embedded_authorization_declaration 
	|	 embedded_path_specification 
	|	 embedded_transform_group_specification 
	|	 embedded_collation_specification 
	|	 embedded_exception_declaration 
	|	 handler_declaration 
	|	 SQL_procedure_statement 

 SQL_prefix  ::= EXEC SQL |  ampersand SQL left_paren 

 SQL_terminator  ::= END-EXEC |  semicolon  |  right_paren 

 embedded_authorization_declaration  ::= DECLARE  embedded_authorization_clause 

 embedded_authorization_clause  ::=
		SCHEMA  schema_name 
	|	AUTHORIZATION  embedded_authorization_identifier  [ FOR STATIC { ONLY | AND DYNAMIC } ]
	|	SCHEMA  schema_name  AUTHORIZATION  embedded_authorization_identifier  [ FOR STATIC { ONLY | AND DYNAMIC } ]

 embedded_authorization_identifier  ::=  module_authorization_identifier 

 embedded_path_specification  ::=  path_specification 

 embedded_transform_group_specification  ::=  transform_group_specification 

 embedded_collation_specification  ::=  module_collations 

 embedded_SQL_declare_section  ::=
		 embedded_SQL_begin_declare  [  embedded_character_set_declaration  ] [  host_variable_definition ... ]  embedded_SQL_end_declare 
	|	 embedded_SQL_MUMPS_declare 

 embedded_character_set_declaration  ::= SQL NAMES ARE  character_set_specification 

 embedded_SQL_begin_declare  ::=  SQL_prefix  BEGIN DECLARE SECTION [  SQL_terminator  ]

 embedded_SQL_end_declare  ::=  SQL_prefix  END DECLARE SECTION [  SQL_terminator  ]

 embedded_SQL_MUMPS_declare  ::=
		 SQL_prefix  BEGIN DECLARE SECTION [  embedded_character_set_declaration  ]
		[  host_variable_definition ... ] END DECLARE SECTION  SQL_terminator 

 host_variable_definition  ::=
		 Ada_variable_definition 
	|	 C_variable_definition 
	|	 COBOL_variable_definition 
	|	 Fortran_variable_definition 
	|	 MUMPS_variable_definition 
	|	 Pascal_variable_definition 
	|	 PL/I_variable_definition 

 embedded_variable_name  ::=  colon   host_identifier 

 host_identifier  ::=
		 Ada_host_identifier 
	|	 C_host_identifier 
	|	 COBOL_host_identifier 
	|	 Fortran_host_identifier 
	|	 MUMPS_host_identifier 
	|	 Pascal_host_identifier 
	|	 PL/I_host_identifier 



 embedded_exception_declaration  ::= WHENEVER  condition   condition_action 

 condition  ::=  SQL_condition 

 SQL_condition  ::=
		 major_category 
	|	SQLSTATE (  SQLSTATE_class_value  [ ,  SQLSTATE_subclass_value  ] )
	|	CONSTRAINT  constraint_name 

 major_category  ::= SQLEXCEPTION | SQLWARNING | NOT FOUND

 SQLSTATE_class_value  ::=  SQLSTATE_char  SQLSTATE_char  !! See the Syntax Rules.

 SQLSTATE_subclass_value  ::=  SQLSTATE_char  SQLSTATE_char  SQLSTATE_char  !! See the Syntax Rules.

 SQLSTATE_char  ::=  simple_Latin_upper_case_letter  |  digit 

 condition_action  ::= CONTINUE |  go_to 

 go_to  ::= { GOTO | GO TO }  goto_target 

 goto_target  ::=
		 host_label_identifier 
	|	 unsigned_integer 
	|	 host_PL/I_label_variable 

 host_label_identifier  ::= !! See the Syntax Rules.

 host_PL/I_label_variable  ::= !! See the Syntax Rules.



 embedded_SQL_Ada_program  ::= !! See the Syntax Rules.

 Ada_variable_definition  ::=
		 Ada_host_identifier  [ {  comma   Ada_host_identifier  }... ]  colon   Ada_type_specification  [  Ada_initial_value  ]

 Ada_initial_value  ::=  Ada_assignment_operator   character_representation ...

 Ada_assignment_operator  ::=  colon  equals_operator 

 Ada_host_identifier  ::= !! See the Syntax Rules.

 Ada_type_specification  ::=
		 Ada_qualified_type_specification 
	|	 Ada_unqualified_type_specification 
	|	 Ada_derived_type_specification 

 Ada_qualified_type_specification  ::=
		Interfaces.SQL  period  CHAR [ CHARACTER SET [ IS ]  character_set_specification  ]
		 left_paren  1  double_period   length   right_paren 
	|	Interfaces.SQL  period  SMALLINT
	|	Interfaces.SQL  period  INT
	|	Interfaces.SQL  period  BIGINT
	|	Interfaces.SQL  period  REAL
	|	Interfaces.SQL  period  DOUBLE_PRECISION
	|	Interfaces.SQL  period  BOOLEAN
	|	Interfaces.SQL  period  SQLSTATE_TYPE
	|	Interfaces.SQL  period  INDICATOR_TYPE

 Ada_unqualified_type_specification  ::=
		CHAR  left_paren  1  double_period   length   right_paren 
	|	SMALLINT
	|	INT
	|	BIGINT
	|	REAL
	|	DOUBLE_PRECISION
	|	BOOLEAN
	|	SQLSTATE_TYPE
	|	INDICATOR_TYPE

 Ada_derived_type_specification  ::=
		 Ada_CLOB_variable 
	|	 Ada_CLOB_locator_variable 
	|	 Ada_BLOB_variable 
	|	 Ada_BLOB_locator_variable 
	|	 Ada_user-defined_type_variable 
	|	 Ada_user-defined_type_locator_variable 
	|	 Ada_REF_variable 
	|	 Ada_array_locator_variable 
	|	 Ada_multiset_locator_variable 

 Ada_CLOB_variable  ::=
		SQL TYPE IS CLOB  left_paren   large_object_length   right_paren  [ CHARACTER SET [ IS ]  character_set_specification  ]

 Ada_CLOB_locator_variable  ::= SQL TYPE IS CLOB AS LOCATOR

 Ada_BLOB_variable  ::= SQL TYPE IS BLOB  left_paren   large_object_length   right_paren 

 Ada_BLOB_locator_variable  ::= SQL TYPE IS BLOB AS LOCATOR

 Ada_user-defined_type_variable  ::= SQL TYPE IS  path-resolved_user-defined_type_name  AS  predefined_type 

 Ada_user-defined_type_locator_variable  ::= SQL TYPE IS  path-resolved_user-defined_type_name  AS LOCATOR

 Ada_REF_variable  ::= SQL TYPE IS  reference_type 

 Ada_array_locator_variable  ::= SQL TYPE IS  array_type  AS LOCATOR

 Ada_multiset_locator_variable  ::= SQL TYPE IS  multiset_type  AS LOCATOR



 embedded_SQL_C_program  ::= !! See the Syntax Rules.

 C_variable_definition  ::= [  C_storage_class  ] [  C_class_modifier  ]  C_variable_specification   semicolon 

 C_variable_specification  ::=  C_numeric_variable  |  C_character_variable  |  C_derived_variable 

 C_storage_class  ::= auto | extern | static

 C_class_modifier  ::= const | volatile

 C_numeric_variable  ::=
		{ long long | long | short | float | double }  C_host_identifier  [  C_initial_value  ]
		[ {  comma   C_host_identifier  [  C_initial_value  ] }... ]

 C_character_variable  ::=
		 C_character_type  [ CHARACTER SET [ IS ]  character_set_specification  ]
		 C_host_identifier   C_array_specification  [  C_initial_value  ]
		[ {  comma   C_host_identifier   C_array_specification  [  C_initial_value  ] }... ]

 C_character_type  ::= char | unsigned char | unsigned short

 C_array_specification  ::=  left_bracket   length   right_bracket 

 C_host_identifier  ::= !! See the Syntax Rules.

 C_derived_variable  ::=
		 C_VARCHAR_variable 
	|	 C_NCHAR_variable 
	|	 C_NCHAR_VARYING_variable 
	|	 C_CLOB_variable 
	|	 C_NCLOB_variable 
	|	 C_BLOB_variable 
	|	 C_user-defined_type_variable 
	|	 C_CLOB_locator_variable 
	|	 C_BLOB_locator_variable 
	|	 C_array_locator_variable 
	|	 C_multiset_locator_variable 
	|	 C_user-defined_type_locator_variable 
	|	 C_REF_variable 

 C_VARCHAR_variable  ::=
		VARCHAR [ CHARACTER SET [ IS ]  character_set_specification  ]
		 C_host_identifier   C_array_specification  [  C_initial_value  ]
		[ {  comma   C_host_identifier   C_array_specification  [  C_initial_value  ] }... ]

 C_NCHAR_variable  ::=
		NCHAR [ CHARACTER SET [ IS ]  character_set_specification  ]
		 C_host_identifier   C_array_specification  [  C_initial_value  ]
		[ {  comma   C_host_identifier   C_array_specification  [  C_initial_value  ] } ... ]

 C_NCHAR_VARYING_variable  ::=
		NCHAR VARYING [ CHARACTER SET [ IS ]  character_set_specification  ]
		 C_host_identifier   C_array_specification  [  C_initial_value  ]
		[ {  comma   C_host_identifier   C_array_specification  [  C_initial_value  ] } ... ]

 C_CLOB_variable  ::=
		SQL TYPE IS CLOB  left_paren   large_object_length   right_paren 
		[ CHARACTER SET [ IS ]  character_set_specification  ]
		 C_host_identifier  [  C_initial_value  ]
		[ {  comma   C_host_identifier  [  C_initial_value  ] }... ]

 C_NCLOB_variable  ::=
		SQL TYPE IS NCLOB  left_paren   large_object_length   right_paren 
		[ CHARACTER SET [ IS ]  character_set_specification  ]
		 C_host_identifier  [  C_initial_value  ]
		[ {  comma   C_host_identifier  [  C_initial_value  ] }... ]

 C_user-defined_type_variable  ::=
		SQL TYPE IS  path-resolved_user-defined_type_name  AS  predefined_type 
		 C_host_identifier  [  C_initial_value  ]
		[ {  comma   C_host_identifier  [  C_initial_value  ] } ... ]

 C_BLOB_variable  ::=
		SQL TYPE IS BLOB  left_paren   large_object_length   right_paren 
		 C_host_identifier  [  C_initial_value  ]
		[ {  comma   C_host_identifier  [  C_initial_value  ] } ... ]

 C_CLOB_locator_variable  ::=
		SQL TYPE IS CLOB AS LOCATOR
		 C_host_identifier  [  C_initial_value  ]
		[ {  comma   C_host_identifier  [  C_initial_value  ] } ... ]

 C_BLOB_locator_variable  ::=
		SQL TYPE IS BLOB AS LOCATOR
		 C_host_identifier  [  C_initial_value  ]
		[ {  comma   C_host_identifier  [  C_initial_value  ] } ... ]

 C_array_locator_variable  ::=
		SQL TYPE IS  array_type  AS LOCATOR
		 C_host_identifier  [  C_initial_value  ]
		[ {  comma   C_host_identifier  [  C_initial_value  ] } ... ]

 C_multiset_locator_variable  ::=
		SQL TYPE IS  multiset_type  AS LOCATOR
		 C_host_identifier  [  C_initial_value  ]
		[ {  comma   C_host_identifier  [  C_initial_value  ] } ... ]

 C_user-defined_type_locator_variable  ::=
		SQL TYPE IS
		 path-resolved_user-defined_type_name  AS LOCATOR
		 C_host_identifier  [  C_initial_value  ]
		[ {  comma   C_host_identifier  [  C_initial_value  ] }... ]

 C_REF_variable  ::= SQL TYPE IS  reference_type 

 C_initial_value  ::=  equals_operator   character_representation ...



 embedded_SQL_COBOL_program  ::= !! See the Syntax Rules.

 COBOL_variable_definition  ::=
		{ 01 | 77 }  COBOL_host_identifier   COBOL_type_specification 
		[  character_representation ... ]  period 

 COBOL_host_identifier  ::= !! See the Syntax Rules.

 COBOL_type_specification  ::=
		 COBOL_character_type 
	|	 COBOL_national_character_type 
	|	 COBOL_numeric_type 
	|	 COBOL_integer_type 
	|	 COBOL_derived_type_specification 

 COBOL_derived_type_specification  ::=
		 COBOL_CLOB_variable 
	|	 COBOL_NCLOB_variable 
	|	 COBOL_BLOB_variable 
	|	 COBOL_user-defined_type_variable 
	|	 COBOL_CLOB_locator_variable 
	|	 COBOL_BLOB_locator_variable 
	|	 COBOL_array_locator_variable 
	|	 COBOL_multiset_locator_variable 
	|	 COBOL_user-defined_type_locator_variable 
	|	 COBOL_REF_variable 

 COBOL_character_type  ::=
		[ CHARACTER SET [ IS ]  character_set_specification  ]
		{ PIC | PICTURE } [ IS ] { X [  left_paren   length   right_paren  ] }...

 COBOL_national_character_type  ::=
		[ CHARACTER SET [ IS ]  character_set_specification  ]
		{ PIC | PICTURE } [ IS ] { N [  left_paren   length   right_paren  ] }...

 COBOL_CLOB_variable  ::=
		[ USAGE [ IS ] ]
		SQL TYPE IS CLOB  left_paren   large_object_length   right_paren 
		[ CHARACTER SET [ IS ]  character_set_specification  ]

 COBOL_NCLOB_variable  ::=
		[ USAGE [ IS ] ]
		SQL TYPE IS NCLOB  left_paren   large_object_length   right_paren 
		[ CHARACTER SET [ IS ]  character_set_specification  ]

 COBOL_BLOB_variable  ::=
		[ USAGE [ IS ] ]
		SQL TYPE IS BLOB  left_paren   large_object_length   right_paren 

 COBOL_user-defined_type_variable  ::=
		[ USAGE [ IS ] ] SQL TYPE IS  path-resolved_user-defined_type_name  AS  predefined_type 

 COBOL_CLOB_locator_variable  ::=
		[ USAGE [ IS ] ] SQL TYPE IS CLOB AS LOCATOR

 COBOL_BLOB_locator_variable  ::=
		[ USAGE [ IS ] ] SQL TYPE IS BLOB AS LOCATOR

 COBOL_array_locator_variable  ::=
	[ USAGE [ IS ] ] SQL TYPE IS  array_type  AS LOCATOR

 COBOL_multiset_locator_variable  ::=
	[ USAGE [ IS ] ] SQL TYPE IS  multiset_type  AS LOCATOR

 COBOL_user-defined_type_locator_variable  ::=
	[ USAGE [ IS ] ] SQL TYPE IS  path-resolved_user-defined_type_name  AS LOCATOR

 COBOL_REF_variable  ::= [ USAGE [ IS ] ] SQL TYPE IS  reference_type 

 COBOL_numeric_type  ::=
		{ PIC | PICTURE } [ IS ] S  COBOL_nines_specification  [ USAGE [ IS ] ] DISPLAY SIGN LEADING SEPARATE

 COBOL_nines_specification  ::=
		 COBOL_nines  [ V [  COBOL_nines  ] ]
	|	V  COBOL_nines 

 COBOL_integer_type  ::=  COBOL_binary_integer 

 COBOL_binary_integer  ::= { PIC | PICTURE } [ IS ] S COBOL_nines  [ USAGE [ IS ] ] BINARY

 COBOL_nines  ::= { 9 [  left_paren   length   right_paren  ] }...



 embedded_SQL_Fortran_program  ::= !! See the Syntax Rules.

 Fortran_variable_definition  ::=
		 Fortran_type_specification   Fortran_host_identifier  [ {  comma   Fortran_host_identifier  }... ]

 Fortran_host_identifier  ::= !! See the Syntax Rules.

 Fortran_type_specification  ::=
		CHARACTER [  asterisk   length  ] [ CHARACTER SET [ IS ]  character_set_specification  ]
	|	CHARACTER KIND = n [  asterisk   length  ] [ CHARACTER SET [ IS ]  character_set_specification  ]
	|	INTEGER
	|	REAL
	|	DOUBLE PRECISION
	|	LOGICAL
	|	 Fortran_derived_type_specification 

 Fortran_derived_type_specification  ::=
		 Fortran_CLOB_variable 
	|	 Fortran_BLOB_variable 
	|	 Fortran_user-defined_type_variable 
	|	 Fortran_CLOB_locator_variable 
	|	 Fortran_BLOB_locator_variable 
	|	 Fortran_user-defined_type_locator_variable 
	|	 Fortran_array_locator_variable 
	|	 Fortran_multiset_locator_variable 
	|	 Fortran_REF_variable 

 Fortran_CLOB_variable  ::=
		SQL TYPE IS CLOB  left_paren   large_object_length   right_paren 
		[ CHARACTER SET [ IS ]  character_set_specification  ]

 Fortran_BLOB_variable  ::=
		SQL TYPE IS BLOB  left_paren   large_object_length   right_paren 

 Fortran_user-defined_type_variable  ::=
		SQL TYPE IS  path-resolved_user-defined_type_name  AS  predefined_type 

 Fortran_CLOB_locator_variable  ::= SQL TYPE IS CLOB AS LOCATOR

 Fortran_BLOB_locator_variable  ::= SQL TYPE IS BLOB AS LOCATOR

 Fortran_user-defined_type_locator_variable  ::= SQL TYPE IS  path-resolved_user-defined_type_name  AS LOCATOR

 Fortran_array_locator_variable  ::= SQL TYPE IS  array_type  AS LOCATOR

 Fortran_multiset_locator_variable  ::= SQL TYPE IS  multiset_type  AS LOCATOR

 Fortran_REF_variable  ::= SQL TYPE IS  reference_type 



 embedded_SQL_MUMPS_program  ::= !! See the Syntax Rules.

 MUMPS_variable_definition  ::=
		 MUMPS_numeric_variable   semicolon 
	|	 MUMPS_character_variable   semicolon 
	|	 MUMPS_derived_type_specification   semicolon 

 MUMPS_character_variable  ::=
		VARCHAR  MUMPS_host_identifier   MUMPS_length_specification 
		[ {  comma   MUMPS_host_identifier   MUMPS_length_specification  }... ]

 MUMPS_host_identifier  ::= !! See the Syntax Rules.

 MUMPS_length_specification  ::=  left_paren   length   right_paren 

 MUMPS_numeric_variable  ::=  MUMPS_type_specification   MUMPS_host_identifier  [ {  comma   MUMPS_host_identifier  }... ]

 MUMPS_type_specification  ::=
		INT
	|	DEC [  left_paren   precision  [  comma   scale  ]  right_paren  ]
	|	REAL

 MUMPS_derived_type_specification  ::=
		 MUMPS_CLOB_variable 
	|	 MUMPS_BLOB_variable 
	|	 MUMPS_user-defined_type_variable 
	|	 MUMPS_CLOB_locator_variable 
	|	 MUMPS_BLOB_locator_variable 
	|	 MUMPS_user-defined_type_locator_variable 
	|	 MUMPS_array_locator_variable 
	|	 MUMPS_multiset_locator_variable 
	|	 MUMPS_REF_variable 

 MUMPS_CLOB_variable  ::=
		SQL TYPE IS CLOB  left_paren   large_object_length   right_paren 
		[ CHARACTER SET [ IS ]  character_set_specification  ]

 MUMPS_BLOB_variable  ::= SQL TYPE IS BLOB  left_paren   large_object_length   right_paren 

 MUMPS_user-defined_type_variable  ::= SQL TYPE IS  path-resolved_user-defined_type_name  AS  predefined_type 

 MUMPS_CLOB_locator_variable  ::= SQL TYPE IS CLOB AS LOCATOR

 MUMPS_BLOB_locator_variable  ::= SQL TYPE IS BLOB AS LOCATOR

 MUMPS_user-defined_type_locator_variable  ::= SQL TYPE IS  path-resolved_user-defined_type_name  AS LOCATOR

 MUMPS_array_locator_variable  ::= SQL TYPE IS  array_type  AS LOCATOR

 MUMPS_multiset_locator_variable  ::= SQL TYPE IS  multiset_type  AS LOCATOR

 MUMPS_REF_variable  ::= SQL TYPE IS  reference_type 



 embedded_SQL_Pascal_program  ::= !! See the Syntax Rules.

 Pascal_variable_definition  ::=
		 Pascal_host_identifier  [ {  comma   Pascal_host_identifier  }... ]  colon   Pascal_type_specification   semicolon 

 Pascal_host_identifier  ::= !! See the Syntax Rules.

 Pascal_type_specification  ::=
		PACKED ARRAY  left_bracket  1  double_period   length   right_bracket  OF CHAR
		[ CHARACTER SET [ IS ]  character_set_specification  ]
	|	INTEGER
	|	REAL
	|	CHAR [ CHARACTER SET [ IS ]  character_set_specification  ]
	|	BOOLEAN
	|	 Pascal_derived_type_specification 

 Pascal_derived_type_specification  ::=
		 Pascal_CLOB_variable 
	|	 Pascal_BLOB_variable 
	|	 Pascal_user-defined_type_variable 
	|	 Pascal_CLOB_locator_variable 
	|	 Pascal_BLOB_locator_variable 
	|	 Pascal_user-defined_type_locator_variable 
	|	 Pascal_array_locator_variable 
	|	 Pascal_multiset_locator_variable 
	|	 Pascal_REF_variable 

 Pascal_CLOB_variable  ::=
		SQL TYPE IS CLOB  left_paren   large_object_length   right_paren 
		[ CHARACTER SET [ IS ]  character_set_specification  ]

 Pascal_BLOB_variable  ::= SQL TYPE IS BLOB  left_paren   large_object_length   right_paren 

 Pascal_CLOB_locator_variable  ::= SQL TYPE IS CLOB AS LOCATOR

 Pascal_user-defined_type_variable  ::= SQL TYPE IS  path-resolved_user-defined_type_name  AS  predefined_type 

 Pascal_BLOB_locator_variable  ::= SQL TYPE IS BLOB AS LOCATOR

 Pascal_user-defined_type_locator_variable  ::= SQL TYPE IS  path-resolved_user-defined_type_name  AS LOCATOR

 Pascal_array_locator_variable  ::= SQL TYPE IS  array_type  AS LOCATOR

 Pascal_multiset_locator_variable  ::= SQL TYPE IS  multiset_type  AS LOCATOR

 Pascal_REF_variable  ::= SQL TYPE IS  reference_type 



 embedded_SQL_PL/I_program  ::= !! See the Syntax Rules.

 PL/I_variable_definition  ::=
		{ DCL | DECLARE } {  PL/I_host_identifier 
	|	 left_paren   PL/I_host_identifier  [ {  comma   PL/I_host_identifier  }... ]  right_paren  }
		 PL/I_type_specification  [  character_representation ... ]  semicolon 

 PL/I_host_identifier  ::= !! See the Syntax Rules.

 PL/I_type_specification  ::=
		{ CHAR | CHARACTER } [ VARYING ]  left_paren  length  right_paren  [ CHARACTER SET [ IS ]  character_set_specification  ]
	|	 PL/I_type_fixed_decimal   left_paren   precision  [  comma   scale  ]  right_paren 
	|	 PL/I_type_fixed_binary  [  left_paren   precision   right_paren  ]
	|	 PL/I_type_float_binary   left_paren   precision   right_paren 
	|	 PL/I_derived_type_specification 

 PL/I_derived_type_specification  ::=
		 PL/I_CLOB_variable 
	|	 PL/I_BLOB_variable 
	|	 PL/I_user-defined_type_variable 
	|	 PL/I_CLOB_locator_variable 
	|	 PL/I_BLOB_locator_variable 
	|	 PL/I_user-defined_type_locator_variable 
	|	 PL/I_array_locator_variable 
	|	 PL/I_multiset_locator_variable 
	|	 PL/I_REF_variable 

 PL/I_CLOB_variable  ::=
		SQL TYPE IS CLOB  left_paren   large_object_length   right_paren 
		[ CHARACTER SET [ IS ]  character_set_specification  ]

 PL/I_BLOB_variable  ::= SQL TYPE IS BLOB  left_paren   large_object_length   right_paren 

 PL/I_user-defined_type_variable  ::= SQL TYPE IS  path-resolved_user-defined_type_name  AS  predefined_type 

 PL/I_CLOB_locator_variable  ::= SQL TYPE IS CLOB AS LOCATOR

 PL/I_BLOB_locator_variable  ::= SQL TYPE IS BLOB AS LOCATOR

 PL/I_user-defined_type_locator_variable  ::= SQL TYPE IS  path-resolved_user-defined_type_name  AS LOCATOR

 PL/I_array_locator_variable  ::= SQL TYPE IS  array_type  AS LOCATOR

 PL/I_multiset_locator_variable  ::= SQL TYPE IS  multiset_type  AS LOCATOR

 PL/I_REF_variable  ::= SQL TYPE IS  reference_type 

 PL/I_type_fixed_decimal  ::=
		{ DEC | DECIMAL } FIXED
	|	FIXED { DEC | DECIMAL }

 PL/I_type_fixed_binary  ::=
		{ BIN | BINARY } FIXED
	|	FIXED { BIN | BINARY }

 PL/I_type_float_binary  ::=
		{ BIN | BINARY } FLOAT
	|	FLOAT { BIN | BINARY }

--hr



 direct_SQL_statement  ::=  directly_executable_statement   semicolon 

 directly_executable_statement  ::=
		 direct_SQL_data_statement 
	|	 SQL_schema_statement 
	|	 SQL_transaction_statement 
	|	 SQL_connection_statement 
	|	 SQL_session_statement 
	|	 direct_implementation-defined_statement 

 direct_SQL_data_statement  ::=
		 delete_statement:_searched 
	|	 direct_select_statement:_multiple_rows 
	|	 insert_statement 
	|	 update_statement:_searched 
	|	 merge_statement 
	|	 temporary_table_declaration 

 direct_implementation-defined_statement  ::= !! See the Syntax Rules.



 direct_select_statement:_multiple_rows  ::=  cursor_specification 

--hr


 get_diagnostics_statement  ::= GET DIAGNOSTICS  SQL_diagnostics_information 

 SQL_diagnostics_information  ::=  statement_information  |  condition_information 

 statement_information  ::=  statement_information_item  [ {  comma   statement_information_item  }... ]

 statement_information_item  ::=  simple_target_specification   equals_operator   statement_information_item_name 

 statement_information_item_name  ::=
		NUMBER
	|	MORE
	|	COMMAND_FUNCTION
	|	COMMAND_FUNCTION_CODE
	|	DYNAMIC_FUNCTION
	|	DYNAMIC_FUNCTION_CODE
	|	ROW_COUNT
	|	TRANSACTIONS_COMMITTED
	|	TRANSACTIONS_ROLLED_BACK
	|	TRANSACTION_ACTIVE

 condition_information  ::=
		{ EXCEPTION | CONDITION }  condition_number   condition_information_item  [ {  comma   condition_information_item  }... ]

 condition_information_item  ::=  simple_target_specification   equals_operator   condition_information_item_name 

 condition_information_item_name  ::=
		CATALOG_NAME
	|	CLASS_ORIGIN
	|	COLUMN_NAME
	|	CONDITION_NUMBER
	|	CONNECTION_NAME
	|	CONSTRAINT_CATALOG
	|	CONSTRAINT_NAME
	|	CONSTRAINT_SCHEMA
	|	CURSOR_NAME
	|	MESSAGE_LENGTH
	|	MESSAGE_OCTET_LENGTH
	|	MESSAGE_TEXT
	|	PARAMETER_MODE
	|	PARAMETER_NAME
	|	PARAMETER_ORDINAL_POSITION
	|	RETURNED_SQLSTATE
	|	ROUTINE_CATALOG
	|	ROUTINE_NAME
	|	ROUTINE_SCHEMA
	|	SCHEMA_NAME
	|	SERVER_NAME
	|	SPECIFIC_NAME
	|	SUBCLASS_ORIGIN
	|	TABLE_NAME
	|	TRIGGER_CATALOG
	|	TRIGGER_NAME
	|	TRIGGER_SCHEMA

 condition_number  ::=  simple_value_specification 


--hr






--##  table_border=1 
--##  tr  th  Category  /th  th  Condition  /th  th  Class  /th  th  Subcondition  /th  th  Subclass  /th  /tr 
--##  tr  td  X  /td  td  ambiguous cursor name  /td  td  3C  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  attempt to assign to non-updatable column  /td  td  0U  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  attempt to assign to ordering column  /td  td  0V  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  cardinality violation  /td  td  21  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  connection exception  /td  td  08  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  connection does not exist  /td  td  003  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  connection failure  /td  td  006  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  connection name in use  /td  td  002  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  SQL-client unable to establish SQL-connection  /td  td  001  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  SQL-server rejected establishment of SQL-connection  /td  td  004  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  transaction resolution unknown  /td  td  007  /td  /tr 
--##  tr  td  X  /td  td  cursor sensitivity exception  /td  td  36  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  request failed  /td  td  002  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  request rejected  /td  td  001  /td  /tr 
--##  tr  td  X  /td  td  data exception  /td  td  22  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  array data, right truncation  /td  td  02F  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  array element error  /td  td  02E  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  character not in repertoire  /td  td  021  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  datetime field overflow  /td  td  008  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  division by zero  /td  td  012  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  error in assignment  /td  td  005  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  escape character conflict  /td  td  00B  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  indicator overflow  /td  td  022  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  interval field overflow  /td  td  015  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid argument for natural logarithm  /td  td  01E  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid argument for power function  /td  td  01F  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid argument for width bucket function  /td  td  01G  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid character value for cast  /td  td  018  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid datetime format  /td  td  007  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid escape character  /td  td  019  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid escape octet  /td  td  00D  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid escape sequence  /td  td  025  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid indicator parameter value  /td  td  010  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid interval format  /td  td  006  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid parameter value  /td  td  023  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid preceding or following size in window function  /td  td  013  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid regular expression  /td  td  01B  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid repeat argument in a sample clause  /td  td  02G  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid sample size  /td  td  02H  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid time zone displacement value  /td  td  009  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid use of escape character  /td  td  00C  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  most specific type mismatch  /td  td  00G  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  noncharacter in UCS string  /td  td  029  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  null value substituted for mutator subject parameter  /td  td  02D  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  null row not permitted in table  /td  td  01C  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  null value in array target  /td  td  00E  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  null value, no indicator parameter  /td  td  002  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  null value not allowed  /td  td  004  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  numeric value out of range  /td  td  003  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  sequence generator limit exceeded  /td  td  00H  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  string data, length mismatch  /td  td  026  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  string data, right truncation  /td  td  001  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  substring error  /td  td  011  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  trim error  /td  td  027  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  unterminated C string  /td  td  024  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  zero-length character string  /td  td  00F  /td  /tr 
--##  tr  td  X  /td  td  dependent privilege descriptors still exist  /td  td  2B  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  diagnostics exception  /td  td  0Z  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  maximum number of stacked diagnostics areas exceeded  /td  td  001  /td  /tr 
--##  tr  td  X  /td  td  dynamic SQL error  /td  td  07  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  cursor specification cannot be executed  /td  td  003  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  data type transform function violation  /td  td  00B  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid DATA target  /td  td  00D  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid DATETIME_INTERVAL_CODE  /td  td  00F  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid descriptor count  /td  td  008  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid descriptor index  /td  td  009  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid LEVEL value  /td  td  00E  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  prepared statement not a cursor specification  /td  td  005  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  restricted data type attribute violation  /td  td  006  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  undefined DATA value  /td  td  00C  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  using clause does not match dynamic parameter specifications  /td  td  001  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  using clause does not match target specifications  /td  td  002  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  using clause required for dynamic parameters  /td  td  004  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  using clause required for result fields  /td  td  007  /td  /tr 
--##  tr  td  X  /td  td  external routine exception  /td  td  38  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  containing SQL not permitted  /td  td  001  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  modifying SQL-data not permitted  /td  td  002  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  prohibited SQL-statement attempted  /td  td  003  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  reading SQL-data not permitted  /td  td  004  /td  /tr 
--##  tr  td  X  /td  td  external routine invocation exception  /td  td  39  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid SQLSTATE returned  /td  td  001  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  null value not allowed  /td  td  004  /td  /tr 
--##  tr  td  X  /td  td  feature not supported  /td  td  0A  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  multiple server transactions  /td  td  001  /td  /tr 
--##  tr  td  X  /td  td  integrity constraint violation  /td  td  23  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  restrict violation  /td  td  001  /td  /tr 
--##  tr  td  X  /td  td  invalid authorization specification  /td  td  28  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid catalog name  /td  td  3D  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid character set name  /td  td  2C  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid condition number  /td  td  35  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid connection name  /td  td  2E  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid cursor name  /td  td  34  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid cursor state  /td  td  24  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid grantor  /td  td  0L  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid role specification  /td  td  0P  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid schema name  /td  td  3F  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid schema name list specification  /td  td  0E  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid session collation specification  /td  td  2H  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid SQL descriptor name  /td  td  33  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid SQL-invoked procedure reference  /td  td  0M  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid SQL statement name  /td  td  26  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid SQL statement identifier  /td  td  30  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid target type specification  /td  td  0D  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid transaction initiation  /td  td  0B  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid transaction state  /td  td  25  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  active SQL-transaction  /td  td  001  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  branch transaction already active  /td  td  002  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  held cursor requires same isolation level  /td  td  008  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  inappropriate access mode for branch transaction  /td  td  003  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  inappropriate isolation level for branch transaction  /td  td  004  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  no active SQL-transaction for branch transaction  /td  td  005  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  read-only SQL-transaction  /td  td  006  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  schema and data statement mixing not supported  /td  td  007  /td  /tr 
--##  tr  td  X  /td  td  invalid transaction termination  /td  td  2D  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  invalid transform group name specification  /td  td  0S  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  locator exception  /td  td  0F  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid specification  /td  td  001  /td  /tr 
--##  tr  td  N  /td  td  no data  /td  td  02  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  no additional dynamic result sets returned  /td  td  001  /td  /tr 
--##  tr  td  X  /td  td  prohibited statement encountered during trigger execution  /td  td  0W  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  Remote Database Access  /td  td  HZ  /td  td  (See Table 32, 'SQLSTATE class codes for RDA', for the definition of protocol subconditions and subclass code values)  /td  td  &nbsp;  /td  /tr 
--##  tr  td  X  /td  td  savepoint exception  /td  td  3B  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  invalid specification  /td  td  001  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  too many  /td  td  002  /td  /tr 
--##  tr  td  X  /td  td  SQL routine exception  /td  td  2F  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  function executed no return statement  /td  td  005  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  modifying SQL-data not permitted  /td  td  002  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  prohibited SQL-statement attempted  /td  td  003  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  reading SQL-data not permitted  /td  td  004  /td  /tr 
--##  tr  td  S  /td  td  successful completion  /td  td  00  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  syntax error or access rule violation  /td  td  42  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  target table disagrees with cursor specification  /td  td  0T  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  transaction rollback  /td  td  40  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  integrity constraint violation  /td  td  002  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  serialization failure  /td  td  001  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  statement completion unknown  /td  td  003  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  triggered action exception  /td  td  004  /td  /tr 
--##  tr  td  X  /td  td  triggered action exception  /td  td  09  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  X  /td  td  triggered data change violation  /td  td  27  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  W  /td  td  warning  /td  td  01  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  additional result sets returned  /td  td  00D  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  array data, right truncation  /td  td  02F  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  attempt to return too many result sets  /td  td  00E  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  cursor operation conflict  /td  td  001  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  default value too long for information schema  /td  td  00B  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  disconnect error  /td  td  002  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  dynamic result sets returned  /td  td  00C  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  external routine warning (the value of xx to be chosen by the author of the external routine)  /td  td  Hxx  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  insufficient item descriptor areas  /td  td  005  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  null value eliminated in set function  /td  td  003  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  privilege not granted  /td  td  007  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  privilege not revoked  /td  td  006  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  query expression too long for information schema  /td  td  00A  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  search condition too long for information schema  /td  td  009  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  statement too long for information schema  /td  td  008  /td  /tr 
--##  tr  td  &nbsp;  /td  td  &nbsp;  /td  td  &nbsp;  /td  td  string data, right truncation  /td  td  004  /td  /tr 
--##  tr  td  X  /td  td  with check option violation  /td  td  44  /td  td  (no subclass)  /td  td  000  /td  /tr 
--##  /table 


--hr



--##  table_border=1 
--##  tr  th  Feature ID  /th  th  Feature Description  /th  th  Implied Feature  /th  th  ID Implied Feature Description  /th  /tr  
--##  tr  td  B032  /td  td  Extended dynamic SQL  /td  td  B031  /td  td  Basic dynamic SQL  /td  /tr 
--##  tr  td  B034  /td  td  Dynamic specification of cursor attributes  /td  td  B031  /td  td  Basic dynamic SQL  /td  /tr 
--##  tr  td  F381  /td  td  Extended schema manipulation  /td  td  F491  /td  td  Constraint management  /td  /tr 
--##  tr  td  F451  /td  td  Character set definition  /td  td  F461  /td  td  Named character sets  /td  /tr 
--##  tr  td  F711  /td  td  ALTER domain  /td  td  F251  /td  td  Domain support  /td  /tr 
--##  tr  td  F801  /td  td  Full set function  /td  td  F441  /td  td  Extended set function support  /td  /tr 
--##  tr  td  S024  /td  td  Enhanced structured types  /td  td  S023  /td  td  Basic structured types  /td  /tr 
--##  tr  td  S041  /td  td  Basic reference types  /td  td  S023  /td  td  Basic structured types  /td  /tr 
--##  tr  td  S041  /td  td  Basic reference types  /td  td  S051  /td  td  Create table of type  /td  /tr 
--##  tr  td  S043  /td  td  Enhanced reference types  /td  td  S041  /td  td  Basic reference types  /td  /tr 
--##  tr  td  S051  /td  td  Create table of type  /td  td  S023  /td  td  Basic structured types  /td  /tr 
--##  tr  td  S081  /td  td  Subtables  /td  td  S023  /td  td  Basic structured types  /td  /tr 
--##  tr  td  S081  /td  td  Subtables  /td  td  S051  /td  td  Create table of type  /td  /tr 
--##  tr  td  S092  /td  td  Arrays of user-defined types  /td  td  S091  /td  td  Basic array support  /td  /tr 
--##  tr  td  S094  /td  td  Arrays of reference types  /td  td  S041  /td  td  Basic reference types  /td  /tr 
--##  tr  td  S094  /td  td  Arrays of reference types  /td  td  S091  /td  td  Basic array support  /td  /tr 
--##  tr  td  S095  /td  td  Array constructors by query  /td  td  S091  /td  td  Basic array support  /td  /tr 
--##  tr  td  S096  /td  td  Optional array bounds  /td  td  S091  /td  td  Basic array support  /td  /tr 
--##  tr  td  S111  /td  td  ONLY in query expressions  /td  td  S023  /td  td  Basic structured types  /td  /tr 
--##  tr  td  S111  /td  td  ONLY in query expressions  /td  td  S051  /td  td  Create table of type  /td  /tr 
--##  tr  td  S201  /td  td  SQL-invoked routines on arrays  /td  td  S091  /td  td  Basic array support  /td  /tr 
--##  tr  td  S202  /td  td  SQL-invoked routines on multisets  /td  td  S271  /td  td  Basic multiset support  /td  /tr 
--##  tr  td  S231  /td  td  Structured type locators  /td  td  S023  /td  td  Basic structured types  /td  /tr 
--##  tr  td  S232  /td  td  Array locators  /td  td  S091  /td  td  Basic array support  /td  /tr 
--##  tr  td  S233  /td  td  Multiset locators  /td  td  S271  /td  td  Basic multiset support  /td  /tr 
--##  tr  td  S242  /td  td  Alter transform statement  /td  td  S241  /td  td  Transform functions  /td  /tr 
--##  tr  td  S272  /td  td  Multisets of user-defined types  /td  td  S271  /td  td  Basic multiset support  /td  /tr 
--##  tr  td  S274  /td  td  Multisets of reference types  /td  td  S041  /td  td  Basic reference types  /td  /tr 
--##  tr  td  S274  /td  td  Multisets of reference types  /td  td  S271  /td  td  Basic multiset support  /td  /tr 
--##  tr  td  S275  /td  td  Advanced multiset support  /td  td  S271  /td  td  Basic multiset support  /td  /tr 
--##  tr  td  T042  /td  td  Extended LOB data type support  /td  td  T041  /td  td  Basic LOB data type support  /td  /tr 
--##  tr  td  T061  /td  td  UCS Support  /td  td  F461  /td  td  Named character sets  /td  /tr 
--##  tr  td  T071  /td  td  BIGINT data type  /td  td  E001-01  /td  td  INTEGER and SMALLINT data types (including all spellings)  /td  /tr 
--##  tr  td  T131  /td  td  Recursive query  /td  td  T121  /td  td  WITH (excluding RECURSIVE) in query expression  /td  /tr 
--##  tr  td  T173  /td  td  Extended LIKE clause in table definition  /td  td  T171  /td  td  LIKE clause in table definition  /td  /tr 
--##  tr  td  T212  /td  td  Enhanced trigger capability  /td  td  T211  /td  td  Basic trigger capability  /td  /tr 
--##  tr  td  T332  /td  td  Extended roles  /td  td  T331  /td  td  Basic roles  /td  /tr 
--##  tr  td  T511  /td  td  Transaction counts  /td  td  F121  /td  td  Basic diagnostics management  /td  /tr 
--##  tr  td  T571  /td  td  Array-returning external SQL-invoked functions  /td  td  S091  /td  td  Basic array support  /td  /tr 
--##  tr  td  T571  /td  td  Array-returning external SQL-invoked functions  /td  td  S201  /td  td  SQL-invoked routines on arrays  /td  /tr 
--##  tr  td  T572  /td  td  Multiset-returning external SQLinvoked functions  /td  td  S202  /td  td  SQL-invoked routines on multisets  /td  /tr 
--##  tr  td  T572  /td  td  Multiset-returning external SQLinvoked functions  /td  td  S271  /td  td  Basic multiset support  /td  /tr 
--##  tr  td  T612  /td  td  Advanced OLAP operations  /td  td  T611  /td  td  Elementary OLAP operations  /td  /tr 
--##  /table 


--hr




--hr

non terminal C_host_identifier;
non terminal window_frame_following;
non terminal specific_method_specification_designator;
non terminal /pre;
non terminal introducer;
non terminal row_value_constructor;
non terminal implementation-defined_character_set_name;
non terminal subtype_operand;
non terminal Ada_CLOB_locator_variable;
non terminal transliteration_routine;
non terminal quote;
non terminal grant_role_statement;
non terminal Ada_REF_variable;
non terminal multiset_element;
non terminal SQL_parameter_declaration;
non terminal source_character_set_specification;
non terminal local_or_schema_qualifier;
non terminal embedded_SQL_Fortran_program;
non terminal embedded_SQL_PL/I_program;
non terminal group_name;
non terminal SQL_session_statement;
non terminal normalized_predicate;
non terminal cast_to_distinct_identifier;
non terminal array_value_expression_1;
non terminal within_group_specification;
non terminal delete_rule;
non terminal dynamic_update_statement:_positioned;
non terminal using_descriptor;
non terminal boolean_term;
non terminal right_bracket_trigraph;
non terminal Ada_derived_type_specification;
non terminal SQL_parameter_name;
non terminal return_value;
non terminal result_expression;
non terminal member_predicate;
non terminal interval_term;
non terminal Fortran_REF_variable;
non terminal result;
non terminal boolean_test;
non terminal relative_function_specification;
non terminal Ada_variable_definition;
non terminal regular_expression_substring_function;
non terminal allocate_descriptor_statement;
non terminal COBOL_type_specification;
non terminal ordering_form;
non terminal statement_cursor;
non terminal window_specification;
non terminal interval_factor;
non terminal array_element_list;
non terminal hexit;
non terminal solidus;
non terminal current_time_value_function;
non terminal C_REF_variable;
non terminal multset_value_expression;
non terminal type_list;
non terminal Unicode_representation;
non terminal role_granted;
non terminal savepoint_specifier;
non terminal searched_when_clause;
non terminal sequence_generator_maxvalue_option;
non terminal levels_clause;
non terminal width_bucket_bound_2;
non terminal width_bucket_bound_1;
non terminal language_name;
non terminal blob_trim_function;
non terminal dynamic_result_sets_characteristic;
non terminal seconds_value;
non terminal ceiling_function;
non terminal interval_absolute_value_function;
non terminal right_bracket_or_trigraph;
non terminal bit_string_literal;
non terminal view_element;
non terminal reference_column_list;
non terminal extended_cursor_name;
non terminal deallocate_descriptor_statement;
non terminal datetime_primary;
non terminal header_item_name;
non terminal alter_table_statement;
non terminal C_initial_value;
non terminal drop_column_default_clause;
non terminal seconds_integer_value;
non terminal MUMPS_length_specification;
non terminal reference_type_specification;
non terminal status_parameter;
non terminal COBOL_user-defined_type_variable;
non terminal reference_resolution;
non terminal SQL-client_module_definition;
non terminal char_length_expression;
non terminal unsigned_numeric_literal;
non terminal comment_character;
non terminal embedded_SQL_declare_section;
non terminal object_privileges;
non terminal left_paren;
non terminal C_storage_class;
non terminal drop_character_set_statement;
non terminal C_CLOB_locator_variable;
non terminal set_time_zone_value;
non terminal string_position_expression;
non terminal embedded_SQL_statement;
non terminal role_name;
non terminal Ada_user-defined_type_variable;
non terminal character_substring_function;
non terminal row_value_constructor_element_list;
non terminal preparable_statement;
non terminal Fortran_variable_definition;
non terminal set_function_specification;
non terminal nondelimiter_token;
non terminal alter_sequence_generator_options;
non terminal transform_kind;
non terminal C_BLOB_locator_variable;
non terminal predefined_type;
non terminal locator_reference;
non terminal white_space;
non terminal PL/I_BLOB_variable;
non terminal locator_indication;
non terminal join_specification;
non terminal representation;
non terminal array_factor;
non terminal character_string_type;
non terminal numeric_value_expression_divisor;
non terminal alter_transform_action;
non terminal width_bucket_function;
non terminal blob_value_expression;
non terminal minus_sign;
non terminal C_array_specification;
non terminal Pascal_CLOB_locator_variable;
non terminal signed_numeric_literal;
non terminal blob_trim_source;
non terminal generalized_expression;
non terminal when_operand;
non terminal cast_to_source;
non terminal MUMPS_variable_definition;
non terminal cycle_mark_value;
non terminal current_local_time_value_function;
non terminal referenceable_view_specification;
non terminal character_string_literal;
non terminal transcoding_name;
non terminal upper_limit;
non terminal go_to;
non terminal C_character_type;
non terminal table_expression;
non terminal drop_assertion_statement;
non terminal data_type;
non terminal regular_factor;
non terminal Pascal_BLOB_locator_variable;
non terminal start_position;
non terminal unique_constraint_definition;
non terminal PL/I_type_specification;
non terminal query_specification;
non terminal describe_input_statement;
non terminal key_word;
non terminal condition_information;
non terminal alter_routine_characteristic;
non terminal signed_integer;
non terminal time_interval;
non terminal transform_group_specification;
non terminal double_period;
non terminal window_clause;
non terminal map_function_specification;
non terminal question_mark;
non terminal derived_table;
non terminal schema_qualified_type_name;
non terminal host_parameter_declaration;
non terminal cast_to_type_identifier;
non terminal Pascal_host_identifier;
non terminal timestamp_precision;
non terminal SQL-client_module_name;
non terminal general_value_specification;
non terminal Ada_type_specification;
non terminal cursor_intent;
non terminal period;
non terminal single_group_specification;
non terminal SQL_procedure_statement;
non terminal descriptor_name;
non terminal sequence_generator_definition;
non terminal delete_statement:_searched;
non terminal cursor_holdability;
non terminal multiset_element_list;
non terminal subview_clause;
non terminal overriding_method_specification;
non terminal datetime_type;
non terminal global_or_local;
non terminal constraint_name_list;
non terminal sequence_generator_option;
non terminal time_zone_specifier;
non terminal update_statement:_positioned;
non terminal routine_type;
non terminal field_reference;
non terminal inverse_distribution_function;
non terminal SQLSTATE_class_value;
non terminal table_function_column_list_element;
non terminal drop_routine_statement;
non terminal Fortran_derived_type_specification;
non terminal constructor_method_selection;
non terminal grouping_element;
non terminal PL/I_user-defined_type_locator_variable;
non terminal escaped_character;
non terminal item_number;
non terminal C_BLOB_variable;
non terminal Pascal_user-defined_type_variable;
non terminal update_target;
non terminal simple_table;
non terminal user-defined_type_name;
non terminal right_brace;
non terminal from_subquery;
non terminal delimited_identifier_part;
non terminal map_category;
non terminal collection_value_expression;
non terminal merge_when_matched_clause;
non terminal attribute_name;
non terminal trim_operands;
non terminal window_frame_units;
non terminal commit_statement;
non terminal blob_substring_function;
non terminal alter_identity_column_specification;
non terminal SQL-server_name;
non terminal Unicode_identifier_part;
non terminal COBOL_CLOB_locator_variable;
non terminal catalog_name;
non terminal update_rule;
non terminal cast_to_type;
non terminal C_numeric_variable;
non terminal reference_type;
non terminal interval_string;
non terminal regular_term;
non terminal like_options;
non terminal override_clause;
non terminal routine_invocation;
non terminal null_predicate;
non terminal MUMPS_multiset_locator_variable;
non terminal current_collation_specification;
non terminal implicitly_typed_value_specification;
non terminal ordered_set_function;
non terminal user-defined_type_definition;
non terminal add_table_constraint_definition;
non terminal deterministic_characteristic;
non terminal embedded_transform_group_specification;
non terminal boolean_predicand;
non terminal old_or_new_values_alias_list;
non terminal COBOL_CLOB_variable;
non terminal collate_clause;
non terminal precision;
non terminal triggered_SQL_statement;
non terminal into_argument;
non terminal drop_attribute_definition;
non terminal cycle_clause;
non terminal session_characteristic_list;
non terminal COBOL_multiset_locator_variable;
non terminal using_argument;
non terminal referenced_table_and_columns;
non terminal cursor_returnability;
non terminal revoke_privilege_statement;
non terminal hypothetical_set_function_value_expression_list;
non terminal attributes_variable;
non terminal Pascal_BLOB_variable;
non terminal external_routine_name;
non terminal trim_source;
non terminal blob_overlay_function;
non terminal binary_string_literal;
non terminal all;
non terminal drop_trigger_statement;
non terminal host_parameter_data_type;
non terminal COBOL_binary_integer;
non terminal referential_constraint_definition;
non terminal schema_name;
non terminal constraint_characteristics;
non terminal host_identifier;
non terminal COBOL_numeric_type;
non terminal SQL_control_statement;
non terminal condition;
non terminal binary_large_object_string_type;
non terminal set_quantifier;
non terminal drop_sequence_generator_statement;
non terminal number_of_conditions;
non terminal Ada_user-defined_type_locator_variable;
non terminal bracketed_comment_terminator;
non terminal state_category;
non terminal PL/I_array_locator_variable;
non terminal Ada_array_locator_variable;
non terminal set_clause_list;
non terminal PL/I_host_identifier;
non terminal existing_window_name;
non terminal exists_predicate;
non terminal SQL_parameter_reference;
non terminal cast_to_distinct;
non terminal submultiset_predicate;
non terminal Fortran_user-defined_type_variable;
non terminal close_statement;
non terminal table_subquery;
non terminal C_variable_definition;
non terminal qualified_join;
non terminal result_cast;
non terminal COBOL_variable_definition;
non terminal direct_SQL_data_statement;
non terminal semicolon;
non terminal qualified_identifier;
non terminal set_item_information;
non terminal new_window_name;
non terminal value_expression;
non terminal comparison_predicate;
non terminal cycle_column_list;
non terminal returns_table_type;
non terminal C_NCLOB_variable;
non terminal non-join_query_primary;
non terminal method_characteristic;
non terminal MUMPS_REF_variable;
non terminal module_character_set_specification;
non terminal multiset_primary;
non terminal nonquote_character;
non terminal referenced_type;
non terminal schema_qualified_name;
non terminal schema_character_set_specification;
non terminal local_or_schema_qualified_name;
non terminal function_specification;
non terminal parenthesized_boolean_value_expression;
non terminal call_statement;
non terminal C_variable_specification;
non terminal named_columns_join;
non terminal referencing_columns;
non terminal searched_case;
non terminal member_predicate_part_2;
non terminal cycle_mark_column;
non terminal role_specification;
non terminal get_descriptor_information;
non terminal parameter_style_clause;
non terminal host_parameter_name;
non terminal user-defined_type_specification;
non terminal transforms_to_be_dropped;
non terminal delimited_identifier;
non terminal COBOL_national_character_type;
non terminal trim_function;
non terminal with_list;
non terminal character_like_predicate;
non terminal MUMPS_character_variable;
non terminal vertical_bar;
non terminal default_specification;
non terminal alter_group;
non terminal connection_target;
non terminal host_PL/I_label_variable;
non terminal multiset_value_constructor;
non terminal sequence_generator_start_value;
non terminal PL/I_type_fixed_decimal;
non terminal extended_statement_name;
non terminal octet_like_predicate;
non terminal derived_representation;
non terminal extract_expression;
non terminal subtype_treatment;
non terminal Unicode_escape_specifier;
non terminal simple_value_specification;
non terminal left_bracket_or_trigraph;
non terminal window_frame_preceding;
non terminal window_function_type;
non terminal deallocate_prepared_statement;
non terminal drop_user-defined_ordering_statement;
non terminal SQL_language_character;
non terminal major_category;
non terminal SQL_dynamic_statement;
non terminal to_sql;
non terminal interval_value_expression;
non terminal alter_column_action;
non terminal string_value_function;
non terminal preparable_implementation-defined_statement;
non terminal embedded_SQL_MUMPS_declare;
non terminal mantissa;
non terminal simple_Latin_lower_case_letter;
non terminal position_expression;
non terminal left_bracket;
non terminal schema_path_specification;
non terminal PL/I_type_float_binary;
non terminal numeric_value_expression_exponent;
non terminal left_brace;
non terminal Fortran_type_specification;
non terminal boolean_literal;
non terminal ordering_category;
non terminal transaction_access_mode;
non terminal grouping_sets_specification;
non terminal insert_statement;
non terminal SQL_parameter_declaration_list;
non terminal multiset_term;
non terminal multiset_value_constructor_by_enumeration;
non terminal returns_data_type;
non terminal literal;
non terminal unsigned_value_specification;
non terminal query_name;
non terminal window_frame_bound;
non terminal contextually_typed_row_value_expression_list;
non terminal Fortran_CLOB_variable;
non terminal drop_schema_statement;
non terminal sequence_generator_min_value;
non terminal window_order_clause;
non terminal Ada_CLOB_variable;
non terminal set_predicate;
non terminal static_method_selection;
non terminal drop_table_statement;
non terminal table_or_query_name;
non terminal cast_operand;
non terminal cast_function;
non terminal from_sql;
non terminal references_specification;
non terminal free_locator_statement;
non terminal session_characteristic;
non terminal module_contents;
non terminal grouping_operation;
non terminal alter_identity_column_option;
non terminal alter_transform_statement;
non terminal privileges;
non terminal null-call_clause;
non terminal execute_immediate_statement;
non terminal savepoint_level_indication;
non terminal drop_transform_element_list;
non terminal as_clause;
non terminal character_set_name_characteristic;
non terminal contextually_typed_table_value_constructor;
non terminal ordinary_grouping_set_list;
non terminal unquoted_timestamp_string;
non terminal constraint_check_time;
non terminal level_of_isolation;
non terminal minutes_value;
non terminal COBOL_host_identifier;
non terminal COBOL_BLOB_variable;
non terminal hex_string_literal;
non terminal C_VARCHAR_variable;
non terminal pre;
non terminal simple_target_specification_1;
non terminal simple_target_specification_2;
non terminal array_element_reference;
non terminal merge_when_not_matched_clause;
non terminal SQL_executable_statement;
non terminal disconnect_statement;
non terminal time_value;
non terminal start_field;
non terminal with_or_without_data;
non terminal dynamic_single_row_select_statement;
non terminal common_sequence_generator_option;
non terminal in_predicate_part_2;
non terminal mutated_target;
non terminal alter_domain_statement;
non terminal supertable_clause;
non terminal row_value_predicand;
non terminal character_enumeration_include;
non terminal window_frame_clause;
non terminal like_predicate;
non terminal in_value_list;
non terminal sequence_generator_minvalue_option;
non terminal interval_literal;
non terminal module_collation_specification;
non terminal view_column_option;
non terminal schema_procedure;
non terminal set_transaction_statement;
non terminal insert_columns_and_source;
non terminal savepoint_name;
non terminal exact_numeric_type;
non terminal Pascal_derived_type_specification;
non terminal user-defined_cast_definition;
non terminal row_value_expression_list;
non terminal dependent_variable_expression;
non terminal Fortran_multiset_locator_variable;
non terminal array_type;
non terminal from_sql_function;
non terminal merge_insert_specification;
non terminal factor;
non terminal date_literal;
non terminal Fortran_user-defined_type_locator_variable;
non terminal row_value_predicand_3;
non terminal row_value_predicand_2;
non terminal table_row_value_expression;
non terminal row_value_predicand_4;
non terminal as_subquery_clause;
non terminal column_constraint;
non terminal right_paren;
non terminal row_value_predicand_1;
non terminal cast_to_ref_identifier;
non terminal scope_clause;
non terminal dynamic_close_statement;
non terminal year-month_literal;
non terminal SQL_language_identifier;
non terminal non-cycle_mark_value;
non terminal asterisked_identifier_chain;
non terminal referential_action;
non terminal Fortran_array_locator_variable;
non terminal recursive_search_order;
non terminal SQL-invoked_routine;
non terminal approximate_numeric_literal;
non terminal SQL_statement_name;
non terminal schema_name_list;
non terminal SQL-data_access_indication;
non terminal colon;
non terminal MUMPS_BLOB_variable;
non terminal set_target;
non terminal simple_case;
non terminal condition_information_item;
non terminal assertion_definition;
non terminal interval_qualifier;
non terminal string_length;
non terminal collection_type;
non terminal numeric_value_expression_dividend;
non terminal host_label_identifier;
non terminal MUMPS_user-defined_type_variable;
non terminal method_selection;
non terminal explicit_table;
non terminal regular_view_specification;
non terminal updatability_clause;
non terminal width_bucket_operand;
non terminal role_definition;
non terminal hold_locator_statement;
non terminal MUMPS_host_identifier;
non terminal table_contents_source;
non terminal identifier;
non terminal case_operand;
non terminal window_partition_column_reference;
non terminal set_descriptor_statement;
non terminal referential_triggered_action;
non terminal distinct_predicate;
non terminal interval_fractional_seconds_precision;
non terminal Unicode_escape_character;
non terminal cast_option;
non terminal search_or_cycle_clause;
non terminal module_collation;
non terminal SQL-invoked_procedure;
non terminal COBOL_REF_variable;
non terminal time_string;
non terminal empty_specification;
non terminal exclusive_user-defined_type_specification;
non terminal ordinary_grouping_set;
non terminal output_using_clause;
non terminal view_specification;
non terminal normalize_function;
non terminal multiple_group_specification;
non terminal sequence_column;
non terminal set_path_statement;
non terminal C_NCHAR_VARYING_variable;
non terminal cross_join;
non terminal table_border=1;
non terminal common_sequence_generator_options;
non terminal approximate_numeric_type;
non terminal revoke_option_extension;
non terminal specific_type_method;
non terminal value_specification;
non terminal cycle_column;
non terminal into_descriptor;
non terminal routine_characteristics;
non terminal grouping_column_reference;
non terminal array_value_expression;
non terminal self-referencing_column_name;
non terminal COBOL_character_type;
non terminal cast_target;
non terminal open_statement;
non terminal drop_table_constraint_definition;
non terminal character_set_specification_list;
non terminal member_name;
non terminal transform_group_characteristic;
non terminal source_data_type;
non terminal quantified_comparison_predicate_part_2;
non terminal binary_set_function_type;
non terminal alter_routine_characteristics;
non terminal SQL_transaction_statement;
non terminal attribute_or_method_reference;
non terminal escape_octet;
non terminal module_transform_group_specification;
non terminal cast_to_ref;
non terminal column_options;
non terminal Pascal_array_locator_variable;
non terminal general_literal;
non terminal module_authorization_clause;
non terminal transliteration_source;
non terminal corresponding_spec;
non terminal SQL_diagnostics_information;
non terminal cast_to_source_identifier;
non terminal sample_method;
non terminal COBOL_user-defined_type_locator_variable;
non terminal data_type_list;
non terminal filter_clause;
non terminal SQL_dynamic_data_statement;
non terminal module_collations;
non terminal cursor_sensitivity;
non terminal sequence_generator_cycle_option;
non terminal row_subquery;
non terminal exact_numeric_literal;
non terminal embedded_SQL_C_program;
non terminal target_table;
non terminal schema_name_clause;
non terminal alter_routine_statement;
non terminal new_invocation;
non terminal domain_constraint;
non terminal boolean_factor;
non terminal privilege_column_list;
non terminal standard_character_set_name;
non terminal system-generated_representation;
non terminal /sup;
non terminal window_name_or_specification;
non terminal non-join_query_term;
non terminal old_or_new_values_alias;
non terminal using_input_descriptor;
non terminal procedure_name;
non terminal contextually_typed_row_value_constructor_element_list;
non terminal doublequote_symbol;
non terminal method_invocation;
non terminal identifier_body;
non terminal role_revoked;
non terminal start_transaction_statement;
non terminal non-second_primary_datetime_field;
non terminal select_target_list;
non terminal row_type_body;
non terminal transcoding;
non terminal MUMPS_CLOB_locator_variable;
non terminal path-resolved_user-defined_type_name;
non terminal collation_specification;
non terminal embedded_character_set_declaration;
non terminal dynamic_delete_statement:_positioned;
non terminal all_fields_reference;
non terminal percent;
non terminal simple_Latin_upper_case_letter;
non terminal subtable_clause;
non terminal transaction_characteristics;
non terminal trigger_action_time;
non terminal old_values_table_alias;
non terminal time_precision;
non terminal set_function_type;
non terminal drop_domain_statement;
non terminal temporary_table_declaration;
non terminal simple_target_specification;
non terminal delimited_identifier_body;
non terminal from_constructor;
non terminal prepare_statement;
non terminal catalog_name_characteristic;
non terminal column_name;
non terminal match_predicate;
non terminal time_zone;
non terminal regular_primary;
non terminal quantifier;
non terminal into_arguments;
non terminal cast_specification;
non terminal multiset_set_function;
non terminal parameter_mode;
non terminal merge_insert_value_list;
non terminal circumflex;
non terminal MUMPS_numeric_variable;
non terminal preparable_dynamic_delete_statement:_positioned;
non terminal table_reference;
non terminal large_object_length_token;
non terminal rank_function_type;
non terminal regular_expression;
non terminal asterisk;
non terminal merge_insert_value_element;
non terminal C_user-defined_type_variable;
non terminal check_constraint_definition;
non terminal nesting_option;
non terminal merge_operation_specification;
non terminal less_than_operator;
non terminal mutated_set_clause;
non terminal drop_view_statement;
non terminal escape_character;
non terminal finality;
non terminal set_transform_group_statement;
non terminal match_predicate_part_2;
non terminal cube_list;
non terminal corresponding_column_list;
non terminal months_value;
non terminal national_character_string_type;
non terminal reference_value_expression;
non terminal schema-resolved_user-defined_type_name;
non terminal C_multiset_locator_variable;
non terminal interval_value_expression_1;
non terminal set_header_information;
non terminal extract_field;
non terminal transaction_mode;
non terminal fold;
non terminal Pascal_variable_definition;
non terminal C_array_locator_variable;
non terminal method_specification_designator;
non terminal large_object_length;
non terminal day-time_literal;
non terminal user-defined_representation;
non terminal Ada_assignment_operator;
non terminal query_expression;
non terminal module_authorization_identifier;
non terminal table_value_constructor;
non terminal reference_scope_check;
non terminal sample_clause;
non terminal connection_object;
non terminal preparable_SQL_session_statement;
non terminal value_expression_primary;
non terminal input_using_clause;
non terminal describe_output_statement;
non terminal add_domain_constraint_definition;
non terminal existing_collation_name;
non terminal Unicode_4_digit_escape_value;
non terminal derived_column_list;
non terminal method_specification;
non terminal alter_routine_behavior;
non terminal MUMPS_type_specification;
non terminal non-join_query_expression;
non terminal add_original_method_specification;
non terminal object_name;
non terminal search_clause;
non terminal term;
non terminal direct_implementation-defined_statement;
non terminal dereference_operation;
non terminal transform_element;
non terminal datetime_factor;
non terminal add_column_scope_clause;
non terminal with_clause;
non terminal unique_specification;
non terminal triggered_action;
non terminal row_value_expression;
non terminal supertable_name;
non terminal row_value_constructor_element;
non terminal embedded_authorization_clause;
non terminal underscore;
non terminal query_term;
non terminal window_definition;
non terminal embedded_SQL_begin_declare;
non terminal regular_identifier;
non terminal ordering_specification;
non terminal aggregate_function;
non terminal national_character_string_literal;
non terminal non-escaped_character;
non terminal insertion_target;
non terminal sequence_generator_data_type_option;
non terminal table_function_column_list;
non terminal query_primary;
non terminal simple_comment;
non terminal SQL_schema_manipulation_statement;
non terminal column_option_list;
non terminal Fortran_BLOB_locator_variable;
non terminal double_colon;
non terminal grouping_set_list;
non terminal similar_predicate_part_2;
non terminal like_clause;
non terminal preparable_SQL_schema_statement;
non terminal digit;
non terminal with_or_without_time_zone;
non terminal set_connection_statement;
non terminal datetime_literal;
non terminal next_value_expression;
non terminal octet_pattern;
non terminal set_role_statement;
non terminal PL/I_variable_definition;
non terminal host_parameter_declaration_list;
non terminal MUMPS_derived_type_specification;
non terminal bracketed_comment_introducer;
non terminal specific_name;
non terminal SQL_condition;
non terminal using_arguments;
non terminal identifier_start;
non terminal select_sublist;
non terminal datetime_value_function;
non terminal concatenation_operator;
non terminal local_qualified_name;
non terminal PL/I_BLOB_locator_variable;
non terminal nonparenthesized_value_expression_primary;
non terminal some;
non terminal relative_category;
non terminal character_specifier;
non terminal local_qualifier;
non terminal boolean_primary;
non terminal grouping_set;
non terminal path_specification;
non terminal drop_transliteration_statement;
non terminal target_array_element_specification;
non terminal multiple_column_assignment;
non terminal delete_statement:_positioned;
non terminal set_session_user_identifier_statement;
non terminal trigger_event;
non terminal window_frame_extent;
non terminal connection_name;
non terminal contextually_typed_row_value_constructor;
non terminal preparable_SQL_control_statement;
non terminal connection_user_name;
non terminal instantiable_clause;
non terminal set_constraints_mode_statement;
non terminal simple_value_specification_2;
non terminal character_set_name;
non terminal simple_value_specification_1;
non terminal alter_domain_action;
non terminal scope_option;
non terminal merge_statement;
non terminal time_zone_interval;
non terminal interval_primary;
non terminal alter_sequence_generator_statement;
non terminal routine_body;
non terminal transform_group_element;
non terminal alter_transform_action_list;
non terminal row_type;
non terminal module_path_specification;
non terminal SQL_data_statement;
non terminal Fortran_host_identifier;
non terminal length;
non terminal type_predicate_part_2;
non terminal seconds_fraction;
non terminal sort_specification;
non terminal sequence_generator_start_with_option;
non terminal describe_statement;
non terminal window_function;
non terminal field_name;
non terminal table_function_derived_table;
non terminal sequence_generator_restart_value;
non terminal member_name_alternatives;
non terminal Pascal_type_specification;
non terminal fetch_statement;
non terminal revoke_statement;
non terminal greater_than_or_equals_operator;
non terminal subtype_clause;
non terminal dynamic_cursor_name;
non terminal add_column_definition;
non terminal table_value_constructor_by_query;
non terminal window_partition_column_reference_list;
non terminal character_like_predicate_part_2;
non terminal described_object;
non terminal repeat_factor;
non terminal table_element_list;
non terminal translation_definition;
non terminal unquoted_date_string;
non terminal field_definition;
non terminal contextually_typed_row_value_expression;
non terminal SQLSTATE_subclass_value;
non terminal extract_source;
non terminal greater_than_operator;
non terminal blob_trim_operands;
non terminal character_enumeration;
non terminal Ada_host_identifier;
non terminal with_list_element;
non terminal get_header_information;
non terminal only_spec;
non terminal interval_leading_field_precision;
non terminal drop_role_statement;
non terminal SQL_prefix;
non terminal numeric_type;
non terminal action;
non terminal drop_transform_statement;
non terminal savepoint_statement;
non terminal identifier_part;
non terminal multiset_type;
non terminal qualified_asterisk;
non terminal basic_sequence_generator_option;
non terminal C_derived_variable;
non terminal schema_name_characteristic;
non terminal dynamic_declare_cursor;
non terminal domain_definition;
non terminal ampersand;
non terminal collation_definition;
non terminal SQL_special_character;
non terminal SQL_language_identifier_start;
non terminal self-referencing_column_specification;
non terminal blob_primary;
non terminal alter_column_definition;
non terminal condition_number;
non terminal schema_function;
non terminal PL/I_multiset_locator_variable;
non terminal SQL_routine_body;
non terminal time_literal;
non terminal timestamp_string;
non terminal with_column_list;
non terminal assigned_row;
non terminal SQL_terminal_character;
non terminal default_option;
non terminal SQL_argument;
non terminal cursor_attributes;
non terminal Pascal_multiset_locator_variable;
non terminal drop_collation_statement;
non terminal embedded_collation_specification;
non terminal directly_executable_statement;
non terminal unsigned_literal;
non terminal null_predicate_part_2;
non terminal insert_column_list;
non terminal member_list;
non terminal member;
non terminal merge_when_clause;
non terminal empty_grouping_set;
non terminal blob_factor;
non terminal natural_logarithm;
non terminal target_character_set_specification;
non terminal C_class_modifier;
non terminal character_set_definition;
non terminal window_frame_bound_1;
non terminal hypothetical_set_function;
non terminal equals_ordering_form;
non terminal character_factor;
non terminal drop_column_scope_clause;
non terminal current_timestamp_value_function;
non terminal direct_select_statement:_multiple_rows;
non terminal truth_value;
non terminal set_clause;
non terminal embedded_SQL_COBOL_program;
non terminal octet_like_predicate_part_2;
non terminal preparable_dynamic_update_statement:_positioned;
non terminal condition_action;
non terminal SQL_statement_variable;
non terminal rights_clause;
non terminal sequence_generator_increment;
non terminal common_value_expression;
non terminal generation_clause;
non terminal host_variable_definition;
non terminal external_body_reference;
non terminal simple_Latin_letter;
non terminal savepoint_clause;
non terminal COBOL_array_locator_variable;
non terminal window_frame_bound_2;
non terminal goto_target;
non terminal dereference_operator;
non terminal view_column_list;
non terminal MUMPS_BLOB_locator_variable;
non terminal target_data_type;
non terminal sign;
non terminal MUMPS_CLOB_variable;
non terminal get_diagnostics_statement;
non terminal date_string;
non terminal in-line_window_specification;
non terminal statement_information_item_name;
non terminal length_expression;
non terminal get_item_information;
non terminal embedded_authorization_declaration;
non terminal quote_symbol;
non terminal floor_function;
non terminal specific_method_name;
non terminal default_clause;
non terminal SQL-invoked_function;
non terminal parameter_type;
non terminal interval_type;
non terminal regular_character_set;
non terminal character_set_specification;
non terminal blob_position_expression;
non terminal join_column_list;
non terminal pad_characteristic;
non terminal dynamic_open_statement;
non terminal separator;
non terminal distinct_predicate_part_2;
non terminal Unicode_delimited_identifier;
non terminal row_value_constructor_predicand;
non terminal asterisked_identifier;
non terminal user-defined_ordering_definition;
non terminal bracketed_comment_contents;
non terminal type_predicate;
non terminal drop_method_specification;
non terminal comp_op;
non terminal static_method_invocation;
non terminal repeatable_clause;
non terminal MUMPS_user-defined_type_locator_variable;
non terminal generalized_invocation;
non terminal computational_operation;
non terminal COBOL_nines_specification;
non terminal identity_column_specification;
non terminal embedded_SQL_host_program;
non terminal window_frame_start;
non terminal table_reference_list;
non terminal similar_predicate;
non terminal primary_datetime_field;
non terminal transliteration_definition;
non terminal alter_table_action;
non terminal unquoted_interval_string;
non terminal inclusive_user-defined_type_specification;
non terminal day-time_interval;
non terminal full_ordering_form;
non terminal merge_update_specification;
non terminal routine_name;
non terminal contextually_typed_row_value_constructor_element;
non terminal less_than_or_equals_operator;
non terminal numeric_value_expression;
non terminal repeat_argument;
non terminal schema_character_set_or_path;
non terminal square_root;
non terminal collection_derived_table;
non terminal embedded_variable_name;
non terminal alter_sequence_generator_restart_option;
non terminal add_transform_element_list;
non terminal basic_identifier_chain;
non terminal absolute_value_expression;
non terminal SQL-path_characteristic;
non terminal indicator_parameter;
non terminal method_specification_list;
non terminal sequence_generator_increment_by_option;
non terminal date_value;
non terminal simple_when_clause;
non terminal window_partition_clause;
non terminal table_constraint;
non terminal SQL_schema_statement;
non terminal null_specification;
non terminal set_schema_statement;
non terminal multiset_value_constructor_by_query;
non terminal character_value_function;
non terminal transform_definition;
non terminal object_column;
non terminal add_attribute_definition;
non terminal window_frame_exclusion;
non terminal alter_type_statement;
non terminal diagnostics_size;
non terminal occurrences;
non terminal Pascal_REF_variable;
non terminal parenthesized_value_expression;
non terminal identity_option;
non terminal system_descriptor_statement;
non terminal character_value_expression;
non terminal array_value_constructor_by_enumeration;
non terminal schema_element;
non terminal grantee;
non terminal statement_information;
non terminal table_name;
non terminal MUMPS_array_locator_variable;
non terminal char_length_units;
non terminal predicate;
non terminal inverse_distribution_function_type;
non terminal in_predicate;
non terminal time_zone_field;
non terminal sequence_generator_max_value;
non terminal specific_routine_designator;
non terminal new_values_table_alias;
non terminal left_bracket_trigraph;
non terminal sample_percentage;
non terminal return_statement;
non terminal character_transliteration;
non terminal case_specification;
non terminal array_value_constructor;
non terminal overlaps_predicate;
non terminal schema_routine;
non terminal user-defined_type_body;
non terminal SQLSTATE_char;
non terminal independent_variable_expression;
non terminal bracketed_comment;
non terminal preparable_SQL_data_statement;
non terminal case_abbreviation;
non terminal Ada_qualified_type_specification;
non terminal set_target_list;
non terminal Ada_multiset_locator_variable;
non terminal /table;
non terminal query_expression_body;
non terminal double_quote;
non terminal modulus_expression;
non terminal width_bucket_count;
non terminal set_domain_default_clause;
non terminal SQL_argument_list;
non terminal overlaps_predicate_part_2;
non terminal overlaps_predicate_part_1;
non terminal correlation_name;
non terminal attribute_default;
non terminal set_names_statement;
non terminal simple_comment_introducer;
non terminal group_specification;
non terminal sup;
non terminal rollback_statement;
non terminal ref_cast_option;
non terminal result_cast_from_type;
non terminal character_enumeration_exclude;
non terminal right_bracket;
non terminal general_set_function;
non terminal match_type;
non terminal in_predicate_value;
non terminal Fortran_BLOB_variable;
non terminal similar_pattern;
non terminal having_clause;
non terminal multiset_element_reference;
non terminal view_element_list;
non terminal SQL_data_change_statement;
non terminal COBOL_NCLOB_variable;
non terminal declare_cursor;
non terminal column_constraint_definition;
non terminal execute_statement;
non terminal schema_qualified_routine_name;
non terminal set_column_default_clause;
non terminal td;
non terminal returns_type;
non terminal th;
non terminal dispatch_clause;
non terminal table_commit_action;
non terminal update_statement:_searched;
non terminal COBOL_BLOB_locator_variable;
non terminal Unicode_character_escape_value;
non terminal tr;
non terminal user_identifier;
non terminal get_descriptor_statement;
non terminal current_local_timestamp_value_function;
non terminal column_name_list;
non terminal direct_SQL_statement;
non terminal unqualified_schema_name;
non terminal C_user-defined_type_locator_variable;
non terminal single_datetime_field;
non terminal from_default;
non terminal grant_statement;
non terminal user-defined_character_set_name;
non terminal plus_sign;
non terminal equals_operator;
non terminal inverse_distribution_function_argument;
non terminal reference_generation;
non terminal disconnect_object;
non terminal COBOL_integer_type;
non terminal embedded_exception_declaration;
non terminal SQL_diagnostics_statement;
non terminal Pascal_CLOB_variable;
non terminal Unicode_escape_value;
non terminal window_specification_details;
non terminal Ada_BLOB_variable;
non terminal PL/I_CLOB_locator_variable;
non terminal multiplier;
non terminal grant_privilege_statement;
non terminal drop_behavior;
non terminal merge_correlation_name;
non terminal identifier_extend;
non terminal Unicode_delimiter_body;
non terminal language_clause;
non terminal dynamic_select_statement;
non terminal method_reference;
non terminal parameter_using_clause;
non terminal years_value;
non terminal target_subtype;
non terminal column_definition;
non terminal table_scope;
non terminal search_condition;
non terminal sequence_generator_name;
non terminal identifier_chain;
non terminal transform_element_list;
non terminal unquoted_time_string;
non terminal allocate_cursor_statement;
non terminal order_by_clause;
non terminal hours_value;
non terminal cursor_attribute;
non terminal reference_scope_check_action;
non terminal new_values_correlation_name;
non terminal fetch_target_list;
non terminal user-defined_type_option;
non terminal interval_value_function;
non terminal PL/I_derived_type_specification;
non terminal trigger_name;
non terminal indicator_variable;
non terminal select_list;
non terminal right_arrow;
non terminal set_session_characteristics_statement;
non terminal C_NCHAR_variable;
non terminal regular_character_set_identifier;
non terminal /td;
non terminal /th;
non terminal boolean_type;
non terminal collection_value_constructor;
non terminal explicit_row_value_constructor;
non terminal group_by_clause;
non terminal /tr;
non terminal binary_set_function;
non terminal outer_join_type;
non terminal old_values_correlation_name;
non terminal join_condition;
non terminal trim_octet;
non terminal datetime_term;
non terminal partial_method_specification;
non terminal comment;
non terminal result_set_cursor;
non terminal embedded_SQL_Ada_program;
non terminal user-defined_type_value_expression;
non terminal grouping_element_list;
non terminal Fortran_CLOB_locator_variable;
non terminal character_primary;
non terminal derived_column;
non terminal COBOL_derived_type_specification;
non terminal embedded_SQL_Pascal_program;
non terminal end_field;
non terminal fetch_orientation;
non terminal domain_name;
non terminal drop_column_definition;
non terminal non-reserved_word;
non terminal schema_authorization_identifier;
non terminal constraint_name_definition;
non terminal drop_domain_default_clause;
non terminal cursor_scrollability;
non terminal array_element;
non terminal table_element;
non terminal external_security_clause;
non terminal authorization_identifier;
non terminal delimiter_token;
non terminal array_concatenation;
non terminal sort_key;
non terminal submultiset_predicate_part_2;
non terminal datetime_value_expression;
non terminal PL/I_user-defined_type_variable;
non terminal COBOL_nines;
non terminal trigger_column_list;
non terminal nondoublequote_character;
non terminal concatenation;
non terminal externally-invoked_procedure;
non terminal grouping_column_reference_list;
non terminal between_predicate_part_2;
non terminal all_fields_column_name_list;
non terminal lateral_derived_table;
non terminal Ada_BLOB_locator_variable;
non terminal cursor_specification;
non terminal attributes_specification;
non terminal PL/I_type_fixed_binary;
non terminal quantified_comparison_predicate;
non terminal natural_join;
non terminal high_value;
non terminal set_local_time_zone_statement;
non terminal multiset_value_expression;
non terminal set_descriptor_information;
non terminal C_character_variable;
non terminal table_primary_or_joined_table;
non terminal sort_specification_list;
non terminal supertype_name;
non terminal numeric_value_expression_base;
non terminal grantor;
non terminal Unicode_6_digit_escape_value;
non terminal between_predicate;
non terminal C_CLOB_variable;
non terminal blob_concatenation;
non terminal multiset_value_function;
non terminal SQL_schema_definition_statement;
non terminal interval_term_1;
non terminal SQL_routine_spec;
non terminal interval_term_2;
non terminal existing_transliteration_name;
non terminal PL/I_REF_variable;
non terminal window_name;
non terminal new_specification;
non terminal comparison_predicate_part_2;
non terminal null_ordering;
non terminal character_set_source;
non terminal statement_name;
non terminal Ada_unqualified_type_specification;
non terminal generation_expression;
non terminal user-defined_type_option_list;
non terminal schema_definition;
non terminal SQL_terminator;
non terminal token;
non terminal numeric_primary;
non terminal drop_domain_constraint_definition;
non terminal trigger_definition;
non terminal comma;
non terminal datetime_value;
non terminal actual_identifier;
non terminal from_clause;
non terminal embedded_SQL_MUMPS_program;
non terminal embedded_SQL_end_declare;
non terminal blob_value_function;
non terminal else_clause;
non terminal statement_information_item;
non terminal where_clause;
non terminal subquery;
non terminal table_definition;
non terminal attribute_definition;
non terminal string_value_expression;
non terminal select_statement:_single_row;
non terminal low_value;
non terminal parameter_style;
non terminal transliteration_name;
non terminal SQL_connection_statement;
non terminal space;
non terminal trim_specification;
non terminal newline;
non terminal table_primary;
non terminal reserved_word;
non terminal original_method_specification;
non terminal embedded_path_specification;
non terminal method_name;
non terminal module_name_clause;
non terminal dynamic_fetch_statement;
non terminal add_overriding_method_specification;
non terminal preparable_SQL_transaction_statement;
non terminal exponent;
non terminal column_reference;
non terminal join_type;
non terminal numeric_value_function;
non terminal constraint_name;
non terminal time_fractional_seconds_precision;
non terminal case_expression;
non terminal alter_sequence_generator_option;
non terminal direct_invocation;
non terminal collation_name;
non terminal target_array_reference;
non terminal set_session_collation_statement;
non terminal set_catalog_statement;
non terminal window_frame_between;
non terminal release_savepoint_statement;
non terminal Ada_initial_value;
non terminal target_specification;
non terminal method_characteristics;
non terminal cursor_name;
non terminal dynamic_parameter_specification;
non terminal condition_information_item_name;
non terminal path_column;
non terminal drop_user-defined_cast_statement;
non terminal overlaps_predicate_part;
non terminal exponential_function;
non terminal scalar_subquery;
non terminal current_date_value_function;
non terminal character_overlay_function;
non terminal list_of_attributes;
non terminal scale;
non terminal PL/I_CLOB_variable;
non terminal statement_or_declaration;
non terminal days_value;
non terminal to_sql_function;
non terminal transform_group;
non terminal update_source;
non terminal revoke_role_statement;
non terminal result_using_clause;
non terminal embedded_authorization_identifier;
non terminal union_join;
non terminal host_parameter_specification;
non terminal array_value_constructor_by_query;
non terminal character_pattern;
non terminal SQL_language_identifier_part;
non terminal returns_clause;
non terminal privilege_method_list;
non terminal connect_statement;
non terminal maximum_dynamic_result_sets;
non terminal routine_characteristic;
non terminal unique_predicate;
non terminal boolean_value_expression;
non terminal power_function;
non terminal trim_character;
non terminal sequence_generator_options;
non terminal handler_declaration;
non terminal embedded_variable_specification;
non terminal character_representation;
non terminal isolation_level;
non terminal alter_type_action;
non terminal descriptor_item_name;
non terminal timestamp_literal;
non terminal contextually_typed_value_specification;
non terminal joined_table;
non terminal view_definition;
non terminal window_definition_list;
non terminal generation_rule;
non terminal set_predicate_part_2;
non terminal row_value_special_case;
non terminal drop_data_type_statement;
non terminal Unicode_character_string_literal;
non terminal unique_column_list;
non terminal cardinality_expression;
non terminal octet_length_expression;
non terminal rollup_list;
non terminal column_default_option;
non terminal Pascal_user-defined_type_locator_variable;
non terminal not_equals_operator;
non terminal slash;
non terminal table_constraint_definition;
non terminal unsigned_integer;
