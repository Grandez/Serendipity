package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;

parser code {:
:}

action code {:
:}

init with {:
:}

scan with {:
:}


/****************************************************************************/
/****************************************************************************/
/*               LOS SIMBOLOS SON COMUNES                                   */
/****************************************************************************/
/****************************************************************************/

terminal Symbol NADA        , NADA2;

terminal Symbol A_SET                             ;
terminal Symbol ABS                               ; 
terminal Symbol ABSOLUTE                          ;
terminal Symbol ACTION                            ;
terminal Symbol ADA                               ;
terminal Symbol ADD                               ;
terminal Symbol ADMIN                             ;
terminal Symbol AFTER                             ;
terminal Symbol ALL                               ;
terminal Symbol ALLOCATE                          ;
terminal Symbol ALTER                             ;
terminal Symbol ALWAYS                            ;
terminal Symbol amp                               ;
terminal Symbol AND                               ;
terminal Symbol ANY                               ;
terminal Symbol ARE                               ;
terminal Symbol ARRAY                             ;
terminal Symbol AS                                ;
terminal Symbol ASC                               ;
terminal Symbol ASENSITIVE                        ;
terminal Symbol ASSERTION                         ;
terminal Symbol ASSIGNMENT                        ;
terminal Symbol ASYMMETRIC                        ;
terminal Symbol AT                                ;
terminal Symbol ATOMIC                            ;
terminal Symbol ATTRIBUTE                         ;
terminal Symbol ATTRIBUTES                        ;
terminal Symbol AUTHORIZATION                     ;
terminal Symbol AUTO                              ;
terminal Symbol AVG                               ;
terminal Symbol BEFORE                            ;
terminal Symbol BEGIN                             ;
terminal Symbol BERNOULLI                         ;
terminal Symbol BETWEEN                           ;
terminal Symbol BIGINT                            ;
terminal Symbol BIN                               ;
terminal Symbol BINARY                            ;
terminal Symbol BLOB                              ;
terminal Symbol BOOLEAN                           ;
terminal Symbol BOTH                              ;
terminal Symbol BREADTH                           ;
terminal Symbol BY                                ;
terminal Symbol C                                 ;
terminal Symbol CALL                              ;
terminal Symbol CALLED                            ;
terminal Symbol CARDINALITY                       ;
terminal Symbol CASCADE                           ;
terminal Symbol CASCADED                          ;
terminal Symbol CASE                              ;
terminal Symbol CAST                              ;
terminal Symbol CATALOG                           ;
terminal Symbol CATALOG_NAME                      ;
terminal Symbol CEIL                              ;
terminal Symbol CEILING                           ;
terminal Symbol CHAIN                             ;
terminal Symbol CHAR                              ;
terminal Symbol CHARACTER                         ;
terminal Symbol CHARACTERISTICS                   ;
terminal Symbol CHARACTERS                        ;
terminal Symbol CHARACTER_LENGTH                  ;
terminal Symbol CHARACTER_SET_CATALOG             ;
terminal Symbol CHARACTER_SET_NAME                ;
terminal Symbol CHARACTER_SET_SCHEMA              ;
terminal Symbol CHAR_LENGTH                       ;
terminal Symbol CHECK                             ;
terminal Symbol CHECKED                           ;
terminal Symbol CLASS_ORIGIN                      ;
terminal Symbol CLOB                              ;
terminal Symbol CLOSE                             ;
terminal Symbol COALESCE                          ;
terminal Symbol COBOL                             ;
terminal Symbol CODE_UNITS                        ;
terminal Symbol COLLATE                           ;
terminal Symbol COLLATION                         ;
terminal Symbol COLLATION_CATALOG                 ;
terminal Symbol COLLATION_NAME                    ;
terminal Symbol COLLATION_SCHEMA                  ;
terminal Symbol COLLECT                           ;
terminal Symbol COLUMN                            ;
terminal Symbol COLUMN_NAME                       ;
terminal Symbol COMMAND_FUNCTION                  ;
terminal Symbol COMMAND_FUNCTION_CODE             ;
terminal Symbol COMMIT                            ;
terminal Symbol COMMITTED                         ;
terminal Symbol CONDITION                         ;
terminal Symbol CONDITION_NUMBER                  ;
terminal Symbol CONNECT                           ;
terminal Symbol CONNECTION                        ;
terminal Symbol CONNECTION_NAME                   ;
terminal Symbol CONST                             ;
terminal Symbol CONSTRAINT                        ;
terminal Symbol CONSTRAINTS                       ;
terminal Symbol CONSTRAINT_CATALOG                ;
terminal Symbol CONSTRAINT_NAME                   ;
terminal Symbol CONSTRAINT_SCHEMA                 ;
terminal Symbol CONSTRUCTOR                       ;
terminal Symbol CONSTRUCTORS                      ;
terminal Symbol CONTAINS                          ;
terminal Symbol CONTINUE                          ;
terminal Symbol CONVERT                           ;
terminal Symbol CORR                              ;
terminal Symbol CORRESPONDING                     ;
terminal Symbol COUNT                             ;
terminal Symbol COVAR_POP                         ;
terminal Symbol COVAR_SAMP                        ;
terminal Symbol CREATE                            ;
terminal Symbol CROSS                             ;
terminal Symbol CUBE                              ;
terminal Symbol CUME_DIST                         ;
terminal Symbol CURRENT                           ;
terminal Symbol CURRENT_COLLATION                 ;
terminal Symbol CURRENT_DATE                      ;
terminal Symbol CURRENT_DEFAULT_TRANSFORM_GROUP   ;
terminal Symbol CURRENT_PATH                      ;
terminal Symbol CURRENT_ROLE                      ;
terminal Symbol CURRENT_TIME                      ;
terminal Symbol CURRENT_TIMESTAMP                 ;
terminal Symbol CURRENT_TRANSFORM_GROUP_FOR_TYPE  ;
terminal Symbol CURRENT_USER                      ;
terminal Symbol CURSOR                            ;
terminal Symbol CURSOR_NAME                       ;
terminal Symbol CYCLE                             ;
terminal Symbol DATA                              ;
terminal Symbol DATE                              ;
terminal Symbol DATETIME_INTERVAL_CODE            ;
terminal Symbol DATETIME_INTERVAL_PRECISION       ;
terminal Symbol DAY                               ;
terminal Symbol DCL                               ;
terminal Symbol DEALLOCATE                        ;
terminal Symbol DEC                               ;
terminal Symbol DECIMAL                           ;
terminal Symbol DECLARE                           ;
terminal Symbol DEFAULT                           ;
terminal Symbol DEFAULTS                          ;
terminal Symbol DEFERRABLE                        ;
terminal Symbol DEFERRED                          ;
terminal Symbol DEFINED                           ;
terminal Symbol DEFINER                           ;
terminal Symbol DEGREE                            ;
terminal Symbol DELETE                            ;
terminal Symbol DENSE_RANK                        ;
terminal Symbol DEPTH                             ;
terminal Symbol DEREF                             ;
terminal Symbol DERIVED                           ;
terminal Symbol DESC                              ;
terminal Symbol DESCRIBE                          ;
terminal Symbol DESCRIPTOR                        ;
terminal Symbol DETERMINISTIC                     ;
terminal Symbol DIAGNOSTICS                       ;
terminal Symbol DISCONNECT                        ;
terminal Symbol DISPATCH                          ;
terminal Symbol DISPLAY                           ;
terminal Symbol DISTINCT                          ;
terminal Symbol DOMAIN                            ;
terminal Symbol DOUBLE                            ;
terminal Symbol double                            ;
terminal Symbol DOUBLE_PRECISION                  ;
terminal Symbol DROP                              ;
terminal Symbol DYNAMIC                           ;
terminal Symbol DYNAMIC_FUNCTION                  ;
terminal Symbol DYNAMIC_FUNCTION_CODE             ;
terminal Symbol EACH                              ;
terminal Symbol ELEMENT                           ;
terminal Symbol ELSE                              ;
terminal Symbol END                               ;
terminal Symbol ENDEXEC                          ;
terminal Symbol EQUALS                            ;
terminal Symbol ESCAPE                            ;
terminal Symbol EVERY                             ;
terminal Symbol EXCEPT                            ;
terminal Symbol EXCEPTION                         ;
terminal Symbol EXCLUDE                           ;
terminal Symbol EXCLUDING                         ;
terminal Symbol EXEC                              ;
terminal Symbol EXECUTE                           ;
terminal Symbol EXISTS                            ;
terminal Symbol EXP                               ;
terminal Symbol EXTERN                            ;
terminal Symbol EXTERNAL                          ;
terminal Symbol EXTRACT                           ;
terminal Symbol FALSE                             ;
terminal Symbol FETCH                             ;
terminal Symbol FILTER                            ;
terminal Symbol FINAL                             ;
terminal Symbol FIRST                             ;
terminal Symbol FIXED                             ;
terminal Symbol float                             ;
terminal Symbol FLOAT                             ;
terminal Symbol FLOOR                             ;
terminal Symbol FOLLOWING                         ;
terminal Symbol FOR                               ;
terminal Symbol FOREIGN                           ;
terminal Symbol FORTRAN                           ;
terminal Symbol FOUND                             ;
terminal Symbol FREE                              ;
terminal Symbol FROM                              ;
terminal Symbol FULL                              ;
terminal Symbol FUNCTION                          ;
terminal Symbol FUSION                            ;
terminal Symbol GENERAL                           ;
terminal Symbol GENERATED                         ;
terminal Symbol GET                               ;
terminal Symbol GLOBAL                            ;
terminal Symbol GO                                ;
terminal Symbol GOTO                              ;
terminal Symbol GRANT                             ;
terminal Symbol GRANTED                           ;
terminal Symbol GROUP                             ;
terminal Symbol GROUPING                          ;
terminal Symbol GT                                ;
terminal Symbol NE                                ;
terminal Symbol GE                                ;
terminal Symbol LE                                ;
terminal Symbol HAVING                            ;
terminal Symbol HIERARCHY                         ;
terminal Symbol HOLD                              ;
terminal Symbol HOUR                              ;
terminal Symbol IDENTITY                          ;
terminal Symbol IMMEDIATE                         ;
terminal Symbol IMPLEMENTATION                    ;
terminal Symbol IN                                ;
terminal Symbol INCLUDING                         ;
terminal Symbol INCREMENT                         ;
terminal Symbol INDICATOR                         ;
terminal Symbol INDICATOR_TYPE                    ;
terminal Symbol INITIALLY                         ;
terminal Symbol INNER                             ;
terminal Symbol INOUT                             ;
terminal Symbol INPUT                             ;
terminal Symbol INSENSITIVE                       ;
terminal Symbol INSERT                            ;
terminal Symbol INSTANCE                          ;
terminal Symbol INSTANTIABLE                      ;
terminal Symbol INT                               ;
terminal Symbol INTEGER                           ;
terminal Symbol Interfaces                        ;
terminal Symbol INTERSECT                         ;
terminal Symbol INTERSECTION                      ;
terminal Symbol INTERVAL                          ;
terminal Symbol INTO                              ;
terminal Symbol INVOKER                           ;
terminal Symbol IS                                ;
terminal Symbol ISOLATION                         ;
terminal Symbol JOIN                              ;
terminal Symbol KEY                               ;
terminal Symbol KEY_MEMBER                        ;
terminal Symbol KEY_TYPE                          ;
terminal Symbol KIND                              ;
terminal Symbol LANGUAGE                          ;
terminal Symbol LARGE                             ;
terminal Symbol LAST                              ;
terminal Symbol LATERAL                           ;
terminal Symbol LEADING                           ;
terminal Symbol LEFT                              ;
terminal Symbol LENGTH                            ;
terminal Symbol LEVEL                             ;
terminal Symbol LIKE                              ;
terminal Symbol LN                                ;
terminal Symbol LOCAL                             ;
terminal Symbol LOCALTIME                         ;
terminal Symbol LOCALTIMESTAMP                    ;
terminal Symbol LOCATOR                           ;
terminal Symbol LOGICAL                           ;
terminal Symbol long                              ;
terminal Symbol LOWER                             ;
terminal Symbol lt                                ;
terminal Symbol MAP                               ;
terminal Symbol MATCH                             ;
terminal Symbol MATCHED                           ;
terminal Symbol MAX                               ;
terminal Symbol MAXVALUE                          ;
terminal Symbol MEMBER                            ;
terminal Symbol MERGE                             ;
terminal Symbol MESSAGE_LENGTH                    ;
terminal Symbol MESSAGE_OCTET_LENGTH              ;
terminal Symbol MESSAGE_TEXT                      ;
terminal Symbol METHOD                            ;
terminal Symbol MIN                               ;
terminal Symbol MINUTE                            ;
terminal Symbol MINVALUE                          ;
terminal Symbol MOD                               ;
terminal Symbol MODIFIES                          ;
terminal Symbol MODULE                            ;
terminal Symbol MONTH                             ;
terminal Symbol MORE                              ;
terminal Symbol MULTISET                          ;
terminal Symbol MUMPS                             ;
terminal Symbol NAME                              ;
terminal Symbol NAMES                             ;
terminal Symbol NATIONAL                          ;
terminal Symbol NATURAL                           ;
terminal Symbol NCHAR                             ;
terminal Symbol NCLOB                             ;
terminal Symbol NESTING                           ;
terminal Symbol NEW                               ;
terminal Symbol NEXT                              ;
terminal Symbol NO                                ;
terminal Symbol NONE                              ;
terminal Symbol NORMALIZE                         ;
terminal Symbol NORMALIZED                        ;
terminal Symbol NOT                               ;
terminal Symbol NULL                              ;
terminal Symbol NULLABLE                          ;
terminal Symbol NULLIF                            ;
terminal Symbol NULLS                             ;
terminal Symbol NUMBER                            ;
terminal Symbol NUMERIC                           ;
terminal Symbol OBJECT                            ;
terminal Symbol OCTETS                            ;
terminal Symbol OCTET_LENGTH                      ;
terminal Symbol OF                                ;
terminal Symbol OLD                               ;
terminal Symbol ON                                ;
terminal Symbol ONLY                              ;
terminal Symbol OPEN                              ;
terminal Symbol OPTION                            ;
terminal Symbol OPTIONS                           ;
terminal Symbol OR                                ;
terminal Symbol ORDER                             ;
terminal Symbol ORDERING                          ;
terminal Symbol ORDINALITY                        ;
terminal Symbol OTHERS                            ;
terminal Symbol OUT                               ;
terminal Symbol OUTER                             ;
terminal Symbol OUTPUT                            ;
terminal Symbol OVER                              ;
terminal Symbol OVERLAPS                          ;
terminal Symbol OVERLAY                           ;
terminal Symbol OVERRIDING                        ;
terminal Symbol PACKED                            ;
terminal Symbol PAD                               ;
terminal Symbol PARAMETER                         ;
terminal Symbol PARAMETER_MODE                    ;
terminal Symbol PARAMETER_NAME                    ;
terminal Symbol PARAMETER_ORDINAL_POSITION        ;
terminal Symbol PARAMETER_SPECIFIC_CATALOG        ;
terminal Symbol PARAMETER_SPECIFIC_NAME           ;
terminal Symbol PARAMETER_SPECIFIC_SCHEMA         ;
terminal Symbol PARTIAL                           ;
terminal Symbol PARTITION                         ;
terminal Symbol PASCAL                            ;
terminal Symbol PATH                              ;
terminal Symbol PERCENTILE_CONT                   ;
terminal Symbol PERCENTILE_DISC                   ;
terminal Symbol PERCENT_RANK                      ;
terminal Symbol PIC                               ;
terminal Symbol PICTURE                           ;
terminal Symbol PLACING                           ;
terminal Symbol PLI                               ;
terminal Symbol POSITION                          ;
terminal Symbol POWER                             ;
terminal Symbol PRECEDING                         ;
terminal Symbol PRECISION                         ;
terminal Symbol PREPARE                           ;
terminal Symbol PRESERVE                          ;
terminal Symbol PRIMARY                           ;
terminal Symbol PRIOR                             ;
terminal Symbol PRIVILEGES                        ;
terminal Symbol PROCEDURE                         ;
terminal Symbol PUBLIC                            ;
terminal Symbol RANGE                             ;
terminal Symbol RANK                              ;
terminal Symbol READ                              ;
terminal Symbol READS                             ;
terminal Symbol REAL                              ;
terminal Symbol RECURSIVE                         ;
terminal Symbol REF                               ;
terminal Symbol REFERENCES                        ;
terminal Symbol REFERENCING                       ;
terminal Symbol REGR_AVGX                         ;
terminal Symbol REGR_AVGY                         ;
terminal Symbol REGR_COUNT                        ;
terminal Symbol REGR_INTERCEPT                    ;
terminal Symbol REGR_R2                           ;
terminal Symbol REGR_SLOPE                        ;
terminal Symbol REGR_SXX                          ;
terminal Symbol REGR_SXY                          ;
terminal Symbol REGR_SYY                          ;
terminal Symbol RELATIVE                          ;
terminal Symbol RELEASE                           ;
terminal Symbol REPEATABLE                        ;
terminal Symbol RESTART                           ;
terminal Symbol RESTRICT                          ;
terminal Symbol RESULT                            ;
terminal Symbol RETURN                            ;
terminal Symbol RETURNED_CARDINALITY              ;
terminal Symbol RETURNED_LENGTH                   ;
terminal Symbol RETURNED_OCTET_LENGTH             ;
terminal Symbol RETURNED_SQLSTATE                 ;
terminal Symbol RETURNS                           ;
terminal Symbol REVOKE                            ;
terminal Symbol RIGHT                             ;
terminal Symbol ROLE                              ;
terminal Symbol ROLLBACK                          ;
terminal Symbol ROLLUP                            ;
terminal Symbol ROUTINE                           ;
terminal Symbol ROUTINE_CATALOG                   ;
terminal Symbol ROUTINE_NAME                      ;
terminal Symbol ROUTINE_SCHEMA                    ;
terminal Symbol ROW                               ;
terminal Symbol ROWS                              ;
terminal Symbol ROW_COUNT                         ;
terminal Symbol ROW_NUMBER                        ;
terminal Symbol SAVEPOINT                         ;
terminal Symbol SCALE                             ;
terminal Symbol SCHEMA                            ;
terminal Symbol SCHEMA_NAME                       ;
terminal Symbol SCOPE                             ;
terminal Symbol SCOPE_CATALOG                     ;
terminal Symbol SCOPE_NAME                        ;
terminal Symbol SCOPE_SCHEMA                      ;
terminal Symbol SCROLL                            ;
terminal Symbol SEARCH                            ;
terminal Symbol SECOND                            ;
terminal Symbol SECTION                           ;
terminal Symbol SECURITY                          ;
terminal Symbol SELECT                            ;
terminal Symbol SELF                              ;
terminal Symbol SENSITIVE                         ;
terminal Symbol SEPARATE                          ;
terminal Symbol SEQUENCE                          ;
terminal Symbol SERIALIZABLE                      ;
terminal Symbol SERVER_NAME                       ;
terminal Symbol SESSION                           ;
terminal Symbol SESSION_USER                      ;
terminal Symbol SET                               ;
terminal Symbol SETS                              ;
terminal Symbol short                             ;
terminal Symbol SIGN                              ;
terminal Symbol SIMILAR                           ;
terminal Symbol SIMPLE                            ;
terminal Symbol SIZE                              ;
terminal Symbol SMALLINT                          ;
terminal Symbol SOME                              ;
terminal Symbol SOURCE                            ;
terminal Symbol SPACE                             ;
terminal Symbol SPECIFIC                          ;
terminal Symbol SPECIFICTYPE                      ;
terminal Symbol SPECIFIC_NAME                     ;
terminal Symbol SQL                               ;
terminal Symbol SQLEXCEPTION                      ;
terminal Symbol SQLSTATE                          ;
terminal Symbol SQLSTATE_TYPE                     ;
terminal Symbol SQLWARNING                        ;
terminal Symbol SQRT                              ;
terminal Symbol START                             ;
terminal Symbol STATE                             ;
terminal Symbol STATEMENT                         ;
terminal Symbol STATIC                            ;
terminal Symbol STDDEV_POP                        ;
terminal Symbol STDDEV_SAMP                       ;
terminal Symbol STRUCTURE                         ;
terminal Symbol STYLE                             ;
terminal Symbol SUBCLASS_ORIGIN                   ;
terminal Symbol SUBMULTISET                       ;
terminal Symbol SUBSTRING                         ;
terminal Symbol SUM                               ;
terminal Symbol SYMMETRIC                         ;
terminal Symbol SYSTEM                            ;
terminal Symbol SYSTEM_USER                       ;
terminal Symbol TABLE                             ;
terminal Symbol TABLESAMPLE                       ;
terminal Symbol TABLE_NAME                        ;
terminal Symbol TEMPORARY                         ;
terminal Symbol THEN                              ;
terminal Symbol TIES                              ;
terminal Symbol TIME                              ;
terminal Symbol TIMESTAMP                         ;
terminal Symbol TIMEZONE_HOUR                     ;
terminal Symbol TIMEZONE_MINUTE                   ;
terminal Symbol TO                                ;
terminal Symbol TOP_LEVEL_COUNT                   ;
terminal Symbol TRAILING                          ;
terminal Symbol TRANSACTION                       ;
terminal Symbol TRANSACTIONS_COMMITTED            ;
terminal Symbol TRANSACTIONS_ROLLED_BACK          ;
terminal Symbol TRANSACTION_ACTIVE                ;
terminal Symbol TRANSFORM                         ;
terminal Symbol TRANSFORMS                        ;
terminal Symbol TRANSLATE                         ;
terminal Symbol TRANSLATION                       ;
terminal Symbol TREAT                             ;
terminal Symbol TRIGGER                           ;
terminal Symbol TRIGGER_CATALOG                   ;
terminal Symbol TRIGGER_NAME                      ;
terminal Symbol TRIGGER_SCHEMA                    ;
terminal Symbol TRIM                              ;
terminal Symbol TRUE                              ;
terminal Symbol TYPE                              ;
terminal Symbol UESCAPE                           ;
terminal Symbol UNBOUNDED                         ;
terminal Symbol UNCOMMITTED                       ;
terminal Symbol UNDER                             ;
terminal Symbol UNION                             ;
terminal Symbol UNIQUE                            ;
terminal Symbol UNKNOWN                           ;
terminal Symbol UNNAMED                           ;
terminal Symbol UNNEST                            ;
terminal Symbol unsigned                          ;
terminal Symbol UPDATE                            ;
terminal Symbol UPPER                             ;
terminal Symbol USAGE                             ;
terminal Symbol USER                              ;
terminal Symbol USER_DEFINED_TYPE_CATALOG         ;
terminal Symbol USER_DEFINED_TYPE_CODE            ;
terminal Symbol USER_DEFINED_TYPE_NAME            ;
terminal Symbol USER_DEFINED_TYPE_SCHEMA          ;
terminal Symbol USING                             ;
terminal Symbol VALUE                             ;
terminal Symbol VALUES                            ;
terminal Symbol VARCHAR                           ;
terminal Symbol VARYING                           ;
terminal Symbol VAR_POP                           ;
terminal Symbol VAR_SAMP                          ;
terminal Symbol VIEW                              ;
terminal Symbol VOLATILE                          ;
terminal Symbol WHEN                              ;
terminal Symbol WHENEVER                          ;
terminal Symbol WHERE                             ;
terminal Symbol WIDTH_BUCKET                      ;
terminal Symbol WINDOW                            ;
terminal Symbol WITH                              ;
terminal Symbol WITHIN                            ;
terminal Symbol WITHOUT                           ;
terminal Symbol WORK                              ;
terminal Symbol WRITE                             ;
terminal Symbol YEAR                              ;
terminal Symbol ZONE                              ;

terminal Symbol DQOUOTE       ;
terminal Symbol PERCENT       ;
terminal Symbol AMPERSAND     ;
terminal Symbol QUOTE         ;
terminal Symbol LPAR          ;
terminal Symbol RPAR          ;
terminal Symbol ASTERISK      ;
terminal Symbol PLUS          ;
terminal Symbol COMMA         ;
terminal Symbol MINUS         ;
terminal Symbol DOT           ;
terminal Symbol SLASH         ;
terminal Symbol COLON         ;
terminal Symbol SEMICOLON     ;
terminal Symbol LT            ;
terminal Symbol EQUAL         ;
terminal Symbol QUESTION      ;
terminal Symbol LCOR          ;
terminal Symbol RCOR          ;
terminal Symbol CIRCUMFLEX    ;
terminal Symbol UNDERSCORE    ;
terminal Symbol VBAR          ;
terminal Symbol LBRA          ;
terminal Symbol RBRA          ;

terminal Symbol ID ;

terminal Symbol DATEVAL ;
terminal Symbol TIMEVAL ;
terminal Symbol TMSVAL  ;

/****************************************************************************/
/****************************************************************************/
/*               LOS SIMBOLOS SON COMUNES                                   */
/****************************************************************************/
/****************************************************************************/

non terminal C_host_identifier;
non terminal window_frame_following;
non terminal specific_method_specification_designator;
non terminal introducer;
non terminal row_value_constructor;
non terminal implementation_defined_character_set_name;
non terminal subtype_operand;
non terminal Ada_CLOB_locator_variable;
non terminal transliteration_routine;
non terminal grant_role_statement;
non terminal Ada_REF_variable;
non terminal multiset_element;
non terminal SQL_parameter_declaration;
non terminal source_character_set_specification;
non terminal local_or_schema_qualifier;
non terminal embedded_SQL_Fortran_program;
non terminal embedded_SQL_PL_I_program;
non terminal group_name;
non terminal SQL_session_statement;
non terminal normalized_predicate;
non terminal cast_to_distinct_identifier;
non terminal array_value_expression_1;
non terminal within_group_specification;
non terminal delete_rule;
non terminal dynamic_update_statement_positioned;
non terminal using_descriptor;
non terminal boolean_term;
non terminal Ada_derived_type_specification;
non terminal SQL_parameter_name;
non terminal return_value;
non terminal result_expression;
non terminal member_predicate;
non terminal interval_term;
non terminal Fortran_REF_variable;
non terminal result;
non terminal boolean_test;
non terminal relative_function_specification;
non terminal Ada_variable_definition;
non terminal regular_expression_substring_function;
non terminal allocate_descriptor_statement;
non terminal COBOL_type_specification;
non terminal ordering_form;
non terminal statement_cursor;
non terminal window_specification;
non terminal interval_factor;
non terminal array_element_list;
non terminal hexit;
non terminal current_time_value_function;
non terminal C_REF_variable;
non terminal multset_value_expression;
non terminal type_list;
non terminal Unicode_representation;
non terminal role_granted;
non terminal savepoint_specifier;
non terminal searched_when_clause;
non terminal sequence_generator_maxvalue_option;
non terminal levels_clause;
non terminal width_bucket_bound_2;
non terminal width_bucket_bound_1;
non terminal language_name;
non terminal blob_trim_function;
non terminal dynamic_result_sets_characteristic;
non terminal seconds_value;
non terminal ceiling_function;
non terminal interval_absolute_value_function;
non terminal right_bracket_or_trigraph;
non terminal bit_string_literal;
non terminal view_element;
non terminal reference_column_list;
non terminal extended_cursor_name;
non terminal deallocate_descriptor_statement;
non terminal datetime_primary;
non terminal header_item_name;
non terminal alter_table_statement;
non terminal C_initial_value;
non terminal drop_column_default_clause;
non terminal seconds_integer_value;
non terminal MUMPS_length_specification;
non terminal reference_type_specification;
non terminal status_parameter;
non terminal COBOL_user_defined_type_variable;
non terminal reference_resolution;
non terminal SQL_client_module_definition;
non terminal char_length_expression;
non terminal unsigned_numeric_literal;
non terminal comment_character;
non terminal embedded_SQL_declare_section;
non terminal object_privileges;
non terminal C_storage_class;
non terminal drop_character_set_statement;
non terminal C_CLOB_locator_variable;
non terminal set_time_zone_value;
non terminal string_position_expression;
non terminal embedded_SQL_statement;
non terminal role_name;
non terminal Ada_user_defined_type_variable;
non terminal character_substring_function;
non terminal row_value_constructor_element_list;
non terminal preparable_statement;
non terminal Fortran_variable_definition;
non terminal set_function_specification;
non terminal nondelimiter_token;
non terminal alter_sequence_generator_options;
non terminal transform_kind;
non terminal C_BLOB_locator_variable;
non terminal predefined_type;
non terminal locator_reference;
non terminal white_space;
non terminal PL_I_BLOB_variable;
non terminal locator_indication;
non terminal join_specification;
non terminal representation;
non terminal array_factor;
non terminal character_string_type;
non terminal numeric_value_expression_divisor;
non terminal alter_transform_action;
non terminal width_bucket_function;
non terminal blob_value_expression;
non terminal C_array_specification;
non terminal Pascal_CLOB_locator_variable;
non terminal signed_numeric_literal;
non terminal blob_trim_source;
non terminal generalized_expression;
non terminal when_operand;
non terminal cast_to_source;
non terminal MUMPS_variable_definition;
non terminal cycle_mark_value;
non terminal current_local_time_value_function;
non terminal referenceable_view_specification;
non terminal character_string_literal;
non terminal transcoding_name;
non terminal upper_limit;
non terminal go_to;
non terminal C_character_type;
non terminal table_expression;
non terminal drop_assertion_statement;
non terminal data_type;
non terminal regular_factor;
non terminal Pascal_BLOB_locator_variable;
non terminal start_position;
non terminal unique_constraint_definition;
non terminal PL_I_type_specification;
non terminal query_specification;
non terminal describe_input_statement;
non terminal key_word;
non terminal condition_information;
non terminal alter_routine_characteristic;
non terminal signed_integer;
non terminal time_interval;
non terminal transform_group_specification;
non terminal double_period;
non terminal window_clause;
non terminal map_function_specification;
non terminal derived_table;
non terminal schema_qualified_type_name;
non terminal host_parameter_declaration;
non terminal cast_to_type_identifier;
non terminal Pascal_host_identifier;
non terminal timestamp_precision;
non terminal SQL_client_module_name;
non terminal general_value_specification;
non terminal Ada_type_specification;
non terminal cursor_intent;
non terminal single_group_specification;
non terminal SQL_procedure_statement;
non terminal descriptor_name;
non terminal sequence_generator_definition;
non terminal delete_statement_searched;
non terminal cursor_holdability;
non terminal multiset_element_list;
non terminal subview_clause;
non terminal overriding_method_specification;
non terminal datetime_type;
non terminal global_or_local;
non terminal constraint_name_list;
non terminal sequence_generator_option;
non terminal time_zone_specifier;
non terminal update_statement_positioned;
non terminal routine_type;
non terminal field_reference;
non terminal inverse_distribution_function;
non terminal SQLSTATE_class_value;
non terminal table_function_column_list_element;
non terminal drop_routine_statement;
non terminal Fortran_derived_type_specification;
non terminal constructor_method_selection;
non terminal grouping_element;
non terminal PL_I_user_defined_type_locator_variable;
non terminal escaped_character;
non terminal item_number;
non terminal C_BLOB_variable;
non terminal Pascal_user_defined_type_variable;
non terminal update_target;
non terminal simple_table;
non terminal user_defined_type_name;
non terminal from_subquery;
non terminal delimited_identifier_part;
non terminal map_category;
non terminal collection_value_expression;
non terminal merge_when_matched_clause;
non terminal attribute_name;
non terminal trim_operands;
non terminal window_frame_units;
non terminal commit_statement;
non terminal blob_substring_function;
non terminal alter_identity_column_specification;
non terminal SQL_server_name;
non terminal Unicode_identifier_part;
non terminal COBOL_CLOB_locator_variable;
non terminal catalog_name;
non terminal update_rule;
non terminal cast_to_type;
non terminal C_numeric_variable;
non terminal reference_type;
non terminal interval_string;
non terminal regular_term;
non terminal like_options;
non terminal override_clause;
non terminal routine_invocation;
non terminal null_predicate;
non terminal MUMPS_multiset_locator_variable;
non terminal current_collation_specification;
non terminal implicitly_typed_value_specification;
non terminal ordered_set_function;
non terminal user_defined_type_definition;
non terminal add_table_constraint_definition;
non terminal deterministic_characteristic;
non terminal embedded_transform_group_specification;
non terminal boolean_predicand;
non terminal old_or_new_values_alias_list;
non terminal COBOL_CLOB_variable;
non terminal collate_clause;
non terminal precision;
non terminal triggered_SQL_statement;
non terminal into_argument;
non terminal drop_attribute_definition;
non terminal cycle_clause;
non terminal session_characteristic_list;
non terminal COBOL_multiset_locator_variable;
non terminal using_argument;
non terminal referenced_table_and_columns;
non terminal cursor_returnability;
non terminal revoke_privilege_statement;
non terminal hypothetical_set_function_value_expression_list;
non terminal attributes_variable;
non terminal Pascal_BLOB_variable;
non terminal external_routine_name;
non terminal trim_source;
non terminal blob_overlay_function;
non terminal binary_string_literal;
non terminal drop_trigger_statement;
non terminal host_parameter_data_type;
non terminal COBOL_binary_integer;
non terminal referential_constraint_definition;
non terminal schema_name;
non terminal constraint_characteristics;
non terminal host_identifier;
non terminal COBOL_numeric_type;
non terminal SQL_control_statement;
non terminal condition;
non terminal binary_large_object_string_type;
non terminal set_quantifier;
non terminal drop_sequence_generator_statement;
non terminal number_of_conditions;
non terminal Ada_user_defined_type_locator_variable;
non terminal bracketed_comment_terminator;
non terminal state_category;
non terminal PL_I_array_locator_variable;
non terminal Ada_array_locator_variable;
non terminal set_clause_list;
non terminal PL_I_host_identifier;
non terminal existing_window_name;
non terminal exists_predicate;
non terminal SQL_parameter_reference;
non terminal cast_to_distinct;
non terminal submultiset_predicate;
non terminal Fortran_user_defined_type_variable;
non terminal close_statement;
non terminal table_subquery;
non terminal C_variable_definition;
non terminal qualified_join;
non terminal result_cast;
non terminal COBOL_variable_definition;
non terminal direct_SQL_data_statement;
non terminal qualified_identifier;
non terminal set_item_information;
non terminal new_window_name;
non terminal value_expression;
non terminal comparison_predicate;
non terminal cycle_column_list;
non terminal returns_table_type;
non terminal C_NCLOB_variable;
non terminal non_join_query_primary;
non terminal method_characteristic;
non terminal MUMPS_REF_variable;
non terminal module_character_set_specification;
non terminal multiset_primary;
non terminal nonquote_character;
non terminal referenced_type;
non terminal schema_qualified_name;
non terminal schema_character_set_specification;
non terminal local_or_schema_qualified_name;
non terminal function_specification;
non terminal parenthesized_boolean_value_expression;
non terminal call_statement;
non terminal C_variable_specification;
non terminal named_columns_join;
non terminal referencing_columns;
non terminal searched_case;
non terminal member_predicate_part_2;
non terminal cycle_mark_column;
non terminal role_specification;
non terminal get_descriptor_information;
non terminal parameter_style_clause;
non terminal host_parameter_name;
non terminal user_defined_type_specification;
non terminal transforms_to_be_dropped;
non terminal delimited_identifier;
non terminal COBOL_national_character_type;
non terminal trim_function;
non terminal with_list;
non terminal character_like_predicate;
non terminal MUMPS_character_variable;
non terminal default_specification;
non terminal alter_group;
non terminal connection_target;
non terminal host_PL_I_label_variable;
non terminal multiset_value_constructor;
non terminal sequence_generator_start_value;
non terminal PL_I_type_fixed_decimal;
non terminal extended_statement_name;
non terminal octet_like_predicate;
non terminal derived_representation;
non terminal extract_expression;
non terminal subtype_treatment;
non terminal Unicode_escape_specifier;
non terminal simple_value_specification;
non terminal left_bracket_or_trigraph;
non terminal window_frame_preceding;
non terminal window_function_type;
non terminal deallocate_prepared_statement;
non terminal drop_user_defined_ordering_statement;
non terminal SQL_language_character;
non terminal major_category;
non terminal SQL_dynamic_statement;
non terminal to_sql;
non terminal interval_value_expression;
non terminal alter_column_action;
non terminal string_value_function;
non terminal preparable_implementation_defined_statement;
non terminal embedded_SQL_MUMPS_declare;
non terminal mantissa;
non terminal simple_Latin_lower_case_letter;
non terminal position_expression;
non terminal schema_path_specification;
non terminal PL_I_type_float_binary;
non terminal numeric_value_expression_exponent;
non terminal Fortran_type_specification;
non terminal boolean_literal;
non terminal ordering_category;
non terminal transaction_access_mode;
non terminal grouping_sets_specification;
non terminal insert_statement;
non terminal SQL_parameter_declaration_list;
non terminal multiset_term;
non terminal multiset_value_constructor_by_enumeration;
non terminal returns_data_type;
non terminal literal;
non terminal unsigned_value_specification;
non terminal query_name;
non terminal window_frame_bound;
non terminal contextually_typed_row_value_expression_list;
non terminal Fortran_CLOB_variable;
non terminal drop_schema_statement;
non terminal sequence_generator_min_value;
non terminal window_order_clause;
non terminal Ada_CLOB_variable;
non terminal set_predicate;
non terminal static_method_selection;
non terminal drop_table_statement;
non terminal table_or_query_name;
non terminal cast_operand;
non terminal cast_function;
non terminal from_sql;
non terminal references_specification;
non terminal free_locator_statement;
non terminal session_characteristic;
non terminal module_contents;
non terminal grouping_operation;
non terminal alter_identity_column_option;
non terminal alter_transform_statement;
non terminal privileges;
non terminal null_call_clause;
non terminal execute_immediate_statement;
non terminal savepoint_level_indication;
non terminal drop_transform_element_list;
non terminal as_clause;
non terminal character_set_name_characteristic;
non terminal contextually_typed_table_value_constructor;
non terminal ordinary_grouping_set_list;
non terminal tms_value;
non terminal constraint_check_time;
non terminal level_of_isolation;
non terminal minutes_value;
non terminal COBOL_host_identifier;
non terminal COBOL_BLOB_variable;
non terminal hex_string_literal;
non terminal C_VARCHAR_variable;
non terminal pre;
non terminal simple_target_specification_1;
non terminal simple_target_specification_2;
non terminal array_element_reference;
non terminal merge_when_not_matched_clause;
non terminal SQL_executable_statement;
non terminal disconnect_statement;
non terminal time_value;
non terminal start_field;
non terminal with_or_without_data;
non terminal dynamic_single_row_select_statement;
non terminal common_sequence_generator_option;
non terminal in_predicate_part_2;
non terminal mutated_target;
non terminal alter_domain_statement;
non terminal supertable_clause;
non terminal row_value_predicand;
non terminal character_enumeration_include;
non terminal window_frame_clause;
non terminal like_predicate;
non terminal in_value_list;
non terminal sequence_generator_minvalue_option;
non terminal interval_literal;
non terminal module_collation_specification;
non terminal view_column_option;
non terminal schema_procedure;
non terminal set_transaction_statement;
non terminal insert_columns_and_source;
non terminal savepoint_name;
non terminal exact_numeric_type;
non terminal Pascal_derived_type_specification;
non terminal user_defined_cast_definition;
non terminal row_value_expression_list;
non terminal dependent_variable_expression;
non terminal Fortran_multiset_locator_variable;
non terminal array_type;
non terminal from_sql_function;
non terminal merge_insert_specification;
non terminal factor;
non terminal date_literal;
non terminal Fortran_user_defined_type_locator_variable;
non terminal row_value_predicand_3;
non terminal row_value_predicand_2;
non terminal table_row_value_expression;
non terminal row_value_predicand_4;
non terminal as_subquery_clause;
non terminal column_constraint;
non terminal row_value_predicand_1;
non terminal cast_to_ref_identifier;
non terminal scope_clause;
non terminal dynamic_close_statement;
non terminal year_month_literal;
non terminal SQL_language_identifier;
non terminal non_cycle_mark_value;
non terminal asterisked_identifier_chain;
non terminal referential_action;
non terminal Fortran_array_locator_variable;
non terminal recursive_search_order;
non terminal SQL_invoked_routine;
non terminal approximate_numeric_literal;
non terminal SQL_statement_name;
non terminal schema_name_list;
non terminal SQL_data_access_indication;
non terminal MUMPS_BLOB_variable;
non terminal set_target;
non terminal simple_case;
non terminal condition_information_item;
non terminal assertion_definition;
non terminal interval_qualifier;
non terminal string_length;
non terminal collection_type;
non terminal numeric_value_expression_dividend;
non terminal host_label_identifier;
non terminal MUMPS_user_defined_type_variable;
non terminal method_selection;
non terminal explicit_table;
non terminal regular_view_specification;
non terminal updatability_clause;
non terminal width_bucket_operand;
non terminal role_definition;
non terminal hold_locator_statement;
non terminal MUMPS_host_identifier;
non terminal table_contents_source;
non terminal identifier;
non terminal case_operand;
non terminal window_partition_column_reference;
non terminal set_descriptor_statement;
non terminal referential_triggered_action;
non terminal distinct_predicate;
non terminal interval_fractional_seconds_precision;
non terminal Unicode_escape_character;
non terminal cast_option;
non terminal search_or_cycle_clause;
non terminal module_collation;
non terminal SQL_invoked_procedure;
non terminal COBOL_REF_variable;
non terminal time_string;
non terminal empty_specification;
non terminal exclusive_user_defined_type_specification;
non terminal ordinary_grouping_set;
non terminal output_using_clause;
non terminal view_specification;
non terminal normalize_function;
non terminal multiple_group_specification;
non terminal sequence_column;
non terminal set_path_statement;
non terminal C_NCHAR_VARYING_variable;
non terminal cross_join;
non terminal common_sequence_generator_options;
non terminal approximate_numeric_type;
non terminal revoke_option_extension;
non terminal specific_type_method;
non terminal value_specification;
non terminal cycle_column;
non terminal into_descriptor;
non terminal routine_characteristics;
non terminal grouping_column_reference;
non terminal array_value_expression;
non terminal self_referencing_column_name;
non terminal COBOL_character_type;
non terminal cast_target;
non terminal open_statement;
non terminal drop_table_constraint_definition;
non terminal character_set_specification_list;
non terminal member_name;
non terminal transform_group_characteristic;
non terminal source_data_type;
non terminal quantified_comparison_predicate_part_2;
non terminal binary_set_function_type;
non terminal alter_routine_characteristics;
non terminal SQL_transaction_statement;
non terminal attribute_or_method_reference;
non terminal escape_octet;
non terminal module_transform_group_specification;
non terminal cast_to_ref;
non terminal column_options;
non terminal Pascal_array_locator_variable;
non terminal general_literal;
non terminal module_authorization_clause;
non terminal transliteration_source;
non terminal corresponding_spec;
non terminal SQL_diagnostics_information;
non terminal cast_to_source_identifier;
non terminal sample_method;
non terminal COBOL_user_defined_type_locator_variable;
non terminal data_type_list;
non terminal filter_clause;
non terminal SQL_dynamic_data_statement;
non terminal module_collations;
non terminal cursor_sensitivity;
non terminal sequence_generator_cycle_option;
non terminal row_subquery;
non terminal exact_numeric_literal;
non terminal embedded_SQL_C_program;
non terminal target_table;
non terminal schema_name_clause;
non terminal alter_routine_statement;
non terminal new_invocation;
non terminal domain_constraint;
non terminal boolean_factor;
non terminal privilege_column_list;
non terminal standard_character_set_name;
non terminal system_generated_representation;
non terminal window_name_or_specification;
non terminal non_join_query_term;
non terminal old_or_new_values_alias;
non terminal using_input_descriptor;
non terminal procedure_name;
non terminal contextually_typed_row_value_constructor_element_list;
non terminal doublequote_symbol;
non terminal method_invocation;
non terminal identifier_body;
non terminal role_revoked;
non terminal start_transaction_statement;
non terminal non_second_primary_datetime_field;
non terminal select_target_list;
non terminal row_type_body;
non terminal transcoding;
non terminal MUMPS_CLOB_locator_variable;
non terminal path_resolved_user_defined_type_name;
non terminal collation_specification;
non terminal embedded_character_set_declaration;
non terminal dynamic_delete_statement_positioned;
non terminal all_fields_reference;
non terminal simple_Latin_upper_case_letter;
non terminal subtable_clause;
non terminal transaction_characteristics;
non terminal trigger_action_time;
non terminal old_values_table_alias;
non terminal time_precision;
non terminal set_function_type;
non terminal drop_domain_statement;
non terminal temporary_table_declaration;
non terminal simple_target_specification;
non terminal delimited_identifier_body;
non terminal from_constructor;
non terminal prepare_statement;
non terminal catalog_name_characteristic;
non terminal column_name;
non terminal match_predicate;
non terminal time_zone;
non terminal regular_primary;
non terminal quantifier;
non terminal into_arguments;
non terminal cast_specification;
non terminal multiset_set_function;
non terminal parameter_mode;
non terminal merge_insert_value_list;
non terminal MUMPS_numeric_variable;
non terminal preparable_dynamic_delete_statement_positioned;
non terminal table_reference;
non terminal large_object_length_token;
non terminal rank_function_type;
non terminal regular_expression;
non terminal merge_insert_value_element;
non terminal C_user_defined_type_variable;
non terminal check_constraint_definition;
non terminal nesting_option;
non terminal merge_operation_specification;
non terminal mutated_set_clause;
non terminal drop_view_statement;
non terminal escape_character;
non terminal finality;
non terminal set_transform_group_statement;
non terminal match_predicate_part_2;
non terminal cube_list;
non terminal corresponding_column_list;
non terminal months_value;
non terminal national_character_string_type;
non terminal reference_value_expression;
non terminal schema_resolved_user_defined_type_name;
non terminal C_multiset_locator_variable;
non terminal interval_value_expression_1;
non terminal set_header_information;
non terminal extract_field;
non terminal transaction_mode;
non terminal fold;
non terminal Pascal_variable_definition;
non terminal C_array_locator_variable;
non terminal method_specification_designator;
non terminal large_object_length;
non terminal day_time_literal;
non terminal user_defined_representation;
non terminal Ada_assignment_operator;
non terminal query_expression;
non terminal module_authorization_identifier;
non terminal table_value_constructor;
non terminal reference_scope_check;
non terminal sample_clause;
non terminal connection_object;
non terminal preparable_SQL_session_statement;
non terminal value_expression_primary;
non terminal input_using_clause;
non terminal describe_output_statement;
non terminal add_domain_constraint_definition;
non terminal existing_collation_name;
non terminal Unicode_4_digit_escape_value;
non terminal derived_column_list;
non terminal method_specification;
non terminal alter_routine_behavior;
non terminal MUMPS_type_specification;
non terminal non_join_query_expression;
non terminal add_original_method_specification;
non terminal object_name;
non terminal search_clause;
non terminal term;
non terminal direct_implementation_defined_statement;
non terminal dereference_operation;
non terminal transform_element;
non terminal datetime_factor;
non terminal add_column_scope_clause;
non terminal with_clause;
non terminal unique_specification;
non terminal triggered_action;
non terminal row_value_expression;
non terminal supertable_name;
non terminal row_value_constructor_element;
non terminal embedded_authorization_clause;
non terminal query_term;
non terminal window_definition;
non terminal embedded_SQL_begin_declare;
non terminal regular_identifier;
non terminal ordering_specification;
non terminal aggregate_function;
non terminal national_character_string_literal;
non terminal non_escaped_character;
non terminal insertion_target;
non terminal sequence_generator_data_type_option;
non terminal table_function_column_list;
non terminal query_primary;
non terminal simple_comment;
non terminal SQL_schema_manipulation_statement;
non terminal column_option_list;
non terminal Fortran_BLOB_locator_variable;
non terminal double_colon;
non terminal grouping_set_list;
non terminal similar_predicate_part_2;
non terminal like_clause;
non terminal preparable_SQL_schema_statement;
non terminal digit;
non terminal with_or_without_time_zone;
non terminal set_connection_statement;
non terminal datetime_literal;
non terminal next_value_expression;
non terminal octet_pattern;
non terminal set_role_statement;
non terminal PL_I_variable_definition;
non terminal host_parameter_declaration_list;
non terminal MUMPS_derived_type_specification;
non terminal bracketed_comment_introducer;
non terminal specific_name;
non terminal SQL_condition;
non terminal using_arguments;
non terminal identifier_start;
non terminal select_sublist;
non terminal datetime_value_function;
non terminal concatenation_operator;
non terminal local_qualified_name;
non terminal PL_I_BLOB_locator_variable;
non terminal nonparenthesized_value_expression_primary;
non terminal some;
non terminal relative_category;
non terminal character_specifier;
non terminal local_qualifier;
non terminal boolean_primary;
non terminal grouping_set;
non terminal path_specification;
non terminal drop_transliteration_statement;
non terminal target_array_element_specification;
non terminal multiple_column_assignment;
non terminal delete_statement_positioned;
non terminal set_session_user_identifier_statement;
non terminal trigger_event;
non terminal window_frame_extent;
non terminal connection_name;
non terminal contextually_typed_row_value_constructor;
non terminal preparable_SQL_control_statement;
non terminal connection_user_name;
non terminal instantiable_clause;
non terminal set_constraints_mode_statement;
non terminal simple_value_specification_2;
non terminal character_set_name;
non terminal simple_value_specification_1;
non terminal alter_domain_action;
non terminal scope_option;
non terminal merge_statement;
non terminal time_zone_interval;
non terminal interval_primary;
non terminal alter_sequence_generator_statement;
non terminal routine_body;
non terminal transform_group_element;
non terminal alter_transform_action_list;
non terminal row_type;
non terminal module_path_specification;
non terminal SQL_data_statement;
non terminal Fortran_host_identifier;
non terminal length;
non terminal type_predicate_part_2;
non terminal seconds_fraction;
non terminal sort_specification;
non terminal sequence_generator_start_with_option;
non terminal describe_statement;
non terminal window_function;
non terminal field_name;
non terminal table_function_derived_table;
non terminal sequence_generator_restart_value;
non terminal member_name_alternatives;
non terminal Pascal_type_specification;
non terminal fetch_statement;
non terminal revoke_statement;
non terminal subtype_clause;
non terminal dynamic_cursor_name;
non terminal add_column_definition;
non terminal table_value_constructor_by_query;
non terminal window_partition_column_reference_list;
non terminal character_like_predicate_part_2;
non terminal described_object;
non terminal repeat_factor;
non terminal table_element_list;
non terminal translation_definition;
non terminal date_value;
non terminal timestamp_value ;
non terminal field_definition;
non terminal contextually_typed_row_value_expression;
non terminal SQLSTATE_subclass_value;
non terminal extract_source;
non terminal blob_trim_operands;
non terminal character_enumeration;
non terminal Ada_host_identifier;
non terminal with_list_element;
non terminal get_header_information;
non terminal only_spec;
non terminal interval_leading_field_precision;
non terminal drop_role_statement;
non terminal SQL_prefix;
non terminal numeric_type;
non terminal drop_transform_statement;
non terminal savepoint_statement;
non terminal identifier_part;
non terminal multiset_type;
non terminal qualified_asterisk;
non terminal basic_sequence_generator_option;
non terminal C_derived_variable;
non terminal schema_name_characteristic;
non terminal dynamic_declare_cursor;
non terminal domain_definition;
non terminal collation_definition;
non terminal SQL_special_character;
non terminal SQL_language_identifier_start;
non terminal self_referencing_column_specification;
non terminal blob_primary;
non terminal alter_column_definition;
non terminal condition_number;
non terminal schema_function;
non terminal PL_I_multiset_locator_variable;
non terminal SQL_routine_body;
non terminal time_literal;
non terminal timestamp_string;
non terminal with_column_list;
non terminal assigned_row;
non terminal SQL_terminal_character;
non terminal default_option;
non terminal SQL_argument;
non terminal cursor_attributes;
non terminal Pascal_multiset_locator_variable;
non terminal drop_collation_statement;
non terminal embedded_collation_specification;
non terminal directly_executable_statement;
non terminal unsigned_literal;
non terminal null_predicate_part_2;
non terminal insert_column_list;
non terminal member_list;
non terminal member;
non terminal merge_when_clause;
non terminal empty_grouping_set;
non terminal blob_factor;
non terminal natural_logarithm;
non terminal target_character_set_specification;
non terminal C_class_modifier;
non terminal character_set_definition;
non terminal window_frame_bound_1;
non terminal hypothetical_set_function;
non terminal equals_ordering_form;
non terminal character_factor;
non terminal drop_column_scope_clause;
non terminal current_timestamp_value_function;
non terminal direct_select_statement_multiple_rows;
non terminal truth_value;
non terminal set_clause;
non terminal embedded_SQL_COBOL_program;
non terminal octet_like_predicate_part_2;
non terminal preparable_dynamic_update_statement_positioned;
non terminal condition_action;
non terminal SQL_statement_variable;
non terminal rights_clause;
non terminal sequence_generator_increment;
non terminal common_value_expression;
non terminal generation_clause;
non terminal host_variable_definition;
non terminal external_body_reference;
non terminal simple_Latin_letter;
non terminal savepoint_clause;
non terminal COBOL_array_locator_variable;
non terminal window_frame_bound_2;
non terminal goto_target;
non terminal dereference_operator;
non terminal view_column_list;
non terminal MUMPS_BLOB_locator_variable;
non terminal target_data_type;
non terminal sign;
non terminal MUMPS_CLOB_variable;
non terminal get_diagnostics_statement;
non terminal date_string;
non terminal in_line_window_specification;
non terminal statement_information_item_name;
non terminal length_expression;
non terminal get_item_information;
non terminal embedded_authorization_declaration;
non terminal quote_symbol;
non terminal floor_function;
non terminal specific_method_name;
non terminal default_clause;
non terminal SQL_invoked_function;
non terminal parameter_type;
non terminal interval_type;
non terminal regular_character_set;
non terminal character_set_specification;
non terminal blob_position_expression;
non terminal join_column_list;
non terminal pad_characteristic;
non terminal dynamic_open_statement;
non terminal separator;
non terminal distinct_predicate_part_2;
non terminal Unicode_delimited_identifier;
non terminal row_value_constructor_predicand;
non terminal asterisked_identifier;
non terminal user_defined_ordering_definition;
non terminal bracketed_comment_contents;
non terminal type_predicate;
non terminal drop_method_specification;
non terminal comp_op;
non terminal static_method_invocation;
non terminal repeatable_clause;
non terminal MUMPS_user_defined_type_locator_variable;
non terminal generalized_invocation;
non terminal computational_operation;
non terminal COBOL_nines_specification;
non terminal identity_column_specification;
non terminal embedded_SQL_host_program;
non terminal window_frame_start;
non terminal table_reference_list;
non terminal similar_predicate;
non terminal primary_datetime_field;
non terminal transliteration_definition;
non terminal alter_table_action;
non terminal unquoted_interval_string;
non terminal inclusive_user_defined_type_specification;
non terminal day_time_interval;
non terminal full_ordering_form;
non terminal merge_update_specification;
non terminal routine_name;
non terminal contextually_typed_row_value_constructor_element;
non terminal numeric_value_expression;
non terminal repeat_argument;
non terminal schema_character_set_or_path;
non terminal square_root;
non terminal collection_derived_table;
non terminal embedded_variable_name;
non terminal alter_sequence_generator_restart_option;
non terminal add_transform_element_list;
non terminal basic_identifier_chain;
non terminal absolute_value_expression;
non terminal SQL_path_characteristic;
non terminal indicator_parameter;
non terminal method_specification_list;
non terminal sequence_generator_increment_by_option;
non terminal simple_when_clause;
non terminal window_partition_clause;
non terminal table_constraint;
non terminal SQL_schema_statement;
non terminal null_specification;
non terminal set_schema_statement;
non terminal multiset_value_constructor_by_query;
non terminal character_value_function;
non terminal transform_definition;
non terminal object_column;
non terminal add_attribute_definition;
non terminal window_frame_exclusion;
non terminal alter_type_statement;
non terminal diagnostics_size;
non terminal occurrences;
non terminal Pascal_REF_variable;
non terminal parenthesized_value_expression;
non terminal identity_option;
non terminal system_descriptor_statement;
non terminal character_value_expression;
non terminal array_value_constructor_by_enumeration;
non terminal schema_element;
non terminal grantee;
non terminal statement_information;
non terminal table_name;
non terminal MUMPS_array_locator_variable;
non terminal char_length_units;
non terminal predicate;
non terminal inverse_distribution_function_type;
non terminal in_predicate;
non terminal time_zone_field;
non terminal sequence_generator_max_value;
non terminal specific_routine_designator;
non terminal new_values_table_alias;
non terminal sample_percentage;
non terminal return_statement;
non terminal character_transliteration;
non terminal case_specification;
non terminal array_value_constructor;
non terminal overlaps_predicate;
non terminal schema_routine;
non terminal user_defined_type_body;
non terminal SQLSTATE_char;
non terminal independent_variable_expression;
non terminal bracketed_comment;
non terminal preparable_SQL_data_statement;
non terminal case_abbreviation;
non terminal Ada_qualified_type_specification;
non terminal set_target_list;
non terminal Ada_multiset_locator_variable;
non terminal query_expression_body;
non terminal DQUOTE;
non terminal modulus_expression;
non terminal width_bucket_count;
non terminal set_domain_default_clause;
non terminal SQL_argument_list;
non terminal overlaps_predicate_part_2;
non terminal overlaps_predicate_part_1;
non terminal correlation_name;
non terminal attribute_default;
non terminal set_names_statement;
non terminal simple_comment_introducer;
non terminal group_specification;
non terminal sup;
non terminal rollback_statement;
non terminal ref_cast_option;
non terminal result_cast_from_type;
non terminal character_enumeration_exclude;
non terminal general_set_function;
non terminal match_type;
non terminal in_predicate_value;
non terminal Fortran_BLOB_variable;
non terminal similar_pattern;
non terminal having_clause;
non terminal multiset_element_reference;
non terminal view_element_list;
non terminal SQL_data_change_statement;
non terminal COBOL_NCLOB_variable;
non terminal declare_cursor;
non terminal column_constraint_definition;
non terminal execute_statement;
non terminal schema_qualified_routine_name;
non terminal set_column_default_clause;
non terminal returns_type;
non terminal dispatch_clause;
non terminal table_commit_action;
non terminal update_statement_searched;
non terminal COBOL_BLOB_locator_variable;
non terminal Unicode_character_escape_value;
non terminal user_identifier;
non terminal get_descriptor_statement;
non terminal current_local_timestamp_value_function;
non terminal column_name_list;
non terminal direct_SQL_statement;
non terminal unqualified_schema_name;
non terminal C_user_defined_type_locator_variable;
non terminal single_datetime_field;
non terminal from_default;
non terminal grant_statement;
non terminal user_defined_character_set_name;
non terminal inverse_distribution_function_argument;
non terminal reference_generation;
non terminal disconnect_object;
non terminal COBOL_integer_type;
non terminal embedded_exception_declaration;
non terminal SQL_diagnostics_statement;
non terminal Pascal_CLOB_variable;
non terminal Unicode_escape_value;
non terminal window_specification_details;
non terminal Ada_BLOB_variable;
non terminal PL_I_CLOB_locator_variable;
non terminal multiplier;
non terminal grant_privilege_statement;
non terminal drop_behavior;
non terminal merge_correlation_name;
non terminal identifier_extend;
non terminal Unicode_delimiter_body;
non terminal language_clause;
non terminal dynamic_select_statement;
non terminal method_reference;
non terminal parameter_using_clause;
non terminal years_value;
non terminal target_subtype;
non terminal column_definition;
non terminal table_scope;
non terminal search_condition;
non terminal sequence_generator_name;
non terminal identifier_chain;
non terminal transform_element_list;
non terminal allocate_cursor_statement;
non terminal order_by_clause;
non terminal hours_value;
non terminal cursor_attribute;
non terminal reference_scope_check_action;
non terminal new_values_correlation_name;
non terminal fetch_target_list;
non terminal user_defined_type_option;
non terminal interval_value_function;
non terminal PL_I_derived_type_specification;
non terminal trigger_name;
non terminal indicator_variable;
non terminal select_list;
non terminal right_arrow;
non terminal set_session_characteristics_statement;
non terminal C_NCHAR_variable;
non terminal regular_character_set_identifier;
non terminal boolean_type;
non terminal collection_value_constructor;
non terminal explicit_row_value_constructor;
non terminal group_by_clause;
non terminal binary_set_function;
non terminal outer_join_type;
non terminal old_values_correlation_name;
non terminal join_condition;
non terminal trim_octet;
non terminal datetime_term;
non terminal partial_method_specification;
non terminal comment;
non terminal result_set_cursor;
non terminal embedded_SQL_Ada_program;
non terminal user_defined_type_value_expression;
non terminal grouping_element_list;
non terminal Fortran_CLOB_locator_variable;
non terminal character_primary;
non terminal derived_column;
non terminal COBOL_derived_type_specification;
non terminal embedded_SQL_Pascal_program;
non terminal end_field;
non terminal fetch_orientation;
non terminal domain_name;
non terminal drop_column_definition;
non terminal non_reserved_word;
non terminal schema_authorization_identifier;
non terminal constraint_name_definition;
non terminal drop_domain_default_clause;
non terminal cursor_scrollability;
non terminal array_element;
non terminal table_element;
non terminal external_security_clause;
non terminal authorization_identifier;
non terminal delimiter_token;
non terminal array_concatenation;
non terminal sort_key;
non terminal submultiset_predicate_part_2;
non terminal datetime_value_expression;
non terminal PL_I_user_defined_type_variable;
non terminal COBOL_nines;
non terminal trigger_column_list;
non terminal nondoublequote_character;
non terminal concatenation;
non terminal externally_invoked_procedure;
non terminal grouping_column_reference_list;
non terminal between_predicate_part_2;
non terminal all_fields_column_name_list;
non terminal lateral_derived_table;
non terminal Ada_BLOB_locator_variable;
non terminal cursor_specification;
non terminal attributes_specification;
non terminal PL_I_type_fixed_binary;
non terminal quantified_comparison_predicate;
non terminal natural_join;
non terminal high_value;
non terminal set_local_time_zone_statement;
non terminal multiset_value_expression;
non terminal set_descriptor_information;
non terminal C_character_variable;
non terminal table_primary_or_joined_table;
non terminal sort_specification_list;
non terminal supertype_name;
non terminal numeric_value_expression_base;
non terminal grantor;
non terminal Unicode_6_digit_escape_value;
non terminal between_predicate;
non terminal C_CLOB_variable;
non terminal blob_concatenation;
non terminal multiset_value_function;
non terminal SQL_schema_definition_statement;
non terminal interval_term_1;
non terminal SQL_routine_spec;
non terminal interval_term_2;
non terminal existing_transliteration_name;
non terminal PL_I_REF_variable;
non terminal window_name;
non terminal new_specification;
non terminal comparison_predicate_part_2;
non terminal null_ordering;
non terminal character_set_source;
non terminal statement_name;
non terminal Ada_unqualified_type_specification;
non terminal generation_expression;
non terminal user_defined_type_option_list;
non terminal schema_definition;
non terminal SQL_terminator;
non terminal token;
non terminal numeric_primary;
non terminal drop_domain_constraint_definition;
non terminal trigger_definition;
non terminal datetime_value;
non terminal actual_identifier;
non terminal from_clause;
non terminal embedded_SQL_MUMPS_program;
non terminal embedded_SQL_end_declare;
non terminal blob_value_function;
non terminal else_clause;
non terminal statement_information_item;
non terminal where_clause;
non terminal subquery;
non terminal table_definition;
non terminal attribute_definition;
non terminal string_value_expression;
non terminal select_statement_single_row;
non terminal low_value;
non terminal parameter_style;
non terminal transliteration_name;
non terminal SQL_connection_statement;
non terminal trim_specification;
non terminal table_primary;
non terminal reserved_word;
non terminal original_method_specification;
non terminal embedded_path_specification;
non terminal method_name;
non terminal module_name_clause;
non terminal dynamic_fetch_statement;
non terminal add_overriding_method_specification;
non terminal preparable_SQL_transaction_statement;
non terminal exponent;
non terminal column_reference;
non terminal join_type;
non terminal numeric_value_function;
non terminal constraint_name;
non terminal time_fractional_seconds_precision;
non terminal case_expression;
non terminal alter_sequence_generator_option;
non terminal direct_invocation;
non terminal collation_name;
non terminal target_array_reference;
non terminal set_session_collation_statement;
non terminal set_catalog_statement;
non terminal window_frame_between;
non terminal release_savepoint_statement;
non terminal Ada_initial_value;
non terminal target_specification;
non terminal method_characteristics;
non terminal cursor_name;
non terminal dynamic_parameter_specification;
non terminal condition_information_item_name;
non terminal path_column;
non terminal drop_user_defined_cast_statement;
non terminal overlaps_predicate_part;
non terminal exponential_function;
non terminal scalar_subquery;
non terminal current_date_value_function;
non terminal character_overlay_function;
non terminal list_of_attributes;
non terminal scale;
non terminal PL_I_CLOB_variable;
non terminal statement_or_declaration;
non terminal days_value;
non terminal to_sql_function;
non terminal transform_group;
non terminal update_source;
non terminal revoke_role_statement;
non terminal result_using_clause;
non terminal embedded_authorization_identifier;
non terminal union_join;
non terminal host_parameter_specification;
non terminal array_value_constructor_by_query;
non terminal character_pattern;
non terminal SQL_language_identifier_part;
non terminal returns_clause;
non terminal privilege_method_list;
non terminal connect_statement;
non terminal maximum_dynamic_result_sets;
non terminal routine_characteristic;
non terminal unique_predicate;
non terminal boolean_value_expression;
non terminal power_function;
non terminal trim_character;
non terminal sequence_generator_options;
non terminal handler_declaration;
non terminal embedded_variable_specification;
non terminal character_representation;
non terminal isolation_level;
non terminal alter_type_action;
non terminal descriptor_item_name;
non terminal timestamp_literal;
non terminal contextually_typed_value_specification;
non terminal joined_table;
non terminal view_definition;
non terminal window_definition_list;
non terminal generation_rule;
non terminal set_predicate_part_2;
non terminal row_value_special_case;
non terminal drop_data_type_statement;
non terminal Unicode_character_string_literal;
non terminal unique_column_list;
non terminal cardinality_expression;
non terminal octet_length_expression;
non terminal rollup_list;
non terminal column_default_option;
non terminal Pascal_user_defined_type_locator_variable;
non terminal table_constraint_definition;
non terminal unsigned_integer;

non terminal sql_statement ;
non terminal sql_ddl , sql_dml ;
non terminal sql_cursor ;

non terminal sql_cursor_declare    ;
non terminal sql_cursor_open ;
non terminal sql_cursor_close ;
non terminal sql_cursor_fetch ;

non terminal sql_delete ;
non terminal delete_type ;
non terminal delete_cursor_type ;
non terminal clause_where ;

non terminal cursor_sensitivity_opt ;           
non terminal cursor_scrollability_opt ;
non terminal cursor_holdability_opt ;
non terminal cursor_returnability_opt ;
non terminal order_by_clause_opt ;
non terminal updatability_clause_opt ;
non terminal time_zone_interval_opt ;
non terminal month_opt ;
non terminal seconds_fraction_opt ;
non terminal seconds_fraction_opt2 ;
non terminal time_interval_opt ;

non terminal cursor_holdability_returnability_opt ;
non terminal cursor_holdability_returnability_lst ;
non terminal cursor_holdability_returnability     ;

non terminal updatability_opc ;
non terminal updatability_opc_opt ;

non terminal recursive_opt ;
non terminal with_column_list_opt ;
non terminal search_or_cycle_clause_opt ;
non terminal cycle_clause_opt ;
non terminal all_distinct_opt ;
non terminal union_or_except ;
non terminal corresponding_spec_opt ;
non terminal corresponding_spec_by_opt ;
non terminal not_opt ;
non terminal from_opt ;
non terminal symmetric_opt ;
non terminal escape_opt ;
non terminal upper_limit_opt ;
non terminal high_value_opt ;
non terminal character_enum_list ;
non terminal unique_opt ;
non terminal simple_opt ;
non terminal of_opt ;
non terminal sign_opt ;
non terminal introduce_opt ;
non terminal decimal_part ;
non terminal decimal_part_opt ;
non terminal interval_leading_field_precision_opt ;
non terminal interval_fractional_seconds_precision_opt ;
non terminal interval_leading_field_precision_opt2 ;
non terminal unsigned_integer_opt ;

non terminal escape_octet_opt ;

non terminal fetch_orientation_opt ;
non terminal fetch_orientation_pos ;
non terminal fetch_orientation_from ;

non terminal indicator_opt ;
non terminal indicator_variable_opt ;
non terminal truth_value_opt ;

non terminal column_list ;

/* YYYY */

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*                        INICIO PARSER                               */
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

sql_statement ::=  sql_ddl
              |    sql_dml
              ; 


sql_ddl ::= NADA
        ;
        
sql_dml ::= sql_cursor
        |   sql_delete
        ;        

        
sql_cursor ::= sql_cursor_declare
           |   sql_cursor_open            
           |   sql_cursor_close
           |   sql_cursor_fetch 
           ;

      
sql_cursor_open  ::= OPEN  cursor_name
                 ;
           
sql_cursor_close ::= CLOSE  cursor_name
                 ;
                 
sql_cursor_fetch  ::= FETCH fetch_orientation_opt from_opt  cursor_name  INTO  fetch_target_list
                  ;

fetch_orientation_opt ::= fetch_orientation
                      |
                      ;                        
 
fetch_orientation  ::= NEXT
                   |   PRIOR
                   |   FIRST
                   |   LAST
                   |   fetch_orientation_pos
                   ;
                   
fetch_orientation_pos ::= fetch_orientation_from  simple_value_specification
                      ; 
                                       
fetch_orientation_from ::= ABSOLUTE 
                       |   RELATIVE
                       ; 
                       

fetch_target_list  ::=  target_specification  
                   |    fetch_target_list COMMA target_specification
                   ;
                 
sql_cursor_declare  ::= DECLARE  cursor_name  cursor_sensitivity_opt cursor_scrollability_opt CURSOR
                                 cursor_holdability_returnability_opt 
                                 FOR  cursor_specification
                    ; 

cursor_sensitivity_opt ::= cursor_sensitivity     
                       |
                       ;
                        
cursor_scrollability_opt ::= cursor_scrollability     
                       |
                       ;
                       
cursor_holdability_opt ::= cursor_holdability
                       |
                       ;                       

cursor_returnability_opt ::= cursor_returnability
                         |
                         ;
                         
cursor_specification  ::=  query_expression order_by_clause_opt updatability_clause_opt
                      ; 
                         
order_by_clause_opt ::= order_by_clause
                    |
                    ;
                                             
updatability_clause_opt ::= updatability_clause
                        |
                        ;

updatability_clause  ::= FOR updatability_opc
                     ;
                     
updatability_opc ::=  READ ONLY 
                 |    UPDATE updatability_opc_opt
                 ;
                 
updatability_opc_opt ::= OF  column_name_list
                     ;
                                      
                         
cursor_sensitivity  ::= SENSITIVE 
                    |   INSENSITIVE 
                    |   ASENSITIVE
                    ;

cursor_scrollability  ::= SCROLL 
                      |   NO SCROLL
                      ;

cursor_holdability_returnability_opt ::= cursor_holdability_returnability_lst
                                     |
                                     ;

/* WITH (OUT) HOLD y RETURN */

cursor_holdability_returnability_lst ::= cursor_holdability_returnability
                                     |   cursor_holdability_returnability_lst cursor_holdability_returnability
                                     ;
                                                                           
 cursor_holdability_returnability  ::= WITH
                                   |   WITHOUT
                                   |   HOLD
                                   |   RETURN
                                   ;

cursor_name  ::=  local_qualified_name
             ; 

/**********************************************************************/
/* DELETE                                                            */
/**********************************************************************/

sql_delete ::= DELETE FROM  target_table delete_type
           ;
           
delete_type ::= WHERE CURRENT OF delete_cursor_type
            |   clause_where
            ;
            
delete_cursor_type ::= cursor_name
                   |   dynamic_cursor_name
                   ;
                   
target_table ::= table_name 
             |   ONLY  LPAR   table_name   RPAR
             ; 

/**********************************************************************/
/* WHERE AND SEARCH                                                   */
/**********************************************************************/

clause_where ::= WHERE search_condition
             |
             ; 

search_condition ::=  boolean_value_expression
                  ; 

boolean_value_expression ::=  boolean_term 
                         |    boolean_value_expression  OR  boolean_term
                         ;  
 
boolean_term ::= boolean_factor 
             |   boolean_term  AND  boolean_factor
             ; 

boolean_factor ::= not_opt  boolean_test
               ; 

boolean_test ::=  boolean_primary  truth_value_opt
             ; 

truth_value ::= TRUE 
            |   FALSE 
            |   UNKNOWN
            ;
 
boolean_primary ::=  predicate  
                |    boolean_predicand
                ; 
 
boolean_predicand ::= parenthesized_boolean_value_expression 
                  |    nonparenthesized_value_expression_primary
                  ;  
 
parenthesized_boolean_value_expression ::=  LPAR   boolean_value_expression   RPAR
                                       ;
                                       
nonparenthesized_value_expression_primary ::= unsigned_value_specification 
                                          |    column_reference 
                                          |    set_function_specification 
//     |    window_function 
                                          |    scalar_subquery 
                                          |    case_expression 
                                          |    cast_specification 
                                          |    field_reference 
                                          |    subtype_treatment 
//     |    method_invocation 
//     |    static_method_invocation 
//     |    new_specification 
//     |    attribute_or_method_reference 
//     |    reference_resolution 
//     |    collection_value_constructor 
                                          |    array_element_reference 
                                          |    multiset_element_reference 
                                          |    routine_invocation 
                                          |    next_value_expression 
                                          ;
 
value_specification  ::=  literal  
                     |  general_value_specification
                     ; 
 
unsigned_value_specification ::=  unsigned_literal  
                             |    general_value_specification
                             ;
    
unsigned_literal ::=  unsigned_numeric_literal  
                 |    general_literal
                 ;
                  
general_literal  ::= character_string_literal 
//               |    national_character_string_literal 
//               |    Unicode_character_string_literal 
//               |    binary_string_literal 
                 |    datetime_literal 
                 |    interval_literal 
                 |    boolean_literal 
                 ;
                  
literal ::=  signed_numeric_literal  
        |    general_literal
        ;

/*        
character_string_literal  ::= introducer_opt 
--X          QUOTE  [  character_representation ... ]  QUOTE 
--X         [ {  separator   QUOTE  [  character_representation ... ]  QUOTE  }... ]
--X 
*/

introduce_opt ::= introducer character_set_specification
              |
              ;
              
introducer ::=  UNDERSCORE
           ;
            

character_set_specification ::= character_set_name
                            ;
                            
/*                            
character_set_specification ::= standard_character_set_name 
                            |   implementation_defined_character_set_name 
                            |    user_defined_character_set_name
                            ; 
 
standard_character_set_name  ::=  character_set_name 
                             ;
                             
implementation_defined_character_set_name ::=  character_set_name 
                                          ;
                                           
user_defined_character_set_name ::=  character_set_name
                                ; 
*/

character_representation ::=  nonquote_character  
                         |  quote_symbol
                         ; 
 
nonquote_character ::= ID
                    ;
                    
quote_symbol ::=  QUOTE  QUOTE
             ;
             
signed_numeric_literal  ::= sign_opt unsigned_numeric_literal
                        ;
                         
unsigned_numeric_literal  ::=  exact_numeric_literal  
                          |  approximate_numeric_literal
                          ;
                           
exact_numeric_literal  ::= unsigned_integer  decimal_part_opt
                       |   decimal_part
                       ;

decimal_part_opt ::= decimal_part
                 |
                 ;
                                        
decimal_part ::= DOT unsigned_integer_opt
             ;

unsigned_integer_opt ::= unsigned_integer
                     |
                     ;             

sign_opt ::= sign
         |
         ;
         
sign ::= PLUS  
     |   MINUS
     ;
      
 
// approximate_numeric_literal  ::=  mantissa  E  exponent
approximate_numeric_literal  ::=  FLOAT
                             ;
    
mantissa  ::=  exact_numeric_literal
          ; 
 
exponent  ::=  signed_integer 
          ;
          
signed_integer  ::= sign_opt  unsigned_integer
                ; 

general_value_specification ::= host_parameter_specification 
                            |    SQL_parameter_reference 
                            |    dynamic_parameter_specification 
                            |    embedded_variable_specification 
                            |    current_collation_specification 
                            |   CURRENT_DEFAULT_TRANSFORM_GROUP
                            |  CURRENT_PATH
                            |   CURRENT_ROLE
                            |   CURRENT_TRANSFORM_GROUP_FOR_TYPE  path_resolved_user_defined_type_name 
                            |   CURRENT_USER
                            |   SESSION_USER
                            |   SYSTEM_USER
                            |   USER
                            |   VALUE
                            ; 

simple_target_specification  ::= host_parameter_specification 
//     |    SQL_parameter_reference 
                             |    column_reference 
                             |    embedded_variable_name
                             ; 
 
current_collation_specification ::= CURRENT_COLLATION  LPAR   string_value_expression   RPAR
                                ; 
                                
contextually_typed_value_specification ::= implicitly_typed_value_specification  
                                       |  default_specification
                                       ; 

implicitly_typed_value_specification ::=  null_specification  
                                     |  empty_specification
                                     ; 
 
null_specification ::= NULL
                   ;
                   
empty_specification ::= ARRAY  LBRA RBRA 
                    |   MULTISET  LBRA RBRA
                    ;
                      
default_specification ::= DEFAULT
                      ;
set_function_specification ::=  aggregate_function  
                           |    grouping_operation 
                           ;
                             
grouping_operation ::= GROUPING  LPAR   column_list  RPAR
                   ; 
                                      
column_list ::= column_reference
            |   column_list COMMA column_reference
            ;                                       
                                        
/**********************************************************************/
/* NOMBRES                                                           */
/**********************************************************************/

local_qualified_name  ::= local_qualifier  qualified_identifier
                      ; 

local_qualifier  ::= MODULE DOT
                 |
                 ; 

qualified_identifier  ::=  identifier
                      ;
          
identifier ::= ID
           ;
                     /*
identifier ::=  actual_identifier 
            ;
            */
actual_identifier  ::= regular_identifier  
                   |   delimited_identifier
                   ; 

/* regular_identifier  ::=  identifier_body */ 
regular_identifier  ::=  ID
                    ;

delimited_identifier  ::=  DQUOTE   delimited_identifier_body   DQUOTE 
                      ;

delimited_identifier_body ::= ID
                          ;

/*

 delimited_identifier_body  ::=  delimited_identifier_part ... 

 delimited_identifier_part  ::=  nondoublequote_character  |  doublequote_symbol 


 identifier_body  ::=  identifier_start  [  identifier_part ... ]

 identifier_part  ::=  identifier_start  |  identifier_extend 


 identifier_start  ::= !! See the Syntax Rules.

 identifier_extend  ::= !! See the Syntax Rules.
          
*/                   
 /**********************************************************************/
 /* ORDER BY                                                           */
 /**********************************************************************/
 
 order_by_clause  ::= ORDER BY sort_specification_list
                  ;
                  
 sort_specification_list  ::=  sort_specification 
                          |    sort_specification_list COMMA sort_specification
                          ;

 sort_specification  ::=  sort_key  ordering_specification  null_ordering  
                     ;
                     

 sort_key  ::=  value_expression
           ;  

 ordering_specification  ::= ASC 
                         |   DESC
                         |
                         ;            
             
 null_ordering  ::= NULLS FIRST 
                |   NULLS LAST
                |
                ;

/**********************************************************************/
/* COLUMNAS                                                           */
/**********************************************************************/
 
 column_name_list  ::=  column_name  
                   |    column_name_list COMMA column_name
                   ;
 

/**********************************************************************/
/* QUERY                                                              */
/**********************************************************************/
 
query_expression  ::= with_clause  query_expression_body
                  ; 

with_clause  ::= WITH recursive_opt  with_list
              |
              ;
              
recursive_opt ::= RECURSIVE
              |
              ; 

with_list  ::=  with_list_element  
           |    with_list COMMA with_list_element
           ;

with_list_element  ::= query_name  with_column_list_opt 
                                   AS LPAR query_expression RPAR  
                                   search_or_cycle_clause_opt
                   ;
                   
with_column_list_opt ::= LPAR with_column_list RPAR
                     ;                   
                     
with_column_list  ::=  column_name_list 
                  ;
                   
query_expression_body  ::=  non_join_query_expression  
                       |    joined_table
                       ; 

non_join_query_expression  ::= non_join_query_term 
                           |   query_expression_body  union_or_except all_distinct_opt corresponding_spec_opt  query_term 
                           ; 

union_or_except ::= UNION
                |   EXCEPT
                ;
                
query_term  ::= non_join_query_term  
            |   joined_table
            ; 

non_join_query_term  ::= non_join_query_primary 
                     |  query_term  INTERSECT all_distinct_opt corresponding_spec_opt  query_primary
                     ; 

query_primary  ::= non_join_query_primary  
               |   joined_table
               ; 

non_join_query_primary ::= simple_table  
                       |   LPAR non_join_query_expression RPAR
                       ; 

simple_table ::= query_specification 
             |   table_value_constructor 
             |   explicit_table
             ; 

explicit_table  ::= TABLE table_or_query_name
                ; 

corresponding_spec_opt ::= corresponding_spec
                       |
                       ;
                       
corresponding_spec  ::= CORRESPONDING corresponding_spec_by_opt 
                    ; 

corresponding_spec_by_opt ::= BY  LPAR   corresponding_column_list   RPAR
                          |
                          ;
                           
corresponding_column_list  ::=  column_name_list
                           ; 


search_or_cycle_clause_opt ::= search_or_cycle_clause
                           |
                           ;
                            
search_or_cycle_clause  ::=  search_clause cycle_clause_opt 
                        |    cycle_clause 
                        ;
                        
search_clause  ::= SEARCH  recursive_search_order  SET  sequence_column
               ; 

recursive_search_order  ::= DEPTH FIRST BY  sort_specification_list 
                        |   BREADTH FIRST BY  sort_specification_list
                        ; 

sequence_column  ::=  column_name
                 ;
                  

cycle_clause_opt ::= cycle_clause
                |
                ;
                
cycle_clause  ::= CYCLE cycle_column_list 
                         SET  cycle_mark_column  TO  cycle_mark_value 
                         DEFAULT  non_cycle_mark_value 
                         USING  path_column
              ; 

cycle_column_list  ::=  cycle_column
                   |    cycle_column_list COMMA cycle_column
                   ;

cycle_column  ::=  column_name
              ; 

cycle_mark_column  ::=  column_name
                   ; 

path_column  ::=  column_name
             ; 

cycle_mark_value  ::=  value_expression
                  ; 

non_cycle_mark_value  ::=  value_expression
                      ; 

scalar_subquery  ::=  subquery
                 ; 

row_subquery  ::=  subquery
              ; 

table_subquery  ::=  subquery
                ; 

subquery  ::=  LPAR   query_expression   RPAR 
          ; 

/**********************************************************************/
/* PREDICADO                                                          */
/**********************************************************************/

predicate  ::= comparison_predicate 
           |    between_predicate 
           |    in_predicate 
           |    like_predicate 
           |    similar_predicate 
           |    null_predicate 
           |    quantified_comparison_predicate 
           |    exists_predicate 
           |    unique_predicate 
           |    normalized_predicate 
           |    match_predicate 
           |    overlaps_predicate 
           |    distinct_predicate 
           |    member_predicate 
           |    submultiset_predicate 
           |    set_predicate 
           |    type_predicate 
           ;

comparison_predicate  ::=  row_value_predicand   comparison_predicate_part_2
                      ; 

comparison_predicate_part_2  ::=  comp_op  row_value_predicand
                             ; 
comp_op  ::= EQUAL 
         |    NE 
         |    LT 
         |    GT 
         |    LE 
         |    GE
         ; 

between_predicate  ::=  row_value_predicand   between_predicate_part_2
                   ; 

between_predicate_part_2  ::= not_opt BETWEEN symmetric_opt  row_value_predicand  
                                      AND  row_value_predicand
                          ; 

in_predicate  ::=  row_value_predicand   in_predicate_part_2
              ;  

in_predicate_part_2  ::= not_opt IN  in_predicate_value
                     ; 

in_predicate_value  ::= table_subquery 
                    |  LPAR   in_value_list   RPAR
                    ; 

in_value_list  ::=  row_value_expression  
               |    in_value_list COMMA   row_value_expression 
               ;

like_predicate  ::= character_like_predicate  
                |   octet_like_predicate
                ; 

character_like_predicate  ::=  row_value_predicand   character_like_predicate_part_2
                          ; 

character_like_predicate_part_2  ::= not_opt LIKE  character_pattern  escape_opt
                                 ;

character_pattern  ::=  character_value_expression
                   ; 

escape_character  ::=  character_value_expression
                  ; 

octet_like_predicate  ::=  row_value_predicand   octet_like_predicate_part_2
                      ;  

octet_like_predicate_part_2  ::= not_opt LIKE  octet_pattern  escape_octet_opt
                             ;

octet_pattern  ::=  blob_value_expression
               ;  

escape_octet  ::=  blob_value_expression
              ; 

similar_predicate ::=  row_value_predicand   similar_predicate_part_2
                  ; 

similar_predicate_part_2 ::= not_opt SIMILAR TO  similar_pattern  escape_opt
                         ;
                         
similar_pattern ::=  character_value_expression 
                ;
                
regular_expression ::= regular_term 
                   |   regular_expression   VBAR   regular_term 
                   ;
                   
regular_term ::= regular_factor 
             |   regular_term   regular_factor 
             ;
             
 regular_factor  ::=  regular_primary 
                 |    regular_primary   ASTERISK 
                 |    regular_primary   PLUS 
                 |    regular_primary   QUESTION 
                 |    regular_primary   repeat_factor 
                 ;
                 
repeat_factor  ::=  LBRA   low_value  upper_limit_opt  RBRA
               ; 

upper_limit_opt ::= upper_limit
                |
                ;
                
upper_limit  ::=  COMMA  high_value_opt
             ;
             
high_value_opt ::= high_value
               |
               ;             

low_value  ::=  unsigned_integer
           ; 

high_value  ::=  unsigned_integer
            ;
             

regular_primary  ::= character_specifier 
                 |    PERCENT 
                 |    regular_character_set 
                 |    LPAR   regular_expression   RPAR 
                 ;
                 
character_specifier  ::=  non_escaped_character  
                     |  escaped_character
                     ; 

 non_escaped_character  ::= NADA
                        ;

 escaped_character  ::= NADA2
                    ;

 regular_character_set  ::= UNDERSCORE 
                        |    LCOR   character_enum_list  RCOR 
                        |    LCOR   CIRCUMFLEX   character_enum_list  RCOR 
                        |    LCOR   character_enumeration_include   CIRCUMFLEX   character_enumeration_exclude  RCOR
                        ; 

character_enum_list ::= character_enumeration
                    |   character_enum_list character_enumeration
                    ;
                     
character_enumeration_include  ::=  character_enum_list
                               ;    

character_enumeration_exclude  ::=  character_enum_list 
                               ;
                               
character_enumeration  ::= character_specifier 
                       |    character_specifier   MINUS   character_specifier 
                       |    LCOR   COLON   regular_character_set_identifier   COLON   RCOR 
                       ;
                       
regular_character_set_identifier  ::=  identifier 
                                  ;


null_predicate  ::=  row_value_predicand   null_predicate_part_2
                ; 

null_predicate_part_2  ::= IS not_opt NULL
                       ; 

quantified_comparison_predicate  ::=  row_value_predicand   quantified_comparison_predicate_part_2
                                 ; 

quantified_comparison_predicate_part_2  ::=  comp_op   quantifier   table_subquery
                                        ;
quantifier  ::=  ALL  
            |    SOME
            |    ANY 
            ;
            
exists_predicate  ::= EXISTS  table_subquery
                  ; 

unique_predicate  ::= UNIQUE  table_subquery 
                  ;

normalized_predicate  ::=  string_value_expression  IS not_opt NORMALIZED
                      ;

match_predicate  ::=  row_value_predicand   match_predicate_part_2
                 ; 

match_predicate_part_2  ::= MATCH unique_opt simple_opt table_subquery
                        ; 

overlaps_predicate  ::=  overlaps_predicate_part_1   overlaps_predicate_part_2
                    ; 

overlaps_predicate_part_1  ::=  row_value_predicand_1
                           ; 

overlaps_predicate_part_2  ::= OVERLAPS  row_value_predicand_2
                           ; 

row_value_predicand_1  ::=  row_value_predicand
                       ; 

row_value_predicand_2  ::=  row_value_predicand
                       ; 

row_value_predicand ::= row_value_special_case 
                    |   row_value_constructor_predicand
                    ; 

row_value_special_case ::=  nonparenthesized_value_expression_primary
                       ; 

distinct_predicate  ::=  row_value_predicand_3   distinct_predicate_part_2
                    ; 

distinct_predicate_part_2  ::= IS DISTINCT FROM  row_value_predicand_4
                           ; 

row_value_predicand_3  ::=  row_value_predicand
                       ; 

row_value_predicand_4  ::=  row_value_predicand
                       ; 

member_predicate  ::=  row_value_predicand   member_predicate_part_2
                  ; 

member_predicate_part_2  ::= not_opt MEMBER of_opt  multiset_value_expression
                         ; 

submultiset_predicate  ::=  row_value_predicand   submultiset_predicate_part_2
                       ; 

submultiset_predicate_part_2  ::= not_opt SUBMULTISET of_opt  multiset_value_expression
                              ;  

set_predicate  ::=  row_value_predicand   set_predicate_part_2
               ; 

set_predicate_part_2  ::= IS not_opt A_SET
                      ; 

type_predicate  ::=  row_value_predicand   type_predicate_part_2
                ; 

type_predicate_part_2  ::= IS not_opt OF  LPAR   type_list   RPAR
                       ; 

type_list  ::=  user_defined_type_specification  
           |    type_list COMMA   user_defined_type_specification
           ;

user_defined_type_specification  ::= inclusive_user_defined_type_specification 
                                 |   exclusive_user_defined_type_specification
                                 ; 

inclusive_user_defined_type_specification  ::=  path_resolved_user_defined_type_name
                                           ; 

exclusive_user_defined_type_specification  ::= ONLY  path_resolved_user_defined_type_name
                                           ; 

interval_qualifier  ::= start_field  TO  end_field 
                    |    single_datetime_field
                    ; 

interval_leading_field_precision_opt ::= LPAR   interval_leading_field_precision   RPAR
                                     |
                                     ;
                                     
interval_fractional_seconds_precision_opt ::= LPAR interval_fractional_seconds_precision RPAR
                                          |
                                          ;
                                                                                                                    
start_field  ::=  non_second_primary_datetime_field  interval_leading_field_precision_opt
             ;

end_field  ::= non_second_primary_datetime_field 
           |   SECOND interval_fractional_seconds_precision_opt
           ;

single_datetime_field  ::= non_second_primary_datetime_field  interval_leading_field_precision_opt
                       |   SECOND interval_leading_field_precision_opt2
                       ;

primary_datetime_field  ::= non_second_primary_datetime_field 
                        |   SECOND
                        ;

non_second_primary_datetime_field  ::= YEAR 
                                   |   MONTH 
                                   |   DAY 
                                   |   HOUR 
                                   |   MINUTE
                                   ;

interval_fractional_seconds_precision  ::=  unsigned_integer
                                       ; 
        

interval_leading_field_precision_opt ::= interval_leading_field_precision
                                     |
                                     ; 

interval_leading_field_precision_opt2 ::= LPAR interval_leading_field_precision interval_fractional_seconds_precision_opt RPAR
                                     |
                                     ; 

interval_leading_field_precision  ::=  unsigned_integer
                                  ; 

interval_fractional_seconds_precision_opt ::= COMMA   interval_fractional_seconds_precision
                                          |
                                          ;
                                          
not_opt ::= NOT
        |
        ; 
 
from_opt ::= FROM
         |
         ;
         
truth_value_opt ::= IS not_opt  truth_value
                ;         
         
all_distinct_opt ::= ALL
                 |   DISTINCT
                 |
                 ;
                  
symmetric_opt ::= ASYMMETRIC 
              |   SYMMETRIC
              |
              ;                  
              
escape_opt ::= ESCAPE  escape_character
           |
           ;
           
escape_octet_opt ::= ESCAPE escape_octet
                 ;
   
unique_opt ::= UNIQUE
           |
           ;
                                    
simple_opt ::= SIMPLE 
           |   PARTIAL 
           |   FULL 
           ;
                                                  
of_opt ::= OF
       |
       ;

indicator_opt ::= INDICATOR
              ;

simple_value_specification  ::= literal 
                            |    host_parameter_name 
                            |    SQL_parameter_reference 
                            |    embedded_variable_name 
                            ;
                            
host_parameter_name  ::=  COLON   identifier
                     ;
    
SQL_parameter_reference ::=  basic_identifier_chain
                         ; 

embedded_variable_name  ::=  COLON   host_identifier
                        ; 
                         
basic_identifier_chain ::=  identifier_chain
                        ;                     
                           
identifier_chain ::=  identifier  
                  |    identifier_chain DOT identifier
                  ;
                  

host_identifier  ::= COBOL_host_identifier
/*
    |      Ada_host_identifier 
    |    C_host_identifier 
    |    Fortran_host_identifier 
    |    MUMPS_host_identifier 
    |    Pascal_host_identifier 
    |    PL_I_host_identifier 
*/
                 ;
                 
target_specification  ::= host_parameter_specification 
//                      |    SQL_parameter_reference 
                      |    column_reference 
                      |    target_array_element_specification 
                      |    dynamic_parameter_specification 
                      |    embedded_variable_specification 
                      ;
       
host_parameter_specification  ::=  host_parameter_name  indicator_opt
                              ;
                              
indicator_opt ::= indicator_parameter 
              ;
              
indicator_parameter  ::= indicator_opt  host_parameter_name
                     ;

column_reference  ::= basic_identifier_chain 
                  |   MODULE  DOT   qualified_identifier   DOT   column_name
                  ;
                    
target_array_element_specification  ::= target_array_reference  LBRA   simple_value_specification   RBRA
                                    ;  

target_array_reference  ::=  SQL_parameter_reference  
//                        |  column_reference
                        ; 

dynamic_parameter_specification  ::=  QUESTION 
                                 ; 

embedded_variable_specification  ::=  embedded_variable_name  indicator_variable_opt
                                 ;
                                 
indicator_variable_opt ::= indicator_variable
                       |
                       ;                               

indicator_variable  ::= indicator_opt  embedded_variable_name
                    ;  

/**********************************************************************/
/*   DATE TIME VALUES                                                 */
/**********************************************************************/

datetime_literal ::= date_literal  
                 |   time_literal  
                 |   timestamp_literal
                 ; 
 
date_literal ::= DATE  date_string
             ; 
 
time_literal ::= TIME  time_string
             ; 
 
timestamp_literal ::= TIMESTAMP  timestamp_string
                  ; 

date_string  ::=  QUOTE   date_value   QUOTE
             ; 
 
time_string ::=  QUOTE   time_value   QUOTE
            ; 
 
timestamp_string ::=  QUOTE   tms_value   QUOTE
                 ; 

time_zone_interval ::=  sign   hours_value   COLON   minutes_value
                   ; 
 
date_value ::=  DATEVAL
           ; 
 
time_value ::=  TIMEVAL
            ;
            
timestamp_value ::= TMSVAL
                ;            
             
interval_literal ::= INTERVAL sign_opt  interval_string   interval_qualifier 
                 ;
                 
interval_string ::=  QUOTE   unquoted_interval_string   QUOTE
                ;
                 
date_value ::=  date_value
                     ; 
                     
time_value ::=  time_value  time_zone_interval_opt
                     ;
                     
time_zone_interval_opt ::= time_zone_interval
                       |
                       ;

/*
--X  unquoted_interval_string  ::= [  sign  ] {  year_month_literal  |  day_time_literal  }
--X 
*/

/*
year_month_literal  ::=  years_value  
                    | [  years_value   MINUS  ]  months_value 
*/

year_month_literal ::= years_value month_opt
                   ; 
                   
month_opt ::= MINUS months_value
          |
          ;                    

day_time_literal ::=  day_time_interval  
                 |  time_interval
                 ; 

/* 
day_time_interval ::= days_value  [  space   hours_value  [  COLON   minutes_value  [  COLON   seconds_value  ] ] ]
*/

day_time_interval ::= days_value time_interval_opt
                  ;
                  
time_interval_opt ::= time_interval
                  |
                  ;                  
/*
time_interval ::= hours_value  [  COLON   minutes_value  [  COLON   seconds_value  ] ]
     |    minutes_value  [  COLON   seconds_value  ]
    |    seconds_value 
*/

time_interval ::= hours_value
              |   time_interval COLON hours_value
              ;
               
years_value ::=  datetime_value
            ; 

months_value ::=  datetime_value
             ;  

days_value ::=  datetime_value
           ; 

hours_value ::=  datetime_value
            ; 

minutes_value ::=  datetime_value
              ; 

seconds_value ::=  seconds_integer_value  seconds_fraction_opt
              ;
              
seconds_fraction_opt ::= DOT  seconds_fraction_opt2
                     ;
                     
seconds_fraction_opt2 ::= seconds_fraction
                      ;

seconds_integer_value ::=  unsigned_integer
                      ; 

seconds_fraction ::=  unsigned_integer
                 ; 

datetime_value ::=  unsigned_integer
               ; 
 
boolean_literal ::= TRUE 
                |   FALSE 
                | UNKNOWN
                ;

time_zone_interval_opt ::= time_zone_interval
                       |
                       ;
                    
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*                        XXXXXXXXXXXXX                               */
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

/*


--X --bl
--X --li ALTER DOMAIN  alter_domain_statement 
--X --li ALTER TABLE  alter_table_statement 
--X --li CLOSE cursor  close_statement 
--X --li Column definition  column_definition 
--X --li COMMIT WORK  commit_statement 
--X --li CONNECT  connect_statement 
--X --li CREATE ASSERTION  assertion_definition 
--X --li CREATE CHARACTER SET  character_set_definition 
--X --li CREATE COLLATION  collation_definition 
--X --li CREATE DOMAIN  domain_definition 
--X --li CREATE FUNCTION  schema_function 
--X --li CREATE PROCEDURE  schema_procedure 
--X --li CREATE SCHEMA  schema_definition 
--X --li CREATE TABLE  table_definition 
--X --li CREATE TRANSLATION  translation_definition 
--X --li CREATE TRIGGER  trigger_definition 
--X --li CREATE VIEW  view_definition 
--X --li Data type  data_type 
--X --li DEALLOCATE PREPARE  deallocate_prepared_statement 
--X  
--X --li DECLARE LOCAL TEMPORARY TABLE  temporary_table_declaration 

--X --li DESCRIBE  describe_statement 
--X --li DESCRIPTOR statements  system_descriptor_statement 
--X --li DISCONNECT  disconnect_statement 
--X --li EXECUTE  execute_statement 
--X --li EXECUTE IMMEDIATE  execute_immediate_statement 
--X --li FETCH cursor  fetch_statement 
--X --li FROM clause  from_clause 
--X --li GET DIAGNOSTICS  get_diagnostics_statement 
--X --li GRANT  grant_statement 
--X --li GROUP BY clause  group_by_clause 
--X --li HAVING clause  having_clause 
--X --li INSERT  insert_statement 
--X --li Literals  literal 
--X --li Keywords  key_word 
--X --li MERGE  merge_statement 
--X --li OPEN cursor  open_statement 
--X --li ORDER BY clause  order_by_clause 
--X --li PREPARE  prepare_statement 
--X --li REVOKE  revoke_statement 
--X --li ROLLBACK WORK  rollback_statement 
--X --li SAVEPOINT  savepoint_statement 
--X --li Search condition  search_condition   regular_expression 
--X --li SELECT  query_specification 
--X --li SET CATALOG  set_catalog_statement 
--X --li SET CONNECTION  set_connection_statement 
--X --li SET CONSTRAINTS  set_constraints_mode_statement 
--X --li SET NAMES  set_names_statement 
--X --li SET SCHEMA  set_schema_statement 
--X --li SET SESSION AUTHORIZATION  set_session_user_identifier_statement 
--X --li SET TIME ZONE  set_local_time_zone_statement 
--X --li SET TRANSACTION  set_transaction_statement 
--X --li SQL Client MODULE  SQL_client_module_definition 
--X --li UPDATE  update_statement_positioned   update_statement_searched   dynamic_update_statement_positioned 
--X --li Value expression  value_expression 
--X --li WHERE clause  where_clause 
--X --/bl
--X 
--X 
--X 
--X 
--X 
--X  SQL_terminal_character  ::=  SQL_language_character 
--X 
--X  SQL_language_character  ::=  simple_Latin_letter  |  digit  |  SQL_special_character 
--X 
--X  simple_Latin_letter  ::=  simple_Latin_upper_case_letter  |  simple_Latin_lower_case_letter 
--X 
--X  simple_Latin_upper_case_letter  ::=
--X         A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
--X 
--X  simple_Latin_lower_case_letter  ::=
--X         a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z
--X 
--X  digit  ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
--X 
--X  SQL_special_character  ::=
--X          space 
--X     |    DQUOTE 
--X     |    PERCENT 
--X     |    AMPERSAND 
--X     |    QUOTE 
--X     |    LPAR 
--X     |    RPAR 
--X     |    ASTERISK 
--X     |    PLUS 
--X     |    COMMA 
--X     |    MINUS 
--X     |    DOT 
--X     |    SLASH 
--X     |    COLON 
--X     |    SEMICOLON 
--X     |    LT 
--X     |    EQUAL 
--X     |    GT 
--X     |    QUESTION 
--X     |    LCOR 
--X     |    RCOR 
--X     |    CIRCUMFLEX 
--X     |    UNDERSCORE 
--X     |    VBAR 
--X     |    LBRA 
--X     |    RBRA 
--X 
--X  token  ::=  nondelimiter_token  |  delimiter_token 
--X 
--X  nondelimiter_token  ::=
--X          regular_identifier 
--X     |    key_word 
--X     |    unsigned_numeric_literal 
--X     |    national_character_string_literal 
--X     |    bit_string_literal 
--X     |    hex_string_literal 
--X     |    large_object_length_token 
--X     |    multiplier 
--X 
--X 
--X  large_object_length_token  ::=  digit ...  multiplier 
--X 
--X  multiplier  ::= K | M | G
--X 
--X  
--X 
--X  Unicode_delimited_identifier  ::=
--X         U AMPERSAND  DQUOTE   Unicode_delimiter_body   DQUOTE 
--X          Unicode_escape_specifier 
--X 
--X 
--X  Unicode_escape_specifier  ::= [ UESCAPE  QUOTE   Unicode_escape_character   QUOTE  ]
--X 
--X  Unicode_delimiter_body  ::=  Unicode_identifier_part ...
--X 
--X  Unicode_identifier_part  ::=  delimited_identifier_part  |  Unicode_escape_value 
--X 
--X  Unicode_escape_value  ::=
--X          Unicode_4_digit_escape_value 
--X     |    Unicode_6_digit_escape_value 
--X     |    Unicode_character_escape_value 
--X 
--X 
--X  Unicode_4_digit_escape_value  ::=  Unicode_escape_character  hexit  hexit  hexit  hexit 
--X 
--X 
--X 
--X  Unicode_6_digit_escape_value  ::=
--X          Unicode_escape_character  PLUS  hexit  hexit  hexit  hexit  hexit  hexit 
--X 
--X 
--X  Unicode_character_escape_value  ::=  Unicode_escape_character  Unicode_escape_character 
--X 
--X 
--X 
--X 
--X 
--X  Unicode_escape_character  ::= !! See the Syntax Rules (15-18 above).
--X 
--X 
--X  nondoublequote_character  ::= !! See the Syntax Rules.
--X 
--X 
--X  doublequote_symbol  ::=  DQUOTE   DQUOTE 
--X 
--X  delimiter_token  ::=
--X          character_string_literal 
--X     |    date_string 
--X     |    time_string 
--X     |    timestamp_string 
--X     |    interval_string 
--X     |    delimited_identifier 
--X     |    Unicode_delimited_identifier 
--X     |    SQL_special_character 
--X     |    NE 
--X     |    GE 
--X     |    LE 
--X     |    concatenation_operator 
--X     |    right_arrow 
--X     |    LCOR 
--X     |    RCOR 
--X     |    double_colon 
--X     |    double_period 
--X 
--X 
--X  concatenation_operator  ::=  VBAR   VBAR 
--X 
--X  right_arrow  ::=  MINUS   GT 
--X 
--X  double_colon  ::=  COLON   COLON 
--X 
--X  double_period  ::=  DOT   DOT 
--X 
--X  separator  ::= {  comment  |  white_space  }...
--X 
--X  comment  ::=  simple_comment  |  bracketed_comment 
--X 
--X  simple_comment  ::=  simple_comment_introducer  [  comment_character ... ]  newline 
--X 
--X  simple_comment_introducer  ::=  MINUS  MINUS  [  MINUS ... ]
--X 
--X 
--X  bracketed_comment  ::=
--X          bracketed_comment_introducer   bracketed_comment_contents   bracketed_comment_terminator 
--X 
--X  bracketed_comment_introducer  ::=  slash   ASTERISK 
--X 
--X  bracketed_comment_terminator  ::=  ASTERISK   slash 
--X 
--X  bracketed_comment_contents  ::= [ {  comment_character  |  separator  }... ]
--X 
--X  comment_character  ::=  nonquote_character  |  QUOTE 
--X 
--X  newline  ::= !! See the Syntax Rules.
--X 
--X 
--X  key_word  ::=  reserved_word  |  non_reserved_word 
--X 
--X  non_reserved_word  ::=
--X         A
--X     |   ABS
--X     |   ABSOLUTE
--X     |   ACTION
--X     |   ADA
--X     |   ADMIN
--X     |   AFTER
--X     |   ALWAYS
--X     |   ASC
--X     |   ASSERTION
--X     |   ASSIGNMENT
--X     |   ATTRIBUTE
--X     |   ATTRIBUTES
--X     |   AVG
--X     |   BEFORE
--X     |   BERNOULLI
--X     |   BREADTH
--X     |   C
--X     |   CARDINALITY
--X     |   CASCADE
--X     |   CATALOG
--X     |   CATALOG_NAME
--X     |   CEIL
--X     |   CEILING
--X     |   CHAIN
--X     |   CHARACTERISTICS
--X     |   CHARACTERS
--X     |   CHARACTER_LENGTH
--X     |   CHARACTER_SET_CATALOG
--X     |   CHARACTER_SET_NAME
--X     |   CHARACTER_SET_SCHEMA
--X     |   CHAR_LENGTH
--X     |   CHECKED
--X     |   CLASS_ORIGIN
--X     |   COALESCE
--X     |   COBOL
--X     |   CODE_UNITS
--X     |   COLLATION
--X     |   COLLATION_CATALOG
--X     |   COLLATION_NAME
--X     |   COLLATION_SCHEMA
--X     |   COLLECT
--X     |   COLUMN_NAME
--X     |   COMMAND_FUNCTION
--X     |   COMMAND_FUNCTION_CODE
--X     |   COMMITTED
--X     |   CONDITION
--X     |   CONDITION_NUMBER
--X     |   CONNECTION_NAME
--X     |   CONSTRAINTS
--X     |   CONSTRAINT_CATALOG
--X     |   CONSTRAINT_NAME
--X     |   CONSTRAINT_SCHEMA
--X     |   CONSTRUCTORS
--X     |   CONTAINS
--X     |   CONVERT
--X     |   CORR
--X     |   COUNT
--X     |   COVAR_POP
--X     |   COVAR_SAMP
--X     |   CUME_DIST
--X     |   CURRENT_COLLATION
--X     |   CURSOR_NAME
--X     |   DATA
--X     |   DATETIME_INTERVAL_CODE
--X     |   DATETIME_INTERVAL_PRECISION
--X     |   DEFAULTS
--X     |   DEFERRABLE
--X     |   DEFERRED
--X     |   DEFINED
--X     |   DEFINER
--X     |   DEGREE
--X     |   DENSE_RANK
--X     |   DEPTH
--X     |   DERIVED
--X     |   DESC
--X     |   DESCRIPTOR
--X     |   DIAGNOSTICS
--X     |   DISPATCH
--X     |   DOMAIN
--X     |   DYNAMIC_FUNCTION
--X     |   DYNAMIC_FUNCTION_CODE
--X     |   EQUALS
--X     |   EVERY
--X     |   EXCEPTION
--X     |   EXCLUDE
--X     |   EXCLUDING
--X     |   EXP
--X     |   EXTRACT
--X     |   FINAL
--X     |   FIRST
--X     |   FLOOR
--X     |   FOLLOWING
--X     |   FORTRAN
--X     |   FOUND
--X     |   FUSION
--X     |   G
--X     |   GENERAL
--X     |   GO
--X     |   GOTO
--X     |   GRANTED
--X     |   HIERARCHY
--X     |   IMPLEMENTATION
--X     |   INCLUDING
--X     |   INCREMENT
--X     |   INITIALLY
--X     |   INSTANCE
--X     |   INSTANTIABLE
--X     |   INTERSECTION
--X     |   INVOKER
--X     |   ISOLATION
--X     |   K
--X     |   KEY
--X     |   KEY_MEMBER
--X     |   KEY_TYPE
--X     |   LAST
--X     |   LENGTH
--X     |   LEVEL
--X     |   LN
--X     |   LOCATOR
--X     |   LOWER
--X     |   M
--X     |   MAP
--X     |   MATCHED
--X     |   MAX
--X     |   MAXVALUE
--X     |   MESSAGE_LENGTH
--X     |   MESSAGE_OCTET_LENGTH
--X     |   MESSAGE_TEXT
--X     |   MIN
--X     |   MINVALUE
--X     |   MOD
--X     |   MORE
--X     |   MUMPS
--X     |   NAME
--X     |   NAMES
--X     |   NESTING
--X     |   NEXT
--X     |   NORMALIZE
--X     |   NORMALIZED
--X     |   NULLABLE
--X     |   NULLIF
--X     |   NULLS
--X     |   NUMBER
--X     |   OBJECT
--X     |   OCTETS
--X     |   OCTET_LENGTH
--X     |   OPTION
--X     |   OPTIONS
--X     |   ORDERING
--X     |   ORDINALITY
--X     |   OTHERS
--X     |   OVERLAY
--X     |   OVERRIDING
--X     |   PAD
--X     |   PARAMETER_MODE
--X     |   PARAMETER_NAME
--X     |   PARAMETER_ORDINAL_POSITION
--X     |   PARAMETER_SPECIFIC_CATALOG
--X     |   PARAMETER_SPECIFIC_NAME
--X     |   PARAMETER_SPECIFIC_SCHEMA
--X     |   PARTIAL
--X     |   PASCAL
--X     |   PATH
--X     |   PERCENTILE_CONT
--X     |   PERCENTILE_DISC
--X     |   PERCENT_RANK
--X     |   PLACING
--X     |   PLI
--X     |   POSITION
--X     |   POWER
--X     |   PRECEDING
--X     |   PRESERVE
--X     |   PRIOR
--X     |   PRIVILEGES
--X     |   PUBLIC
--X     |   RANK
--X     |   READ
--X     |   RELATIVE
--X     |   REPEATABLE
--X     |   RESTART
--X     |   RETURNED_CARDINALITY
--X     |   RETURNED_LENGTH
--X     |   RETURNED_OCTET_LENGTH
--X     |   RETURNED_SQLSTATE
--X     |   ROLE
--X     |   ROUTINE
--X     |   ROUTINE_CATALOG
--X     |   ROUTINE_NAME
--X     |   ROUTINE_SCHEMA
--X     |   ROW_COUNT
--X     |   ROW_NUMBER
--X     |   SCALE
--X     |   SCHEMA
--X     |   SCHEMA_NAME
--X     |   SCOPE_CATALOG
--X     |   SCOPE_NAME
--X     |   SCOPE_SCHEMA
--X     |   SECTION
--X     |   SECURITY
--X     |   SELF
--X     |   SEQUENCE
--X     |   SERIALIZABLE
--X     |   SERVER_NAME
--X     |   SESSION
--X     |   SETS
--X     |   SIMPLE
--X     |   SIZE
--X     |   SOURCE
--X     |   SPACE
--X     |   SPECIFIC_NAME
--X     |   SQRT
--X     |   STATE
--X     |   STATEMENT
--X     |   STDDEV_POP
--X     |   STDDEV_SAMP
--X     |   STRUCTURE
--X     |   STYLE
--X     |   SUBCLASS_ORIGIN
--X     |   SUBSTRING
--X     |   SUM
--X     |   TABLESAMPLE
--X     |   TABLE_NAME
--X     |   TEMPORARY
--X     |   TIES
--X     |   TOP_LEVEL_COUNT
--X     |   TRANSACTION
--X     |   TRANSACTIONS_COMMITTED
--X     |   TRANSACTIONS_ROLLED_BACK
--X     |   TRANSACTION_ACTIVE
--X     |   TRANSFORM
--X     |   TRANSFORMS
--X     |   TRANSLATE
--X     |   TRIGGER_CATALOG
--X     |   TRIGGER_NAME
--X     |   TRIGGER_SCHEMA
--X     |   TRIM
--X     |   TYPE
--X     |   UNBOUNDED
--X     |   UNCOMMITTED
--X     |   UNDER
--X     |   UNNAMED
--X     |   USAGE
--X     |   USER_DEFINED_TYPE_CATALOG
--X     |   USER_DEFINED_TYPE_CODE
--X     |   USER_DEFINED_TYPE_NAME
--X     |   USER_DEFINED_TYPE_SCHEMA
--X     |   VIEW
--X     |   WORK
--X     |   WRITE
--X     |   ZONE
--X 
--X  reserved_word  ::=
--X         ADD
--X     |   ALL
--X     |   ALLOCATE
--X     |   ALTER
--X     |   AND
--X     |   ANY
--X     |   ARE
--X     |   ARRAY
--X     |   AS
--X     |   ASENSITIVE
--X     |   ASYMMETRIC
--X     |   AT
--X     |   ATOMIC
--X     |   AUTHORIZATION
--X     |   BEGIN
--X     |   BETWEEN
--X     |   BIGINT
--X     |   BINARY
--X     |   BLOB
--X     |   BOOLEAN
--X     |   BOTH
--X     |   BY
--X     |   CALL
--X     |   CALLED
--X     |   CASCADED
--X     |   CASE
--X     |   CAST
--X     |   CHAR
--X     |   CHARACTER
--X     |   CHECK
--X     |   CLOB
--X     |   CLOSE
--X     |   COLLATE
--X     |   COLUMN
--X     |   COMMIT
--X     |   CONNECT
--X     |   CONSTRAINT
--X     |   CONTINUE
--X     |   CORRESPONDING
--X     |   CREATE
--X     |   CROSS
--X     |   CUBE
--X     |   CURRENT
--X     |   CURRENT_DATE
--X     |   CURRENT_DEFAULT_TRANSFORM_GROUP
--X     |   CURRENT_PATH
--X     |   CURRENT_ROLE
--X     |   CURRENT_TIME
--X     |   CURRENT_TIMESTAMP
--X     |   CURRENT_TRANSFORM_GROUP_FOR_TYPE
--X     |   CURRENT_USER
--X     |   CURSOR
--X     |   CYCLE
--X     |   DATE
--X     |   DAY
--X     |   DEALLOCATE
--X     |   DEC
--X     |   DECIMAL
--X     |   DECLARE
--X     |   DEFAULT
--X     |   DELETE
--X     |   DEREF
--X     |   DESCRIBE
--X     |   DETERMINISTIC
--X     |   DISCONNECT
--X     |   DISTINCT
--X     |   DOUBLE
--X     |   DROP
--X     |   DYNAMIC
--X     |   EACH
--X     |   ELEMENT
--X     |   ELSE
--X     |   END
--X     |   ENDEXEC
--X     |   ESCAPE
--X     |   EXCEPT
--X     |   EXEC
--X     |   EXECUTE
--X     |   EXISTS
--X     |   EXTERNAL
--X     |   FALSE
--X     |   FETCH
--X     |   FILTER
--X     |   FLOAT
--X     |   FOR
--X     |   FOREIGN
--X     |   FREE
--X     |   FROM
--X     |   FULL
--X     |   FUNCTION
--X     |   GET
--X     |   GLOBAL
--X     |   GRANT
--X     |   GROUP
--X     |   GROUPING
--X     |   HAVING
--X     |   HOLD
--X     |   HOUR
--X     |   IDENTITY
--X     |   IMMEDIATE
--X     |   IN
--X     |   INDICATOR
--X     |   INNER
--X     |   INOUT
--X     |   INPUT
--X     |   INSENSITIVE
--X     |   INSERT
--X     |   INT
--X     |   INTEGER
--X     |   INTERSECT
--X     |   INTERVAL
--X     |   INTO
--X     |   IS
--X     |   ISOLATION
--X     |   JOIN
--X     |   LANGUAGE
--X     |   LARGE
--X     |   LATERAL
--X     |   LEADING
--X     |   LEFT
--X     |   LIKE
--X     |   LOCAL
--X     |   LOCALTIME
--X     |   LOCALTIMESTAMP
--X     |   MATCH
--X     |   MEMBER
--X     |   MERGE
--X     |   METHOD
--X     |   MINUTE
--X     |   MODIFIES
--X     |   MODULE
--X     |   MONTH
--X     |   MULTISET
--X     |   NATIONAL
--X     |   NATURAL
--X     |   NCHAR
--X     |   NCLOB
--X     |   NEW
--X     |   NO
--X     |   NONE
--X     |   NOT
--X     |   NULL
--X     |   NUMERIC
--X     |   OF
--X     |   OLD
--X     |   ON
--X     |   ONLY
--X     |   OPEN
--X     |   OR
--X     |   ORDER
--X     |   OUT
--X     |   OUTER
--X     |   OUTPUT
--X     |   OVER
--X     |   OVERLAPS
--X     |   PARAMETER
--X     |   PARTITION
--X     |   PRECISION
--X     |   PREPARE
--X     |   PRIMARY
--X     |   PROCEDURE
--X     |   RANGE
--X     |   READS
--X     |   REAL
--X     |   RECURSIVE
--X     |   REF
--X     |   REFERENCES
--X     |   REFERENCING
--X     |   REGR_AVGX
--X     |   REGR_AVGY
--X     |   REGR_COUNT
--X     |   REGR_INTERCEPT
--X     |   REGR_R2
--X     |   REGR_SLOPE
--X     |   REGR_SXX
--X     |   REGR_SXY
--X     |   REGR_SYY
--X     |   RELEASE
--X     |   RESULT
--X     |   RETURN
--X     |   RETURNS
--X     |   REVOKE
--X     |   RIGHT
--X     |   ROLLBACK
--X     |   ROLLUP
--X     |   ROW
--X     |   ROWS
--X     |   SAVEPOINT
--X     |   SCROLL
--X     |   SEARCH
--X     |   SECOND
--X     |   SELECT
--X     |   SENSITIVE
--X     |   SESSION_USER
--X     |   SET
--X     |   SIMILAR
--X     |   SMALLINT
--X     |   SOME
--X     |   SPECIFIC
--X     |   SPECIFICTYPE
--X     |   SQL
--X     |   SQLEXCEPTION
--X     |   SQLSTATE
--X     |   SQLWARNING
--X     |   START
--X     |   STATIC
--X     |   SUBMULTISET
--X     |   SYMMETRIC
--X     |   SYSTEM
--X     |   SYSTEM_USER
--X     |   TABLE
--X     |   THEN
--X     |   TIME
--X     |   TIMESTAMP
--X     |   TIMEZONE_HOUR
--X     |   TIMEZONE_MINUTE
--X     |   TO
--X     |   TRAILING
--X     |   TRANSLATION
--X     |   TREAT
--X     |   TRIGGER
--X     |   TRUE
--X     |   UESCAPE
--X     |   UNION
--X     |   UNIQUE
--X     |   UNKNOWN
--X     |   UNNEST
--X     |   UPDATE
--X     |   UPPER
--X     |   USER
--X     |   USING
--X     |   VALUE
--X     |   VALUES
--X     |   VAR_POP
--X     |   VAR_SAMP
--X     |   VARCHAR
--X     |   VARYING
--X     |   WHEN
--X     |   WHENEVER
--X     |   WHERE
--X     |   WIDTH_BUCKET
--X     |   WINDOW
--X     |   WITH
--X     |   WITHIN
--X     |   WITHOUT
--X     |   YEAR
--X 
--X 
--X
--X  national_character_string_literal  ::=
--X         N  QUOTE  [  character_representation ... ]  QUOTE 
--X         [ {  separator   QUOTE  [  character_representation ... ]  QUOTE  }... ]
--X  
--X  Unicode_character_string_literal  ::=
--X         [  introducer  character_set_specification  ]
--X         U AMPERSAND  QUOTE  [  Unicode_representation ... ]  QUOTE 
--X         [ {  separator   QUOTE  [  Unicode_representation ... ]  QUOTE  }... ]
--X         escape_opt
--X 
--X  Unicode_representation  ::=  character_representation  |  Unicode_escape_value 
--X 
--X  binary_string_literal  ::=
--X         X  QUOTE  [ {  hexit  hexit  }... ]  QUOTE 
--X         [ {  separator   QUOTE  [ {  hexit  hexit  }... ]  QUOTE  }... ]
--X         escape_opt
--X 
--X  hexit  ::=  digit  | A | B | C | D | E | F | a | b | c | d | e | f
--X 
--X   SQL_language_identifier  ::=
--X          SQL_language_identifier_start  [ {  UNDERSCORE  |  SQL_language_identifier_part  }... ]
--X 
--X  SQL_language_identifier_start  ::=  simple_Latin_letter 
--X 
--X  SQL_language_identifier_part  ::=  simple_Latin_letter  |  digit 
--X 
--X  authorization_identifier  ::=  role_name  |  user_identifier 
--X 
--X  table_name  ::=  local_or_schema_qualified_name 
--X 
--X  domain_name  ::=  schema_qualified_name 
--X 
--X  schema_name  ::= [  catalog_name   DOT  ]  unqualified_schema_name 
--X 
--X  catalog_name  ::=  identifier 
--X 
--X  schema_qualified_name  ::= [  schema_name   DOT  ]  qualified_identifier 
--X 
--X  local_or_schema_qualified_name  ::= [  local_or_schema_qualifier   DOT  ]  qualified_identifier 
--X 
--X  local_or_schema_qualifier  ::=  schema_name  | MODULE
--X 
--X  
--X 
--X  column_name  ::=  identifier 
--X 
--X  correlation_name  ::=  identifier 
--X 
--X  query_name  ::=  identifier 
--X 
--X  SQL_client_module_name  ::=  identifier 
--X 
--X  procedure_name  ::=  identifier 
--X 
--X  schema_qualified_routine_name  ::=  schema_qualified_name 
--X 
--X  method_name  ::=  identifier 
--X 
--X  specific_name  ::=  schema_qualified_name 
--X 
--X  
 
--X 
--X  SQL_parameter_name  ::=  identifier 
--X 
--X  constraint_name  ::=  schema_qualified_name 
--X 
--X  external_routine_name  ::=  identifier  |  character_string_literal 
--X 
--X  trigger_name  ::=  schema_qualified_name 
--X 
--X  collation_name  ::=  schema_qualified_name 
--X 
--X  character_set_name  ::= [  schema_name   DOT  ]  SQL_language_identifier 
--X 
--X  transliteration_name  ::=  schema_qualified_name 
--X 
--X  transcoding_name  ::=  schema_qualified_name 
--X 
--X  user_defined_type_name  ::=  schema_qualified_type_name 
--X 
--X  schema_resolved_user_defined_type_name  ::=  user_defined_type_name 
--X 
--X  schema_qualified_type_name  ::= [  schema_name   DOT  ]  qualified_identifier 
--X 
--X  attribute_name  ::=  identifier 
--X 
--X  field_name  ::=  identifier 
--X 
--X  savepoint_name  ::=  identifier 
--X 
--X  sequence_generator_name  ::=  schema_qualified_name 
--X 
--X  role_name  ::=  identifier 
--X 
--X  user_identifier  ::=  identifier 
--X 
--X  connection_name  ::=  simple_value_specification 
--X 
--X  SQL_server_name  ::=  simple_value_specification 
--X 
--X  connection_user_name  ::=  simple_value_specification 
--X 
--X  SQL_statement_name  ::=  statement_name  |  extended_statement_name 
--X 
--X  statement_name  ::=  identifier 
--X 
--X  extended_statement_name  ::= [  scope_option  ]  simple_value_specification 
--X 
--X  dynamic_cursor_name  ::=  cursor_name  |  extended_cursor_name 
--X 
--X  extended_cursor_name  ::= [  scope_option  ]  simple_value_specification 
--X 
--X  descriptor_name  ::= [  scope_option  ]  simple_value_specification 
--X 
--X  scope_option  ::= GLOBAL | LOCAL
--X 
--X  window_name  ::=  identifier 
--X 
--X 
--X 
--X 
--X  data_type  ::=
--X          predefined_type 
--X     |    row_type 
--X     |    path_resolved_user_defined_type_name 
--X     |    reference_type 
--X     |    collection_type 
--X 
--X  predefined_type  ::=
--X          character_string_type  [ CHARACTER SET  character_set_specification  ] [  collate_clause  ]
--X     |    national_character_string_type  [  collate_clause  ]
--X     |    binary_large_object_string_type 
--X     |    numeric_type 
--X     |    boolean_type 
--X     |    datetime_type 
--X     |    interval_type 
--X 
--X  character_string_type  ::=
--X         CHARACTER [  LPAR   length   RPAR  ]
--X     |   CHAR [  LPAR   length   RPAR  ]
--X     |   CHARACTER VARYING  LPAR   length   RPAR 
--X     |   CHAR VARYING  LPAR   length   RPAR 
--X     |   VARCHAR  LPAR   length   RPAR 
--X     |   CHARACTER LARGE OBJECT [  LPAR   large_object_length   RPAR  ]
--X     |   CHAR LARGE OBJECT [  LPAR   large_object_length   RPAR  ]
--X     |   CLOB [  LPAR   large_object_length   RPAR  ]
--X 
--X  national_character_string_type  ::=
--X         NATIONAL CHARACTER [  LPAR   length   RPAR  ]
--X     |   NATIONAL CHAR [  LPAR   length   RPAR  ]
--X     |   NCHAR [  LPAR   length   RPAR  ]
--X     |   NATIONAL CHARACTER VARYING  LPAR   length   RPAR 
--X     |   NATIONAL CHAR VARYING  LPAR   length   RPAR 
--X     |   NCHAR VARYING  LPAR   length   RPAR 
--X     |   NATIONAL CHARACTER LARGE OBJECT [  LPAR   large_object_length   RPAR  ]
--X     |   NCHAR LARGE OBJECT [  LPAR   large_object_length   RPAR  ]
--X     |   NCLOB [  LPAR   large_object_length   RPAR  ]
--X 
--X  binary_large_object_string_type  ::=
--X         BINARY LARGE OBJECT [  LPAR   large_object_length   RPAR  ]
--X     |   BLOB [  LPAR   large_object_length   RPAR  ]
--X 
--X  numeric_type  ::=  exact_numeric_type  |  approximate_numeric_type 
--X 
--X  exact_numeric_type  ::=
--X         NUMERIC [  LPAR   precision  [  COMMA   scale  ]  RPAR  ]
--X     |   DECIMAL [  LPAR   precision  [  COMMA   scale  ]  RPAR  ]
--X     |   DEC [  LPAR   precision  [  COMMA   scale  ]  RPAR  ]
--X     |   SMALLINT
--X     |   INTEGER
--X     |   INT
--X     |   BIGINT
--X 
--X  approximate_numeric_type  ::=
--X         FLOAT [  LPAR   precision   RPAR  ]
--X     |   REAL
--X     |   DOUBLE PRECISION
--X 
--X  length  ::=  unsigned_integer 
--X 
--X  large_object_length  ::=
--X          unsigned_integer  [  multiplier  ] [  char_length_units  ]
--X     |    large_object_length_token  [  char_length_units  ]
--X 
--X  char_length_units  ::= CHARACTERS | CODE_UNITS | OCTETS
--X 
--X  precision  ::=  unsigned_integer 
--X 
--X  scale  ::=  unsigned_integer 
--X 
--X  boolean_type  ::= BOOLEAN
--X 
--X  datetime_type  ::=
--X         DATE
--X     |   TIME [  LPAR   time_precision   RPAR  ] [  with_or_without_time_zone  ]
--X     |   TIMESTAMP [  LPAR   timestamp_precision   RPAR  ] [  with_or_without_time_zone  ]
--X 
--X  with_or_without_time_zone  ::= WITH TIME ZONE | WITHOUT TIME ZONE
--X 
--X  time_precision  ::=  time_fractional_seconds_precision 
--X 
--X  timestamp_precision  ::=  time_fractional_seconds_precision 
--X 
--X  time_fractional_seconds_precision  ::=  unsigned_integer 
--X 
--X  interval_type  ::= INTERVAL  interval_qualifier 
--X 
--X  row_type  ::= ROW  row_type_body 
--X 
--X  row_type_body  ::=  LPAR   field_definition  [ {  COMMA   field_definition  }... ]  RPAR 
--X 
--X  reference_type  ::= REF  LPAR   referenced_type   RPAR  [  scope_clause  ]
--X 
--X  scope_clause  ::= SCOPE  table_name 
--X 
--X  referenced_type  ::=  path_resolved_user_defined_type_name 
--X 
--X  path_resolved_user_defined_type_name  ::=  user_defined_type_name 
--X 
--X  path_resolved_user_defined_type_name  ::=  user_defined_type_name 
--X 
--X  collection_type  ::=  array_type  |  multiset_type 
--X 
--X  array_type  ::=  data_type  ARRAY [  left_bracket_or_trigraph   unsigned_integer   right_bracket_or_trigraph  ]
--X 
--X  multiset_type  ::=  data_type  MULTISET
--X 
--X 
--X 
--X  field_definition  ::=  field_name   data_type  [  reference_scope_check  ]
--X 
--X 
--X 
--X  value_expression_primary  ::=
--X          parenthesized_value_expression 
--X     |    nonparenthesized_value_expression_primary 
--X 
--X  parenthesized_value_expression  ::=  LPAR   value_expression   RPAR 
--X 
--X  window_function  ::=  window_function_type  OVER  window_name_or_specification 
--X 
--X  window_function_type  ::=
--X          rank_function_type   LPAR   RPAR 
--X     |   ROW_NUMBER  LPAR   RPAR 
--X     |    aggregate_function 
--X 
--X  rank_function_type  ::= RANK | DENSE_RANK | PERCENT_RANK | CUME_DIST
--X 
--X  window_name_or_specification  ::=  window_name  |  in_line_window_specification 
--X 
--X  in_line_window_specification  ::=  window_specification 
--X 
--X 
--X 
--X 
--X  case_expression  ::=  case_abbreviation  |  case_specification 
--X 
--X  case_abbreviation  ::=
--X         NULLIF  LPAR   value_expression   COMMA   value_expression   RPAR 
--X     |   COALESCE  LPAR   value_expression  {  COMMA   value_expression  }...  RPAR 
--X 
--X  case_specification  ::=  simple_case  |  searched_case 
--X 
--X  simple_case  ::= CASE  case_operand   simple_when_clause ... [  else_clause  ] END
--X 
--X  searched_case  ::= CASE  searched_when_clause ... [  else_clause  ] END
--X 
--X  simple_when_clause  ::= WHEN  when_operand  THEN  result 
--X 
--X  searched_when_clause  ::= WHEN  search_condition  THEN  result 
--X 
--X  else_clause  ::= ELSE  result 
--X 
--X  case_operand  ::=  row_value_predicand  |  overlaps_predicate_part 
--X 
--X  when_operand  ::=
--X          row_value_predicand 
--X     |    comparison_predicate_part_2 
--X     |    between_predicate_part_2 
--X     |    in_predicate_part_2 
--X     |    character_like_predicate_part_2 
--X     |    octet_like_predicate_part_2 
--X     |    similar_predicate_part_2 
--X     |    null_predicate_part_2 
--X     |    quantified_comparison_predicate_part_2 
--X     |    match_predicate_part_2 
--X     |    overlaps_predicate_part_2 
--X     |    distinct_predicate_part_2 
--X     |    member_predicate_part_2 
--X     |    submultiset_predicate_part_2 
--X     |    set_predicate_part_2 
--X     |    type_predicate_part_2 
--X 
--X  result  ::=  result_expression  | NULL
--X 
--X  result_expression  ::=  value_expression 
--X 
--X 
--X 
--X  cast_specification  ::= CAST  LPAR   cast_operand  AS  cast_target   RPAR 
--X 
--X  cast_operand  ::=  value_expression  |  implicitly_typed_value_specification 
--X 
--X  cast_target  ::=  domain_name  |  data_type 
--X 
--X 
--X 
--X  next_value_expression  ::= NEXT VALUE FOR  sequence_generator_name 
--X 
--X 
--X 
--X  field_reference  ::=  value_expression_primary   DOT   field_name 
--X 
--X 
--X 
--X  subtype_treatment  ::=
--X         TREAT  LPAR   subtype_operand  AS  target_subtype   RPAR 
--X 
--X  subtype_operand  ::=  value_expression 
--X 
--X  target_subtype  ::=
--X          path_resolved_user_defined_type_name 
--X     |    reference_type 
--X 
--X 
--X 
--X  method_invocation  ::=  direct_invocation  |  generalized_invocation 
--X 
--X  direct_invocation  ::=
--X          value_expression_primary   DOT   method_name  [  SQL_argument_list  ]
--X 
--X  generalized_invocation  ::=
--X          LPAR   value_expression_primary  AS  data_type   RPAR   DOT   method_name 
--X         [  SQL_argument_list  ]
--X 
--X  method_selection  ::=  routine_invocation 
--X 
--X  constructor_method_selection  ::=  routine_invocation 
--X 
--X 
--X 
--X  static_method_invocation  ::=
--X          path_resolved_user_defined_type_name   double_colon   method_name  [  SQL_argument_list  ]
--X 
--X  static_method_selection  ::=  routine_invocation 
--X 
--X 
--X 
--X  new_specification  ::= NEW  routine_invocation 
--X 
--X  new_invocation  ::=  method_invocation  |  routine_invocation 
--X 
--X 
--X 
--X  attribute_or_method_reference  ::=
--X          value_expression_primary   dereference_operator   qualified_identifier 
--X         [  SQL_argument_list  ]
--X 
--X  dereference_operator  ::=  right_arrow 
--X 
--X 
--X 
--X  dereference_operation  ::=  reference_value_expression   dereference_operator   attribute_name 
--X 
--X 
--X 
--X  method_reference  ::=
--X          value_expression_primary   dereference_operator   method_name   SQL_argument_list 
--X 
--X 
--X 
--X  reference_resolution  ::= DEREF  LPAR   reference_value_expression   RPAR 
--X 
--X 
--X 
--X  array_element_reference  ::=
--X          array_value_expression   left_bracket_or_trigraph   numeric_value_expression   right_bracket_or_trigraph  
--X 
--X 
--X     
--X  multiset_element_reference  ::=
--X         ELEMENT  LPAR   multset_value_expression   RPAR 
--X 
--X 
--X 
--X  value_expression  ::=
--X          common_value_expression 
--X     |    boolean_value_expression 
--X     |    row_value_expression 
--X 
--X  common_value_expression  ::=
--X          numeric_value_expression 
--X     |    string_value_expression 
--X     |    datetime_value_expression 
--X     |    interval_value_expression 
--X     |    user_defined_type_value_expression 
--X     |    reference_value_expression 
--X     |    collection_value_expression 
--X 
--X  user_defined_type_value_expression  ::=  value_expression_primary 
--X 
--X  reference_value_expression  ::=  value_expression_primary 
--X 
--X  collection_value_expression  ::=  array_value_expression  |  multiset_value_expression 
--X 
--X  collection_value_constructor  ::=  array_value_constructor  |  multiset_value_constructor 
--X 
--X 
--X 
--X  numeric_value_expression  ::=
--X          term 
--X     |    numeric_value_expression   PLUS   term 
--X     |    numeric_value_expression   MINUS   term 
--X 
--X  term  ::=
--X          factor 
--X     |    term   ASTERISK   factor 
--X     |    term   SLASH   factor 
--X 
--X  factor  ::= [  sign  ]  numeric_primary 
--X 
--X  numeric_primary  ::=
--X          value_expression_primary 
--X     |    numeric_value_function 
--X 
--X 
--X 
--X  numeric_value_function  ::=
--X          position_expression 
--X     |    extract_expression 
--X     |    length_expression 
--X     |    cardinality_expression 
--X     |    absolute_value_expression 
--X     |    modulus_expression 
--X     |    natural_logarithm 
--X     |    exponential_function 
--X     |    power_function 
--X     |    square_root 
--X     |    floor_function 
--X     |    ceiling_function 
--X     |    width_bucket_function 
--X 
--X  position_expression  ::=
--X          string_position_expression 
--X     |    blob_position_expression 
--X 
--X  string_position_expression  ::=
--X         POSITION  LPAR   string_value_expression  IN  string_value_expression  [ USING  char_length_units  ]  RPAR 
--X 
--X  blob_position_expression  ::=
--X         POSITION  LPAR   blob_value_expression  IN  blob_value_expression   RPAR 
--X 
--X  length_expression  ::=
--X          char_length_expression 
--X     |    octet_length_expression 
--X 
--X  char_length_expression  ::=
--X         { CHAR_LENGTH | CHARACTER_LENGTH }  LPAR   string_value_expression  [ USING  char_length_units  ]  RPAR 
--X 
--X  octet_length_expression  ::= OCTET_LENGTH  LPAR   string_value_expression   RPAR 
--X 
--X  extract_expression  ::= EXTRACT  LPAR   extract_field  FROM  extract_source   RPAR 
--X 
--X  extract_field  ::=  primary_datetime_field  |  time_zone_field 
--X 
--X  time_zone_field  ::= TIMEZONE_HOUR | TIMEZONE_MINUTE
--X 
--X  extract_source  ::=  datetime_value_expression  |  interval_value_expression 
--X 
--X  cardinality_expression  ::= CARDINALITY  LPAR   collection_value_expression   RPAR 
--X 
--X  absolute_value_expression  ::= ABS  LPAR   numeric_value_expression   RPAR 
--X 
--X  modulus_expression  ::= MOD  LPAR   numeric_value_expression_dividend   COMMA   numeric_value_expression_divisor  RPAR 
--X 
--X  natural_logarithm  ::= LN  LPAR   numeric_value_expression   RPAR 
--X 
--X  exponential_function  ::= EXP  LPAR   numeric_value_expression   RPAR 
--X 
--X  power_function  ::= POWER  LPAR   numeric_value_expression_base   COMMA   numeric_value_expression_exponent   RPAR 
--X 
--X  numeric_value_expression_base  ::=  numeric_value_expression 
--X 
--X  numeric_value_expression_exponent  ::=  numeric_value_expression 
--X 
--X  square_root  ::= SQRT  LPAR   numeric_value_expression   RPAR 
--X 
--X  floor_function  ::= FLOOR  LPAR   numeric_value_expression   RPAR 
--X 
--X  ceiling_function  ::= { CEIL | CEILING }  LPAR   numeric_value_expression   RPAR 
--X 
--X  width_bucket_function  ::= WIDTH_BUCKET  LPAR   width_bucket_operand   COMMA   width_bucket_bound_1   COMMA   width_bucket_bound_2   COMMA   width_bucket_count   RPAR 
--X 
--X  width_bucket_operand  ::=  numeric_value_expression 
--X 
--X  width_bucket_bound_1  ::=  numeric_value_expression 
--X 
--X  width_bucket_bound_2  ::=  numeric_value_expression 
--X 
--X  width_bucket_count  ::=  numeric_value_expression 
--X 
--X 
--X 
--X  string_value_expression  ::=  character_value_expression  |  blob_value_expression 
--X 
--X  character_value_expression  ::=  concatenation  |  character_factor 
--X 
--X  concatenation  ::=  character_value_expression   concatenation_operator   character_factor 
--X 
--X  character_factor  ::=  character_primary  [  collate_clause  ]
--X 
--X  character_primary  ::=  value_expression_primary  |  string_value_function 
--X 
--X  blob_value_expression  ::=  blob_concatenation  |  blob_factor 
--X 
--X  blob_factor  ::=  blob_primary 
--X 
--X  blob_primary  ::=  value_expression_primary  |  string_value_function 
--X 
--X  blob_concatenation  ::=  blob_value_expression   concatenation_operator   blob_factor 
--X 
--X 
--X 
--X  string_value_function  ::=  character_value_function  |  blob_value_function 
--X 
--X  character_value_function  ::=
--X          character_substring_function 
--X     |    regular_expression_substring_function 
--X     |    fold 
--X     |    transcoding 
--X     |    character_transliteration 
--X     |    trim_function 
--X     |    character_overlay_function 
--X     |    normalize_function 
--X     |    specific_type_method 
--X 
--X  character_substring_function  ::=
--X         SUBSTRING  LPAR   character_value_expression  FROM  start_position 
--X         [ FOR  string_length  ] [ USING  char_length_units  ]  RPAR 
--X 
--X  regular_expression_substring_function  ::=
--X         SUBSTRING  LPAR   character_value_expression 
--X         SIMILAR  character_value_expression  ESCAPE  escape_character   RPAR 
--X 
--X  fold  ::= { UPPER | LOWER }  LPAR   character_value_expression   RPAR 
--X 
--X  transcoding  ::= CONVERT  LPAR   character_value_expression  USING  transcoding_name   RPAR 
--X 
--X  character_transliteration  ::= TRANSLATE  LPAR   character_value_expression  USING  transliteration_name   RPAR 
--X 
--X  trim_function  ::= TRIM  LPAR   trim_operands   RPAR 
--X 
--X  trim_operands  ::= [ [  trim_specification  ] [  trim_character  ] FROM ]  trim_source 
--X 
--X  trim_source  ::=  character_value_expression 
--X 
--X  trim_specification  ::= LEADING | TRAILING | BOTH
--X 
--X  trim_character  ::=  character_value_expression 
--X 
--X  character_overlay_function  ::= 
--X         OVERLAY  LPAR   character_value_expression  PLACING  character_value_expression 
--X         FROM  start_position  [ FOR  string_length  ] [ USING  char_length_units  ]  RPAR 
--X 
--X  normalize_function  ::= NORMALIZE  LPAR   character_value_expression   RPAR 
--X 
--X  specific_type_method  ::=  user_defined_type_value_expression   DOT  SPECIFICTYPE
--X 
--X  blob_value_function  ::=
--X          blob_substring_function 
--X     |    blob_trim_function 
--X     |    blob_overlay_function 
--X 
--X  blob_substring_function  ::=
--X         SUBSTRING  LPAR   blob_value_expression  FROM  start_position  [ FOR  string_length  ]  RPAR 
--X 
--X  blob_trim_function  ::= TRIM  LPAR   blob_trim_operands   RPAR 
--X 
--X  blob_trim_operands  ::= [ [  trim_specification  ] [  trim_octet  ] FROM ]  blob_trim_source 
--X 
--X  blob_trim_source  ::=  blob_value_expression 
--X 
--X  trim_octet  ::=  blob_value_expression 
--X 
--X  blob_overlay_function  ::=
--X         OVERLAY  LPAR   blob_value_expression  PLACING  blob_value_expression 
--X         FROM  start_position  [ FOR  string_length  ]  RPAR 
--X 
--X  start_position  ::=  numeric_value_expression 
--X 
--X  string_length  ::=  numeric_value_expression 
--X 
--X 
--X 
--X  datetime_value_expression  ::=
--X          datetime_term 
--X     |    interval_value_expression   PLUS   datetime_term 
--X     |    datetime_value_expression   PLUS   interval_term 
--X     |    datetime_value_expression   MINUS   interval_term 
--X 
--X  datetime_term  ::=  datetime_factor 
--X 
--X  datetime_factor  ::=  datetime_primary  [  time_zone  ]
--X 
--X  datetime_primary  ::=  value_expression_primary  |  datetime_value_function 
--X 
--X  time_zone  ::= AT  time_zone_specifier 
--X 
--X  time_zone_specifier  ::= LOCAL | TIME ZONE  interval_primary 
--X 
--X 
--X 
--X  datetime_value_function  ::=
--X          current_date_value_function 
--X     |    current_time_value_function 
--X     |    current_timestamp_value_function 
--X     |    current_local_time_value_function 
--X     |    current_local_timestamp_value_function 
--X 
--X  current_date_value_function  ::= CURRENT_DATE
--X 
--X  current_time_value_function  ::= CURRENT_TIME [  LPAR   time_precision   RPAR  ]
--X 
--X  current_local_time_value_function  ::= LOCALTIME [  LPAR   time_precision   RPAR  ]
--X 
--X  current_timestamp_value_function  ::= CURRENT_TIMESTAMP [  LPAR   timestamp_precision   RPAR  ]
--X 
--X  current_local_timestamp_value_function  ::= LOCALTIMESTAMP [  LPAR   timestamp_precision   RPAR  ]
--X 
--X 
--X 
--X  interval_value_expression  ::=
--X          interval_term 
--X     |    interval_value_expression_1   PLUS   interval_term_1 
--X     |    interval_value_expression_1   MINUS   interval_term_1 
--X     |    LPAR   datetime_value_expression   MINUS   datetime_term   RPAR   interval_qualifier 
--X 
--X  interval_term  ::=
--X          interval_factor 
--X     |    interval_term_2   ASTERISK   factor 
--X     |    interval_term_2   SLASH   factor 
--X     |    term   ASTERISK   interval_factor 
--X 
--X  interval_factor  ::= [  sign  ]  interval_primary 
--X 
--X  interval_primary  ::=
--X          value_expression_primary  [  interval_qualifier  ]
--X     |    interval_value_function 
--X 
--X  interval_value_expression_1  ::=  interval_value_expression 
--X 
--X  interval_term_1  ::=  interval_term 
--X 
--X  interval_term_2  ::=  interval_term 
--X 
--X 
--X  interval_value_function  ::=  interval_absolute_value_function 
--X 
--X  interval_absolute_value_function  ::= ABS  LPAR   interval_value_expression   RPAR 
--X 
--X 
--X  array_value_expression  ::=  array_concatenation  |  array_factor 
--X 
--X  array_concatenation  ::=  array_value_expression_1   concatenation_operator   array_factor 
--X 
--X  array_value_expression_1  ::=  array_value_expression 
--X 
--X  array_factor  ::=  value_expression_primary 
--X 
--X 
--X  array_value_constructor  ::=
--X          array_value_constructor_by_enumeration 
--X     |    array_value_constructor_by_query 
--X 
--X  array_value_constructor_by_enumeration  ::=
--X         ARRAY  left_bracket_or_trigraph   array_element_list   right_bracket_or_trigraph 
--X 
--X  array_element_list  ::=  array_element  [ {  COMMA   array_element  }... ]
--X 
--X  array_element  ::=  value_expression 
--X 
--X  array_value_constructor_by_query  ::=
--X         ARRAY  LPAR   query_expression  [  order_by_clause  ]  RPAR 
--X 
--X 
--X  multiset_value_expression  ::=
--X          multiset_term 
--X     |    multiset_value_expression  MULTISET UNION all_distinct_opt  multiset_term 
--X     |    multiset_value_expression  MULTISET EXCEPT all_distinct_opt  multiset_term 
--X 
--X  multiset_term  ::=
--X          multiset_primary 
--X     |    multiset_term  MULTISET INTERSECT all_distinct_opt  multiset_primary 
--X 
--X  multiset_primary  ::=  multiset_value_function  |  value_expression_primary 
--X 
--X 
--X  multiset_value_function  ::=  multiset_set_function 
--X 
--X  multiset_set_function  ::= SET  LPAR   multiset_value_expression   RPAR 
--X 
--X 
--X  multiset_value_constructor  ::=
--X          multiset_value_constructor_by_enumeration 
--X     |    multiset_value_constructor_by_query 
--X     |    table_value_constructor_by_query 
--X 
--X  multiset_value_constructor_by_enumeration  ::= MULTISET  left_bracket_or_trigraph   multiset_element_list   right_bracket_or_trigraph 
--X 
--X  multiset_element_list  ::=  multiset_element  [ {  COMMA   multiset_element  } ]
--X 
--X  multiset_element  ::=  value_expression 
--X 
--X  multiset_value_constructor_by_query  ::= MULTISET  LPAR   query_expression   RPAR 
--X 
--X  table_value_constructor_by_query  ::= TABLE  LPAR   query_expression   RPAR 
--X 
--X 
--X 
--X 
--X 
--X  row_value_constructor  ::=
--X          common_value_expression 
--X     |    boolean_value_expression 
--X     |    explicit_row_value_constructor 
--X 
--X  explicit_row_value_constructor  ::=
--X          LPAR   row_value_constructor_element   COMMA   row_value_constructor_element_list   RPAR 
--X     |   ROW  LPAR   row_value_constructor_element_list   RPAR 
--X     |    row_subquery 
--X 
--X  row_value_constructor_element_list  ::=
--X          row_value_constructor_element  [ {  COMMA   row_value_constructor_element  }... ]
--X 
--X  row_value_constructor_element  ::=  value_expression 
--X 
--X  contextually_typed_row_value_constructor  ::=
--X          common_value_expression 
--X     |    boolean_value_expression 
--X     |    contextually_typed_value_specification 
--X     |    LPAR   contextually_typed_row_value_constructor_element   COMMA   contextually_typed_row_value_constructor_element_list   RPAR 
--X     |   ROW  LPAR   contextually_typed_row_value_constructor_element_list   RPAR 
--X 
--X  contextually_typed_row_value_constructor_element_list  ::=
--X          contextually_typed_row_value_constructor_element 
--X         [ {  COMMA   contextually_typed_row_value_constructor_element  }... ]
--X 
--X  contextually_typed_row_value_constructor_element  ::=
--X          value_expression 
--X     |    contextually_typed_value_specification 
--X 
--X  row_value_constructor_predicand  ::=
--X          common_value_expression 
--X     |    boolean_predicand 
--X     |    explicit_row_value_constructor 
--X 
--X 
--X 
--X  row_value_expression  ::=
--X          row_value_special_case 
--X     |    explicit_row_value_constructor 
--X 
--X  table_row_value_expression  ::=
--X          row_value_special_case 
--X     |    row_value_constructor 
--X 
--X  contextually_typed_row_value_expression  ::=
--X          row_value_special_case 
--X     |    contextually_typed_row_value_constructor 
--X 
--X  table_value_constructor  ::= VALUES  row_value_expression_list 
--X 
--X  row_value_expression_list  ::=  table_row_value_expression  [ {  COMMA   table_row_value_expression  }... ]
--X 
--X  contextually_typed_table_value_constructor  ::= VALUES  contextually_typed_row_value_expression_list 
--X 
--X  contextually_typed_row_value_expression_list  ::=  contextually_typed_row_value_expression  [ {  COMMA   contextually_typed_row_value_expression  }... ]
--X 
--X 
--X 
--X  table_expression  ::=
--X          from_clause 
--X         [  where_clause  ]
--X         [  group_by_clause  ]
--X         [  having_clause  ]
--X         [  window_clause  ]
--X 
--X 
--X 
--X  from_clause  ::= FROM  table_reference_list 
--X 
--X  table_reference_list  ::=  table_reference  [ {  COMMA   table_reference  }... ]
--X 
--X 
--X 
--X  table_reference  ::=  table_primary_or_joined_table  [  sample_clause  ]
--X 
--X  table_primary_or_joined_table  ::=  table_primary  |  joined_table 
--X 
--X  sample_clause  ::=
--X         TABLESAMPLE  sample_method   LPAR   sample_percentage   RPAR  [  repeatable_clause  ]
--X 
--X  sample_method  ::= BERNOULLI | SYSTEM
--X 
--X  repeatable_clause  ::= REPEATABLE  LPAR   repeat_argument   RPAR 
--X 
--X  sample_percentage  ::=  numeric_value_expression 
--X 
--X  repeat_argument  ::=  numeric_value_expression 
--X 
--X  table_primary  ::=
--X          table_or_query_name  [ [ AS ]  correlation_name  [  LPAR   derived_column_list   RPAR  ] ]
--X     |    derived_table  [ AS ]  correlation_name  [  LPAR   derived_column_list   RPAR  ]
--X     |    lateral_derived_table  [ AS ]  correlation_name  [  LPAR   derived_column_list   RPAR  ]
--X     |    collection_derived_table  [ AS ]  correlation_name  [  LPAR   derived_column_list   RPAR  ]
--X     |    table_function_derived_table  [ AS ]  correlation_name  [  LPAR   derived_column_list   RPAR  ]
--X     |    only_spec  [ [ AS ]  correlation_name  [  LPAR   derived_column_list   RPAR  ] ]
--X     |    LPAR   joined_table   RPAR 
--X 
--X  only_spec  ::= ONLY  LPAR   table_or_query_name   RPAR 
--X 
--X  lateral_derived_table  ::= LATERAL  table_subquery 
--X 
--X  collection_derived_table  ::= UNNEST  LPAR   collection_value_expression   RPAR  [ WITH ORDINALITY ]
--X 
--X  table_function_derived_table  ::= TABLE  LPAR   collection_value_expression   RPAR 
--X 
--X  derived_table  ::=  table_subquery 
--X 
--X  table_or_query_name  ::=  table_name  |  query_name 
--X 
--X  derived_column_list  ::=  column_name_list 
--X 
--X  
--X 
--X 
--X 
--X  joined_table  ::=
--X          cross_join 
--X     |    qualified_join 
--X     |    natural_join 
--X     |    union_join 
--X 
--X  cross_join  ::=  table_reference  CROSS JOIN  table_primary 
--X 
--X  qualified_join  ::=  table_reference  [  join_type  ] JOIN  table_reference   join_specification 
--X 
--X  natural_join  ::=  table_reference  NATURAL [  join_type  ] JOIN  table_primary 
--X 
--X  union_join  ::=  table_reference  UNION JOIN  table_primary 
--X 
--X  join_specification  ::=  join_condition  |  named_columns_join 
--X 
--X  join_condition  ::= ON  search_condition 
--X 
--X  named_columns_join  ::= USING  LPAR   join_column_list   RPAR 
--X 
--X  join_type  ::= INNER |  outer_join_type  [ OUTER ] 
--X 
--X  outer_join_type  ::= LEFT | RIGHT | FULL
--X 
--X  join_column_list  ::=  column_name_list 
--X 
--X 
--X 
--X  where_clause  ::= WHERE  search_condition 
--X 
--X 
--X 
--X  group_by_clause  ::= GROUP BY [  set_quantifier  ]  grouping_element_list 
--X 
--X  grouping_element_list  ::=  grouping_element  [ {  COMMA   grouping_element  }... ]
--X 
--X  grouping_element  ::=
--X          ordinary_grouping_set 
--X     |    rollup_list 
--X     |    cube_list 
--X     |    grouping_sets_specification 
--X     |    empty_grouping_set 
--X 
--X  ordinary_grouping_set  ::=
--X          grouping_column_reference 
--X     |    LPAR   grouping_column_reference_list   RPAR 
--X 
--X  grouping_column_reference  ::=  column_reference  [  collate_clause  ]
--X 
--X  grouping_column_reference_list  ::=  grouping_column_reference  [ {  COMMA   grouping_column_reference  }... ]
--X 
--X  rollup_list  ::= ROLLUP  LPAR   ordinary_grouping_set_list   RPAR 
--X 
--X  ordinary_grouping_set_list  ::=  ordinary_grouping_set  [ {  COMMA   ordinary_grouping_set  }... ]
--X 
--X  cube_list  ::= CUBE  LPAR   ordinary_grouping_set_list   RPAR 
--X 
--X  grouping_sets_specification  ::= GROUPING SETS  LPAR   grouping_set_list   RPAR 
--X 
--X  grouping_set_list  ::=  grouping_set  [ {  COMMA   grouping_set  }... ]
--X 
--X  grouping_set  ::=
--X          ordinary_grouping_set 
--X     |    rollup_list 
--X     |    cube_list 
--X     |    grouping_sets_specification 
--X     |    empty_grouping_set 
--X 
--X  empty_grouping_set  ::=  LPAR   RPAR 
--X 
--X 
--X 
--X  having_clause  ::= HAVING  search_condition 
--X 
--X 
--X 
--X  window_clause  ::= WINDOW  window_definition_list 
--X 
--X  window_definition_list  ::=  window_definition  [ {  COMMA   window_definition  }... ]
--X 
--X  window_definition  ::=  new_window_name  AS  window_specification 
--X 
--X  new_window_name  ::=  window_name 
--X 
--X  window_specification  ::=  LPAR   window_specification_details   RPAR 
--X 
--X  window_specification_details  ::=
--X         [  existing_window_name  ] [  window_partition_clause  ] [  window_order_clause  ] [  window_frame_clause  ]
--X 
--X  existing_window_name  ::=  window_name 
--X 
--X  window_partition_clause  ::= PARTITION BY  window_partition_column_reference_list 
--X 
--X  window_partition_column_reference_list  ::=  window_partition_column_reference  [ {  COMMA   window_partition_column_reference  }... ]
--X 
--X  window_partition_column_reference  ::=  column_reference  [  collate_clause  ]
--X 
--X  window_order_clause  ::= ORDER BY  sort_specification_list 
--X 
--X  window_frame_clause  ::=  window_frame_units   window_frame_extent  [  window_frame_exclusion  ]
--X 
--X  window_frame_units  ::= ROWS | RANGE
--X 
--X  window_frame_extent  ::=  window_frame_start  |  window_frame_between 
--X 
--X  window_frame_start  ::= UNBOUNDED PRECEDING |  window_frame_preceding  | CURRENT ROW
--X 
--X  window_frame_preceding  ::=  unsigned_value_specification  PRECEDING
--X 
--X  window_frame_between  ::= BETWEEN  window_frame_bound_1  AND  window_frame_bound_2 
--X 
--X  window_frame_bound_1  ::=  window_frame_bound 
--X 
--X  window_frame_bound_2  ::=  window_frame_bound 
--X 
--X  window_frame_bound  ::=
--X          window_frame_start 
--X     |   UNBOUNDED FOLLOWING
--X     |    window_frame_following 
--X 
--X  window_frame_following  ::=  unsigned_value_specification  FOLLOWING
--X 
--X  window_frame_exclusion  ::=
--X         EXCLUDE CURRENT ROW
--X     |   EXCLUDE GROUP
--X     |   EXCLUDE TIES
--X     |   EXCLUDE NO OTHERS
--X 
--X 
--X 
--X  query_specification  ::= SELECT [  set_quantifier  ]  select_list   table_expression 
--X 
--X  select_list  ::=  ASTERISK  |  select_sublist  [ {  COMMA   select_sublist  }... ]
--X 
--X  select_sublist  ::=  derived_column  |  qualified_asterisk 
--X 
--X  qualified_asterisk  ::=
--X          asterisked_identifier_chain   DOT   ASTERISK 
--X     |    all_fields_reference 
--X 
--X  asterisked_identifier_chain  ::=  asterisked_identifier  [ {  DOT   asterisked_identifier  }... ]
--X 
--X  asterisked_identifier  ::=  identifier 
--X 
--X  derived_column  ::=  value_expression  [  as_clause  ]
--X 
--X  as_clause  ::= [ AS ]  column_name 
--X 
--X  all_fields_reference  ::=  value_expression_primary   DOT   ASTERISK  [ AS  LPAR   all_fields_column_name_list   RPAR  ]
--X 
--X  all_fields_column_name_list  ::=  column_name_list 
--X 
--X 
--X 
--X  
--X  language_clause  ::= LANGUAGE  language_name 
--X 
--X  language_name  ::= ADA | C | COBOL | FORTRAN | MUMPS | PASCAL | PLI | SQL
--X 
--X 
--X --##  table_border=1 
--X --##  tr   th  Language keyword  /th   th  Relevant standard  /th   /tr 
--X --##  tr  td ADA /td  td ISO/IEC 8652 /td  /tr 
--X --##  tr  td C /td  td ISO/IEC 9899 /td  /tr 
--X --##  tr  td COBOL /td  td ISO 1989 /td  /tr 
--X --##  tr  td FORTRAN /td  td ISO 1539 /td  /tr 
--X --##  tr  td MUMPS /td  td ISO/IEC 11756 /td  /tr 
--X --##  tr  td PASCAL /td  td ISO/IEC 7185 and ISO/IEC 10206 /td  /tr 
--X --##  tr  td PLI /td  td ISO 6160 /td  /tr 
--X --##  tr  td SQL /td  td ISO/IEC 9075 /td  /tr 
--X --##  /table 
--X 
--X 
--X 
--X  path_specification  ::= PATH  schema_name_list 
--X 
--X  schema_name_list  ::=  schema_name  [ {  COMMA   schema_name  }... ]
--X 
--X 
--X 
--X  routine_invocation  ::=  routine_name   SQL_argument_list 
--X 
--X  routine_name  ::= [  schema_name   DOT  ]  qualified_identifier 
--X 
--X  SQL_argument_list  ::=  LPAR  [  SQL_argument  [ {  COMMA   SQL_argument  }... ] ]  RPAR 
--X 
--X  SQL_argument  ::=
--X          value_expression 
--X     |    generalized_expression 
--X     |    target_specification 
--X 
--X  generalized_expression  ::=  value_expression  AS  path_resolved_user_defined_type_name 
--X 
--X 
--X 
--X  specific_routine_designator  ::=
--X         SPECIFIC  routine_type   specific_name 
--X             |    routine_type   member_name 
--X         [ FOR  schema_resolved_user_defined_type_name  ]
--X 
--X  routine_type  ::=
--X         ROUTINE
--X     |   FUNCTION
--X     |   PROCEDURE
--X     |   [ INSTANCE | STATIC | CONSTRUCTOR ] METHOD
--X 
--X  member_name  ::=  member_name_alternatives  [  data_type_list  ]
--X 
--X  member_name_alternatives  ::=  schema_qualified_routine_name  |  method_name 
--X 
--X  data_type_list  ::=  LPAR  [  data_type  [ {  COMMA   data_type  }... ] ]  RPAR 
--X 
--X 
--X 
--X  collate_clause  ::= COLLATE  collation_name 
--X 
--X 
--X 
--X  constraint_name_definition  ::= CONSTRAINT  constraint_name 
--X 
--X  constraint_characteristics  ::=
--X          constraint_check_time  [ not_opt DEFERRABLE ]
--X     |   not_opt DEFERRABLE [  constraint_check_time  ]
--X 
--X  constraint_check_time  ::= INITIALLY DEFERRED | INITIALLY IMMEDIATE
--X 
--X 
--X 
--X  aggregate_function  ::=
--X         COUNT  LPAR   ASTERISK   RPAR  [  filter_clause  ]
--X     |    general_set_function  [  filter_clause  ]
--X     |    binary_set_function  [  filter_clause  ]
--X     |    ordered_set_function  [  filter_clause  ]
--X 
--X  general_set_function  ::=  set_function_type   LPAR  [  set_quantifier  ]  value_expression   RPAR 
--X 
--X  set_function_type  ::=  computational_operation 
--X 
--X  computational_operation  ::=
--X         AVG | MAX | MIN | SUM
--X     |   EVERY | ANY | SOME
--X     |   COUNT
--X     |   STDDEV_POP | STDDEV_SAMP | VAR_SAMP | VAR_POP
--X     |   COLLECT | FUSION | INTERSECTION
--X 
--X  set_quantifier  ::= DISTINCT | ALL
--X 
--X  filter_clause  ::= FILTER  LPAR  WHERE  search_condition   RPAR 
--X 
--X  binary_set_function  ::=  binary_set_function_type   LPAR   dependent_variable_expression   COMMA   independent_variable_expression   RPAR 
--X 
--X  binary_set_function_type  ::=
--X         COVAR_POP | COVAR_SAMP | CORR | REGR_SLOPE
--X     |   REGR_INTERCEPT | REGR_COUNT | REGR_R2 | REGR_AVGX | REGR_AVGY
--X     |   REGR_SXX | REGR_SYY | REGR_SXY
--X 
--X  dependent_variable_expression  ::=  numeric_value_expression 
--X 
--X  independent_variable_expression  ::=  numeric_value_expression 
--X 
--X  ordered_set_function  ::=  hypothetical_set_function  |  inverse_distribution_function 
--X 
--X  hypothetical_set_function  ::=  rank_function_type   LPAR   hypothetical_set_function_value_expression_list   RPAR   within_group_specification 
--X 
--X  within_group_specification  ::= WITHIN GROUP  LPAR  ORDER BY  sort_specification_list   RPAR 
--X 
--X  hypothetical_set_function_value_expression_list  ::=  value_expression  [ {  COMMA   value_expression  }... ]
--X 
--X  inverse_distribution_function  ::=  inverse_distribution_function_type   LPAR   inverse_distribution_function_argument   RPAR   within_group_specification 
--X 
--X  inverse_distribution_function_argument  ::=  numeric_value_expression 
--X 
--X  inverse_distribution_function_type  ::= PERCENTILE_CONT | PERCENTILE_DISC
--X 
--X 
--X 
--X 
--X 
--X 
--X 
--X  schema_definition  ::= CREATE SCHEMA  schema_name_clause  [  schema_character_set_or_path  ] [  schema_element ... ]
--X 
--X  schema_character_set_or_path  ::=
--X          schema_character_set_specification 
--X     |    schema_path_specification 
--X     |    schema_character_set_specification   schema_path_specification 
--X     |    schema_path_specification   schema_character_set_specification 
--X 
--X  schema_name_clause  ::=
--X          schema_name 
--X     |   AUTHORIZATION  schema_authorization_identifier 
--X     |    schema_name  AUTHORIZATION  schema_authorization_identifier 
--X 
--X  schema_authorization_identifier  ::=  authorization_identifier 
--X 
--X  schema_character_set_specification  ::= DEFAULT CHARACTER SET  character_set_specification 
--X 
--X  schema_path_specification  ::=  path_specification 
--X 
--X  schema_element  ::=
--X          table_definition 
--X     |    view_definition 
--X     |    domain_definition 
--X     |    character_set_definition 
--X     |    collation_definition 
--X     |    transliteration_definition 
--X     |    assertion_definition 
--X     |    trigger_definition 
--X     |    user_defined_type_definition 
--X     |    user_defined_cast_definition 
--X     |    user_defined_ordering_definition 
--X     |    transform_definition 
--X     |    schema_routine 
--X     |    sequence_generator_definition 
--X     |    grant_statement 
--X     |    role_definition 
--X 
--X 
--X 
--X  drop_schema_statement  ::= DROP SCHEMA  schema_name   drop_behavior 
--X 
--X  drop_behavior  ::= CASCADE | RESTRICT
--X 
--X 
--X 
--X  table_definition  ::=
--X         CREATE [  table_scope  ] TABLE  table_name   table_contents_source 
--X         [ ON COMMIT  table_commit_action  ROWS ]
--X 
--X  table_contents_source  ::=
--X          table_element_list 
--X     |   OF  path_resolved_user_defined_type_name  [  subtable_clause  ] [  table_element_list  ]
--X     |    as_subquery_clause 
--X 
--X  table_scope  ::=  global_or_local  TEMPORARY
--X 
--X  global_or_local  ::= GLOBAL | LOCAL
--X 
--X  table_commit_action  ::= PRESERVE | DELETE
--X 
--X  table_element_list  ::=  LPAR   table_element  [ {  COMMA   table_element  }... ]  RPAR 
--X 
--X  table_element  ::=
--X          column_definition 
--X     |    table_constraint_definition 
--X     |    like_clause 
--X     |    self_referencing_column_specification 
--X     |    column_options 
--X 
--X  self_referencing_column_specification  ::= REF IS  self_referencing_column_name   reference_generation 
--X 
--X  reference_generation  ::= SYSTEM GENERATED | USER GENERATED | DERIVED
--X 
--X  self_referencing_column_name  ::=  column_name 
--X 
--X  column_options  ::=  column_name  WITH OPTIONS  column_option_list 
--X 
--X  column_option_list  ::= [  scope_clause  ] [  default_clause  ] [  column_constraint_definition ... ]
--X 
--X  subtable_clause  ::= UNDER  supertable_clause 
--X 
--X  supertable_clause  ::=  supertable_name 
--X 
--X  supertable_name  ::=  table_name 
--X 
--X  like_clause  ::= LIKE  table_name  [  like_options  ]
--X 
--X  like_options  ::=  identity_option  |  column_default_option 
--X 
--X  identity_option  ::= INCLUDING IDENTITY | EXCLUDING IDENTITY
--X 
--X  column_default_option  ::= INCLUDING DEFAULTS | EXCLUDING DEFAULTS
--X 
--X  as_subquery_clause  ::= [  LPAR   column_name_list   RPAR  ] AS  subquery   with_or_without_data 
--X 
--X  with_or_without_data  ::= WITH NO DATA | WITH DATA
--X 
--X 
--X 
--X  column_definition  ::=
--X          column_name  [  data_type  |  domain_name  ] [  reference_scope_check  ]
--X         [  default_clause  |  identity_column_specification  |  generation_clause  ]
--X         [  column_constraint_definition ... ] [  collate_clause  ]
--X 
--X  column_constraint_definition  ::= [  constraint_name_definition  ]  column_constraint  [  constraint_characteristics  ]
--X 
--X  column_constraint  ::=
--X         NOT NULL
--X     |    unique_specification 
--X     |    references_specification 
--X     |    check_constraint_definition 
--X 
--X  reference_scope_check  ::= REFERENCES ARE not_opt CHECKED [ ON DELETE  reference_scope_check_action  ]
--X 
--X  reference_scope_check_action  ::=  referential_action 
--X 
--X  identity_column_specification  ::=
--X         GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY
--X         [  LPAR   common_sequence_generator_options   RPAR  ]
--X 
--X  generation_clause  ::=  generation_rule  AS  generation_expression 
--X 
--X  generation_rule  ::= GENERATED ALWAYS
--X 
--X  generation_expression  ::=  LPAR   value_expression   RPAR 
--X 
--X 
--X 
--X  default_clause  ::= DEFAULT  default_option 
--X 
--X  default_option  ::=
--X          literal 
--X     |    datetime_value_function 
--X     |   USER
--X     |   CURRENT_USER
--X     |   CURRENT_ROLE
--X     |   SESSION_USER
--X     |   SYSTEM_USER
--X     |   CURRENT_PATH
--X     |    implicitly_typed_value_specification 
--X 
--X 
--X 
--X  table_constraint_definition  ::= [  constraint_name_definition  ]  table_constraint  [  constraint_characteristics  ]
--X 
--X  table_constraint  ::=
--X          unique_constraint_definition 
--X     |    referential_constraint_definition 
--X     |    check_constraint_definition 
--X 
--X 
--X 
--X  unique_constraint_definition  ::=
--X          unique_specification   LPAR   unique_column_list   RPAR 
--X     |   UNIQUE ( VALUE )
--X 
--X  unique_specification  ::= UNIQUE | PRIMARY KEY
--X 
--X  unique_column_list  ::=  column_name_list 
--X 
--X 
--X 
--X  referential_constraint_definition  ::= FOREIGN KEY  LPAR   referencing_columns   RPAR   references_specification 
--X 
--X  references_specification  ::= REFERENCES  referenced_table_and_columns  [ MATCH  match_type  ] [  referential_triggered_action  ]
--X 
--X  match_type  ::= FULL | PARTIAL | SIMPLE
--X 
--X  referencing_columns  ::=  reference_column_list 
--X 
--X  referenced_table_and_columns  ::=  table_name  [  LPAR   reference_column_list   RPAR  ]
--X 
--X  reference_column_list  ::=  column_name_list 
--X 
--X  referential_triggered_action  ::=  update_rule  [  delete_rule  ] |  delete_rule  [  update_rule  ]
--X 
--X  update_rule  ::= ON UPDATE  referential_action 
--X 
--X  delete_rule  ::= ON DELETE  referential_action 
--X 
--X  referential_action  ::= CASCADE | SET NULL | SET DEFAULT | RESTRICT | NO ACTION
--X 
--X 
--X 
--X  check_constraint_definition  ::= CHECK  LPAR   search_condition   RPAR 
--X 
--X 
--X 
--X  alter_table_statement  ::= ALTER TABLE  table_name   alter_table_action 
--X 
--X  alter_table_action  ::=
--X          add_column_definition 
--X     |    alter_column_definition 
--X     |    drop_column_definition 
--X     |    add_table_constraint_definition 
--X     |    drop_table_constraint_definition 
--X 
--X 
--X 
--X  add_column_definition  ::= ADD [ COLUMN ]  column_definition 
--X 
--X 
--X 
--X  alter_column_definition  ::= ALTER [ COLUMN ]  column_name   alter_column_action 
--X 
--X  alter_column_action  ::=
--X          set_column_default_clause 
--X     |    drop_column_default_clause 
--X     |    add_column_scope_clause 
--X     |    drop_column_scope_clause 
--X     |    alter_identity_column_specification 
--X 
--X 
--X 
--X  set_column_default_clause  ::= SET  default_clause 
--X 
--X 
--X 
--X  drop_column_default_clause  ::= DROP DEFAULT
--X 
--X 
--X 
--X  add_column_scope_clause  ::= ADD  scope_clause 
--X 
--X 
--X 
--X  drop_column_scope_clause  ::= DROP SCOPE  drop_behavior 
--X 
--X 
--X 
--X  alter_identity_column_specification  ::=  alter_identity_column_option ...
--X 
--X  alter_identity_column_option  ::=
--X          alter_sequence_generator_restart_option 
--X     |   SET  basic_sequence_generator_option 
--X 
--X 
--X 
--X  drop_column_definition  ::= DROP [ COLUMN ]  column_name   drop_behavior 
--X 
--X 
--X 
--X  add_table_constraint_definition  ::= ADD  table_constraint_definition 
--X 
--X 
--X 
--X  drop_table_constraint_definition  ::= DROP CONSTRAINT  constraint_name   drop_behavior 
--X 
--X 
--X 
--X  drop_table_statement  ::= DROP TABLE  table_name   drop_behavior 
--X 
--X 
--X 
--X  view_definition  ::=
--X         CREATE [ RECURSIVE ] VIEW  table_name   view_specification  AS  query_expression 
--X         [ WITH [  levels_clause  ] CHECK OPTION ]
--X 
--X  view_specification  ::=  regular_view_specification  |  referenceable_view_specification 
--X 
--X  regular_view_specification  ::= [  LPAR   view_column_list   RPAR  ]
--X 
--X  referenceable_view_specification  ::= OF  path_resolved_user_defined_type_name  [  subview_clause  ] [  view_element_list  ]
--X 
--X  subview_clause  ::= UNDER  table_name 
--X 
--X  view_element_list  ::=  LPAR   view_element  [ {  COMMA   view_element  }... ]  RPAR 
--X 
--X  view_element  ::=  self_referencing_column_specification  |  view_column_option 
--X 
--X  view_column_option  ::=  column_name  WITH OPTIONS  scope_clause 
--X 
--X  levels_clause  ::= CASCADED | LOCAL
--X 
--X  view_column_list  ::=  column_name_list 
--X 
--X 
--X 
--X  drop_view_statement  ::= DROP VIEW  table_name   drop_behavior 
--X 
--X 
--X 
--X  domain_definition  ::=
--X         CREATE DOMAIN  domain_name  [ AS ]  data_type 
--X         [  default_clause  ] [  domain_constraint ... ] [  collate_clause  ]
--X 
--X  domain_constraint  ::= [  constraint_name_definition  ]  check_constraint_definition  [  constraint_characteristics  ]
--X 
--X 
--X 
--X  alter_domain_statement  ::= ALTER DOMAIN  domain_name   alter_domain_action 
--X 
--X  alter_domain_action  ::=
--X          set_domain_default_clause 
--X     |    drop_domain_default_clause 
--X     |    add_domain_constraint_definition 
--X     |    drop_domain_constraint_definition 
--X 
--X 
--X 
--X  set_domain_default_clause  ::= SET  default_clause 
--X 
--X 
--X 
--X  drop_domain_default_clause  ::= DROP DEFAULT
--X 
--X 
--X 
--X  add_domain_constraint_definition  ::= ADD  domain_constraint 
--X 
--X 
--X 
--X  drop_domain_constraint_definition  ::= DROP CONSTRAINT  constraint_name 
--X 
--X 
--X 
--X  drop_domain_statement  ::= DROP DOMAIN  domain_name   drop_behavior 
--X 
--X 
--X 
--X  character_set_definition  ::=
--X         CREATE CHARACTER SET  character_set_name  [ AS ]  character_set_source  [  collate_clause  ]
--X 
--X  character_set_source  ::= GET  character_set_specification 
--X 
--X 
--X 
--X  drop_character_set_statement  ::= DROP CHARACTER SET  character_set_name 
--X 
--X 
--X 
--X  collation_definition  ::=
--X         CREATE COLLATION  collation_name  FOR  character_set_specification 
--X         FROM  existing_collation_name  [  pad_characteristic  ]
--X 
--X  existing_collation_name  ::=  collation_name 
--X 
--X  pad_characteristic  ::= NO PAD | PAD SPACE
--X 
--X 
--X 
--X  drop_collation_statement  ::= DROP COLLATION  collation_name   drop_behavior 
--X 
--X 
--X 
--X  transliteration_definition  ::=
--X         CREATE TRANSLATION  transliteration_name  FOR  source_character_set_specification 
--X         TO  target_character_set_specification  FROM  transliteration_source 
--X 
--X  source_character_set_specification  ::=  character_set_specification 
--X 
--X  target_character_set_specification  ::=  character_set_specification 
--X 
--X  transliteration_source  ::=  existing_transliteration_name  |  transliteration_routine 
--X 
--X  existing_transliteration_name  ::=  transliteration_name 
--X 
--X  transliteration_routine  ::=  specific_routine_designator 
--X 
--X 
--X 
--X  drop_transliteration_statement  ::= DROP TRANSLATION  transliteration_name 
--X 
--X 
--X 
--X  assertion_definition  ::=
--X         CREATE ASSERTION  constraint_name  CHECK  LPAR   search_condition   RPAR  [  constraint_characteristics  ]
--X 
--X 
--X 
--X  drop_assertion_statement  ::= DROP ASSERTION  constraint_name 
--X 
--X 
--X 
--X  trigger_definition  ::=
--X         CREATE TRIGGER  trigger_name   trigger_action_time   trigger_event 
--X         ON  table_name  [ REFERENCING  old_or_new_values_alias_list  ]
--X          triggered_action 
--X 
--X  trigger_action_time  ::= BEFORE | AFTER
--X 
--X  trigger_event  ::= INSERT | DELETE | UPDATE [ OF  trigger_column_list  ]
--X 
--X  trigger_column_list  ::=  column_name_list 
--X 
--X  triggered_action  ::=
--X         [ FOR EACH { ROW | STATEMENT } ]
--X         [ WHEN  LPAR   search_condition   RPAR  ]
--X          triggered_SQL_statement 
--X 
--X  triggered_SQL_statement  ::=
--X          SQL_procedure_statement 
--X     |   BEGIN ATOMIC {  SQL_procedure_statement   SEMICOLON  }...  END
--X 
--X  old_or_new_values_alias_list  ::=  old_or_new_values_alias ...
--X 
--X  old_or_new_values_alias  ::=
--X         OLD [ ROW ] [ AS ]  old_values_correlation_name 
--X     |   NEW [ ROW ] [ AS ]  new_values_correlation_name 
--X     |   OLD TABLE [ AS ]  old_values_table_alias 
--X     |   NEW TABLE [ AS ]  new_values_table_alias 
--X 
--X  old_values_table_alias  ::=  identifier 
--X 
--X  new_values_table_alias  ::=  identifier 
--X 
--X  old_values_correlation_name  ::=  correlation_name 
--X 
--X  new_values_correlation_name  ::=  correlation_name 
--X 
--X 
--X 
--X  drop_trigger_statement  ::= DROP TRIGGER  trigger_name 
--X 
--X 
--X 
--X  user_defined_type_definition  ::= CREATE TYPE  user_defined_type_body 
--X 
--X  user_defined_type_body  ::=
--X          schema_resolved_user_defined_type_name  [  subtype_clause  ]
--X         [ AS  representation  ] [  user_defined_type_option_list  ] [  method_specification_list  ]
--X 
--X  user_defined_type_option_list  ::=  user_defined_type_option  [  user_defined_type_option ... ]
--X 
--X  user_defined_type_option  ::=
--X          instantiable_clause 
--X     |    finality 
--X     |    reference_type_specification 
--X     |    ref_cast_option 
--X     |    cast_option 
--X 
--X  subtype_clause  ::=
--X         UNDER  supertype_name 
--X 
--X  supertype_name  ::=
--X          path_resolved_user_defined_type_name 
--X 
--X  representation  ::=  predefined_type  |  member_list 
--X 
--X  member_list  ::=  LPAR   member  [ {  COMMA   member  }... ]  RPAR 
--X 
--X  member  ::=  attribute_definition 
--X 
--X  instantiable_clause  ::= INSTANTIABLE | NOT INSTANTIABLE
--X 
--X  finality  ::= FINAL | NOT FINAL
--X 
--X  reference_type_specification  ::=
--X          user_defined_representation 
--X     |    derived_representation 
--X     |    system_generated_representation 
--X 
--X  user_defined_representation  ::= REF USING  predefined_type 
--X 
--X  derived_representation  ::= REF FROM  list_of_attributes 
--X 
--X  system_generated_representation  ::= REF IS SYSTEM GENERATED
--X 
--X  ref_cast_option  ::= [  cast_to_ref  ] [  cast_to_type  ]
--X 
--X  cast_to_ref  ::= CAST  LPAR  SOURCE AS REF  RPAR  WITH  cast_to_ref_identifier 
--X 
--X  cast_to_ref_identifier  ::=  identifier 
--X 
--X  cast_to_type  ::= CAST  LPAR  REF AS SOURCE  RPAR  WITH  cast_to_type_identifier 
--X 
--X  cast_to_type_identifier  ::=  identifier 
--X 
--X  list_of_attributes  ::=  LPAR   attribute_name  [ {  COMMA   attribute_name  }...]  RPAR 
--X 
--X  cast_option  ::= [  cast_to_distinct  ] [  cast_to_source  ]
--X 
--X  cast_to_distinct  ::=
--X         CAST  LPAR  SOURCE AS DISTINCT  RPAR 
--X         WITH  cast_to_distinct_identifier 
--X 
--X  cast_to_distinct_identifier  ::=  identifier 
--X 
--X  cast_to_source  ::=
--X         CAST  LPAR  DISTINCT AS SOURCE  RPAR 
--X         WITH  cast_to_source_identifier 
--X 
--X  cast_to_source_identifier  ::=  identifier 
--X 
--X  method_specification_list  ::=  method_specification  [ {  COMMA   method_specification  }... ]
--X 
--X  method_specification  ::=  original_method_specification  |  overriding_method_specification 
--X 
--X  original_method_specification  ::=
--X          partial_method_specification  [ SELF AS RESULT ] [ SELF AS LOCATOR ] [  method_characteristics  ]
--X 
--X  overriding_method_specification  ::= OVERRIDING  partial_method_specification 
--X 
--X  partial_method_specification  ::=
--X         [ INSTANCE | STATIC | CONSTRUCTOR ] METHOD  method_name   SQL_parameter_declaration_list 
--X          returns_clause  [ SPECIFIC  specific_method_name  ]
--X 
--X  specific_method_name  ::= [  schema_name   DOT  ] qualified_identifier 
--X 
--X  method_characteristics  ::=  method_characteristic ...
--X 
--X  method_characteristic  ::=
--X          language_clause 
--X     |    parameter_style_clause 
--X     |    deterministic_characteristic 
--X     |    SQL_data_access_indication 
--X     |    null_call_clause 
--X 
--X 
--X 
--X  attribute_definition  ::=
--X          attribute_name   data_type  [  reference_scope_check  ] [  attribute_default  ] [  collate_clause  ]
--X 
--X  attribute_default  ::=  default_clause 
--X 
--X 
--X 
--X  alter_type_statement  ::=
--X ALTER TYPE  schema_resolved_user_defined_type_name   alter_type_action 
--X 
--X  alter_type_action  ::=
--X          add_attribute_definition 
--X     |    drop_attribute_definition 
--X     |    add_original_method_specification 
--X     |    add_overriding_method_specification 
--X     |    drop_method_specification 
--X 
--X 
--X 
--X  add_attribute_definition  ::= ADD ATTRIBUTE  attribute_definition 
--X 
--X 
--X 
--X  drop_attribute_definition  ::= DROP ATTRIBUTE  attribute_name  RESTRICT
--X 
--X 
--X 
--X  add_original_method_specification  ::= ADD  original_method_specification 
--X 
--X 
--X 
--X  add_overriding_method_specification  ::= ADD  overriding_method_specification 
--X 
--X 
--X 
--X  drop_method_specification  ::= DROP  specific_method_specification_designator  RESTRICT
--X 
--X  specific_method_specification_designator  ::= [ INSTANCE | STATIC | CONSTRUCTOR ] METHOD  method_name   data_type_list 
--X 
--X 
--X 
--X  drop_data_type_statement  ::= DROP TYPE  schema_resolved_user_defined_type_name   drop_behavior 
--X 
--X 
--X 
--X  SQL_invoked_routine  ::=  schema_routine 
--X 
--X  schema_routine  ::=  schema_procedure  |  schema_function 
--X 
--X  schema_procedure  ::= CREATE  SQL_invoked_procedure 
--X 
--X  schema_function  ::= CREATE  SQL_invoked_function 
--X 
--X  SQL_invoked_procedure  ::=
--X         PROCEDURE  schema_qualified_routine_name   SQL_parameter_declaration_list   routine_characteristics   routine_body 
--X 
--X  SQL_invoked_function  ::=
--X         {  function_specification  |  method_specification_designator  }  routine_body 
--X 
--X  SQL_parameter_declaration_list  ::=
--X          LPAR  [  SQL_parameter_declaration  [ {  COMMA   SQL_parameter_declaration  }... ] ]  RPAR 
--X 
--X  SQL_parameter_declaration  ::= [  parameter_mode  ] [  SQL_parameter_name  ]  parameter_type  [ RESULT ]
--X 
--X  parameter_mode  ::= IN | OUT | INOUT
--X 
--X  parameter_type  ::=  data_type  [  locator_indication  ]
--X 
--X  locator_indication  ::= AS LOCATOR
--X 
--X  function_specification  ::=
--X         FUNCTION  schema_qualified_routine_name 
--X          SQL_parameter_declaration_list   returns_clause   routine_characteristics  [  dispatch_clause  ]
--X 
--X  method_specification_designator  ::=
--X         SPECIFIC METHOD  specific_method_name 
--X     |   [ INSTANCE | STATIC | CONSTRUCTOR ] METHOD  method_name   SQL_parameter_declaration_list 
--X         [  returns_clause  ] FOR  schema_resolved_user_defined_type_name 
--X 
--X  routine_characteristics  ::= [  routine_characteristic ... ]
--X 
--X  routine_characteristic  ::=
--X          language_clause 
--X     |    parameter_style_clause 
--X     |   SPECIFIC  specific_name 
--X     |    deterministic_characteristic 
--X     |    SQL_data_access_indication 
--X     |    null_call_clause 
--X     |    dynamic_result_sets_characteristic 
--X     |    savepoint_level_indication 
--X 
--X  savepoint_level_indication  ::= NEW SAVEPOINT LEVEL | OLD SAVEPOINT LEVEL
--X 
--X  dynamic_result_sets_characteristic  ::= DYNAMIC RESULT SETS  maximum_dynamic_result_sets 
--X 
--X  parameter_style_clause  ::= PARAMETER STYLE  parameter_style 
--X 
--X  dispatch_clause  ::= STATIC DISPATCH
--X 
--X  returns_clause  ::= RETURNS  returns_type 
--X 
--X  returns_type  ::=
--X          returns_data_type  [  result_cast  ]
--X     |    returns_table_type 
--X 
--X  returns_table_type  ::= TABLE  table_function_column_list 
--X 
--X  table_function_column_list  ::=
--X          LPAR 
--X          table_function_column_list_element  [ {  COMMA   table_function_column_list_element  }... ]
--X          RPAR 
--X 
--X  table_function_column_list_element  ::=  column_name   data_type 
--X 
--X  result_cast  ::= CAST FROM  result_cast_from_type 
--X 
--X  result_cast_from_type  ::=  data_type  [  locator_indication  ]
--X 
--X  returns_data_type  ::=  data_type  [  locator_indication  ]
--X 
--X  routine_body  ::=
--X          SQL_routine_spec 
--X     |    external_body_reference 
--X 
--X  SQL_routine_spec  ::= [  rights_clause  ]  SQL_routine_body 
--X 
--X  rights_clause  ::= SQL SECURITY INVOKER | SQL SECURITY DEFINER
--X 
--X  SQL_routine_body  ::=  SQL_procedure_statement 
--X 
--X  external_body_reference  ::=
--X         EXTERNAL [ NAME  external_routine_name  ] [  parameter_style_clause  ]
--X         [  transform_group_specification  ] [  external_security_clause  ]
--X 
--X  external_security_clause  ::=
--X         EXTERNAL SECURITY DEFINER
--X     |   EXTERNAL SECURITY INVOKER
--X     |   EXTERNAL SECURITY IMPLEMENTATION DEFINED
--X 
--X  parameter_style  ::= SQL | GENERAL
--X 
--X  deterministic_characteristic  ::= DETERMINISTIC | NOT DETERMINISTIC
--X 
--X  SQL_data_access_indication  ::=
--X         NO SQL
--X     |   CONTAINS SQL
--X     |   READS SQL DATA
--X     |   MODIFIES SQL DATA
--X 
--X  null_call_clause  ::=
--X         RETURNS NULL ON NULL INPUT
--X     |   CALLED ON NULL INPUT
--X 
--X  maximum_dynamic_result_sets  ::=  unsigned_integer 
--X 
--X  transform_group_specification  ::= TRANSFORM GROUP {  single_group_specification  |  multiple_group_specification  }
--X 
--X  single_group_specification  ::=  group_name 
--X 
--X  multiple_group_specification  ::=  group_specification  [ {  COMMA   group_specification  }... ]
--X 
--X  group_specification  ::=  group_name  FOR TYPE  path_resolved_user_defined_type_name 
--X 
--X 
--X 
--X  alter_routine_statement  ::= ALTER  specific_routine_designator   alter_routine_characteristics   alter_routine_behavior 
--X 
--X  alter_routine_characteristics  ::=  alter_routine_characteristic ...
--X 
--X  alter_routine_characteristic  ::=
--X          language_clause 
--X     |    parameter_style_clause 
--X     |    SQL_data_access_indication 
--X     |    null_call_clause 
--X     |    dynamic_result_sets_characteristic 
--X     |   NAME  external_routine_name 
--X 
--X  alter_routine_behavior  ::= RESTRICT
--X 
--X 
--X 
--X  drop_routine_statement  ::= DROP  specific_routine_designator   drop_behavior 
--X 
--X 
--X 
--X  user_defined_cast_definition  ::=
--X         CREATE CAST  LPAR   source_data_type  AS  target_data_type   RPAR 
--X         WITH  cast_function  [ AS ASSIGNMENT ]
--X 
--X  cast_function  ::=  specific_routine_designator 
--X 
--X  source_data_type  ::=  data_type 
--X 
--X  target_data_type  ::=  data_type 
--X 
--X 
--X 
--X  drop_user_defined_cast_statement  ::=
--X         DROP CAST  LPAR   source_data_type  AS  target_data_type   RPAR   drop_behavior 
--X 
--X 
--X 
--X  user_defined_ordering_definition  ::=
--X         CREATE ORDERING FOR  schema_resolved_user_defined_type_name   ordering_form 
--X 
--X  ordering_form  ::=  equals_ordering_form  |  full_ordering_form 
--X 
--X  equals_ordering_form  ::= EQUALS ONLY BY  ordering_category 
--X 
--X  full_ordering_form  ::= ORDER FULL BY  ordering_category 
--X 
--X  ordering_category  ::=  relative_category  |  map_category  |  state_category 
--X 
--X  relative_category  ::= RELATIVE WITH  relative_function_specification 
--X 
--X  map_category  ::= MAP WITH  map_function_specification 
--X 
--X  state_category  ::= STATE [  specific_name  ]
--X 
--X  relative_function_specification  ::=  specific_routine_designator 
--X 
--X  map_function_specification  ::=  specific_routine_designator 
--X 
--X 
--X 
--X  drop_user_defined_ordering_statement  ::=
--X         DROP ORDERING FOR  schema_resolved_user_defined_type_name   drop_behavior 
--X 
--X 
--X 
--X  transform_definition  ::= CREATE { TRANSFORM | TRANSFORMS } FOR  schema_resolved_user_defined_type_name   transform_group ...
--X 
--X  transform_group  ::=  group_name   LPAR   transform_element_list   RPAR 
--X 
--X  group_name  ::=  identifier 
--X 
--X  transform_element_list  ::=  transform_element  [  COMMA   transform_element  ]
--X 
--X  transform_element  ::=  to_sql  |  from_sql 
--X 
--X  to_sql  ::= TO SQL WITH  to_sql_function 
--X 
--X  from_sql  ::= FROM SQL WITH  from_sql_function 
--X 
--X  to_sql_function  ::=  specific_routine_designator 
--X 
--X  from_sql_function  ::=  specific_routine_designator 
--X 
--X 
--X 
--X  alter_transform_statement  ::=
--X         ALTER { TRANSFORM | TRANSFORMS } FOR  schema_resolved_user_defined_type_name   alter_group ...
--X 
--X  alter_group  ::=  group_name   LPAR   alter_transform_action_list   RPAR 
--X 
--X  alter_transform_action_list  ::=  alter_transform_action  [ {  COMMA   alter_transform_action  }... ]
--X 
--X  alter_transform_action  ::=  add_transform_element_list  |  drop_transform_element_list 
--X 
--X 
--X 
--X  add_transform_element_list  ::= ADD  LPAR   transform_element_list   RPAR 
--X 
--X 
--X 
--X  drop_transform_element_list  ::= DROP  LPAR   transform_kind  [  COMMA   transform_kind  ]  drop_behavior   RPAR 
--X 
--X  transform_kind  ::= TO SQL | FROM SQL
--X 
--X 
--X 
--X  drop_transform_statement  ::=
--X         DROP { TRANSFORM | TRANSFORMS }  transforms_to_be_dropped  FOR  schema_resolved_user_defined_type_name   drop_behavior 
--X 
--X  transforms_to_be_dropped  ::= ALL |  transform_group_element 
--X 
--X  transform_group_element  ::=  group_name 
--X 
--X 
--X 
--X  sequence_generator_definition  ::= CREATE SEQUENCE  sequence_generator_name  [  sequence_generator_options  ]
--X 
--X  sequence_generator_options  ::=  sequence_generator_option  ...
--X 
--X  sequence_generator_option  ::=  sequence_generator_data_type_option  |  common_sequence_generator_options 
--X 
--X  common_sequence_generator_options  ::=  common_sequence_generator_option  ...
--X 
--X  common_sequence_generator_option  ::=  sequence_generator_start_with_option  |  basic_sequence_generator_option 
--X 
--X  basic_sequence_generator_option  ::=
--X          sequence_generator_increment_by_option 
--X     |    sequence_generator_maxvalue_option 
--X     |    sequence_generator_minvalue_option 
--X     |    sequence_generator_cycle_option 
--X 
--X  sequence_generator_data_type_option  ::= AS  data_type 
--X 
--X  sequence_generator_start_with_option  ::= START WITH  sequence_generator_start_value 
--X 
--X  sequence_generator_start_value  ::=  signed_numeric_literal 
--X 
--X  sequence_generator_increment_by_option  ::= INCREMENT BY  sequence_generator_increment 
--X 
--X  sequence_generator_increment  ::=  signed_numeric_literal 
--X 
--X  sequence_generator_maxvalue_option  ::=
--X         MAXVALUE  sequence_generator_max_value 
--X     |   NO MAXVALUE
--X 
--X  sequence_generator_max_value  ::=  signed_numeric_literal 
--X 
--X  sequence_generator_minvalue_option  ::= MINVALUE  sequence_generator_min_value  | NO MINVALUE
--X 
--X  sequence_generator_min_value  ::=  signed_numeric_literal 
--X 
--X  sequence_generator_cycle_option  ::= CYCLE | NO CYCLE
--X 
--X 
--X 
--X  alter_sequence_generator_statement  ::=
--X         ALTER SEQUENCE  sequence_generator_name   alter_sequence_generator_options 
--X 
--X  alter_sequence_generator_options  ::=  alter_sequence_generator_option ...
--X 
--X  alter_sequence_generator_option  ::=
--X          alter_sequence_generator_restart_option 
--X     |    basic_sequence_generator_option 
--X 
--X  alter_sequence_generator_restart_option  ::= RESTART WITH  sequence_generator_restart_value 
--X 
--X  sequence_generator_restart_value  ::=  signed_numeric_literal 
--X 
--X 
--X 
--X  drop_sequence_generator_statement  ::= DROP SEQUENCE  sequence_generator_name   drop_behavior 
--X 
--X 
--X 
--X 
--X 
--X  grant_statement  ::=  grant_privilege_statement  |  grant_role_statement 
--X 
--X 
--X 
--X  grant_privilege_statement  ::=
--X         GRANT  privileges  TO  grantee  [ {  COMMA   grantee  }... ]
--X         [ WITH HIERARCHY OPTION ] [ WITH GRANT OPTION ] [ GRANTED BY  grantor  ]
--X 
--X 
--X 
--X  privileges  ::=  object_privileges  ON  object_name 
--X 
--X  object_name  ::=
--X         [ TABLE ]  table_name 
--X     |   DOMAIN  domain_name 
--X     |   COLLATION  collation_name 
--X     |   CHARACTER SET  character_set_name 
--X     |   TRANSLATION  transliteration_name 
--X     |   TYPE  schema_resolved_user_defined_type_name 
--X     |   SEQUENCE  sequence_generator_name 
--X     |    specific_routine_designator 
--X 
--X  object_privileges  ::=
--X         ALL PRIVILEGES
--X     |    action  [ {  COMMA   action  }... ]
--X 
--X  action  ::=
--X         SELECT
--X     |   SELECT  LPAR   privilege_column_list   RPAR 
--X     |   SELECT  LPAR   privilege_method_list   RPAR 
--X     |   DELETE
--X     |   INSERT [  LPAR   privilege_column_list   RPAR  ]
--X     |   UPDATE [  LPAR   privilege_column_list   RPAR  ]
--X     |   REFERENCES [  LPAR   privilege_column_list   RPAR  ]
--X     |   USAGE
--X     |   TRIGGER
--X     |   UNDER
--X     |   EXECUTE
--X 
--X  privilege_method_list  ::=  specific_routine_designator  [ {  COMMA   specific_routine_designator  }... ]
--X 
--X  privilege_column_list  ::=  column_name_list 
--X 
--X  grantee  ::= PUBLIC |  authorization_identifier 
--X 
--X  grantor  ::= CURRENT_USER | CURRENT_ROLE
--X 
--X 
--X 
--X  role_definition  ::= CREATE ROLE  role_name  [ WITH ADMIN  grantor  ]
--X 
--X 
--X 
--X  grant_role_statement  ::=
--X         GRANT  role_granted  [ {  COMMA   role_granted  }... ]
--X         TO  grantee  [ {  COMMA   grantee  }... ] [ WITH ADMIN OPTION ] [ GRANTED BY  grantor  ]
--X 
--X  role_granted  ::=  role_name 
--X 
--X 
--X 
--X  drop_role_statement  ::= DROP ROLE  role_name 
--X 
--X 
--X 
--X  revoke_statement  ::=
--X          revoke_privilege_statement 
--X     |    revoke_role_statement 
--X 
--X  revoke_privilege_statement  ::=
--X         REVOKE [  revoke_option_extension  ]  privileges  FROM  grantee  [ {  COMMA   grantee  }... ]
--X         [ GRANTED BY  grantor  ]  drop_behavior 
--X 
--X  revoke_option_extension  ::= GRANT OPTION FOR | HIERARCHY OPTION FOR
--X 
--X  revoke_role_statement  ::=
--X         REVOKE [ ADMIN OPTION FOR ]  role_revoked  [ {  COMMA   role_revoked  }... ]
--X         FROM  grantee  [ {  COMMA   grantee  }... ] [ GRANTED BY  grantor  ]  drop_behavior 
--X 
--X  role_revoked  ::=  role_name 
--X 
--X 
--X 
--X 
--X 
--X  SQL_client_module_definition  ::=
--X          module_name_clause   language_clause   module_authorization_clause 
--X         [  module_path_specification  ]
--X         [  module_transform_group_specification  ]
--X         [  module_collation  ]
--X         [  temporary_table_declaration ... ]
--X          module_contents ...
--X 
--X  module_authorization_clause  ::=
--X         SCHEMA  schema_name 
--X     |   AUTHORIZATION  module_authorization_identifier  [ FOR STATIC { ONLY | AND DYNAMIC } ]
--X     |   SCHEMA  schema_name  AUTHORIZATION  module_authorization_identifier  [ FOR STATIC { ONLY | AND DYNAMIC } ]
--X 
--X  module_authorization_identifier  ::=  authorization_identifier 
--X 
--X  module_path_specification  ::=  path_specification 
--X 
--X  module_transform_group_specification  ::=  transform_group_specification 
--X 
--X  module_collations  ::=  module_collation_specification ...
--X 
--X  module_collation_specification  ::= COLLATION  collation_name  [ FOR  character_set_specification_list  ]
--X 
--X  character_set_specification_list  ::=  character_set_specification  [ {  COMMA   character_set_specification  }... ]
--X 
--X  module_contents  ::=
--X          declare_cursor 
--X     |    dynamic_declare_cursor 
--X     |    externally_invoked_procedure 
--X 
--X 
--X 
--X  module_name_clause  ::=
--X         MODULE [  SQL_client_module_name  ] [  module_character_set_specification  ]
--X 
--X  module_character_set_specification  ::= NAMES ARE  character_set_specification 
--X 
--X 
--X 
--X  externally_invoked_procedure  ::=
--X         PROCEDURE  procedure_name   host_parameter_declaration_list   SEMICOLON 
--X          SQL_procedure_statement   SEMICOLON 
--X 
--X  host_parameter_declaration_list  ::=
--X          LPAR   host_parameter_declaration  [ {  COMMA   host_parameter_declaration  }... ]  RPAR 
--X 
--X  host_parameter_declaration  ::=
--X          host_parameter_name   host_parameter_data_type 
--X     |    status_parameter 
--X 
--X  host_parameter_data_type  ::=  data_type  [  locator_indication  ]
--X 
--X  status_parameter  ::= SQLSTATE
--X 
--X 
--X 
--X 
--X  SQL_procedure_statement  ::=  SQL_executable_statement 
--X 
--X  SQL_executable_statement  ::=
--X          SQL_schema_statement 
--X     |    SQL_data_statement 
--X     |    SQL_control_statement 
--X     |    SQL_transaction_statement 
--X     |    SQL_connection_statement 
--X     |    SQL_session_statement 
--X     |    SQL_diagnostics_statement 
--X     |    SQL_dynamic_statement 
--X 
--X  SQL_schema_statement  ::=
--X          SQL_schema_definition_statement 
--X     |    SQL_schema_manipulation_statement 
--X 
--X  SQL_schema_definition_statement  ::=
--X          schema_definition 
--X     |    table_definition 
--X     |    view_definition 
--X     |    SQL_invoked_routine 
--X     |    grant_statement 
--X     |    role_definition 
--X     |    domain_definition 
--X     |    character_set_definition 
--X     |    collation_definition 
--X     |    transliteration_definition 
--X     |    assertion_definition 
--X     |    trigger_definition 
--X     |    user_defined_type_definition 
--X     |    user_defined_cast_definition 
--X     |    user_defined_ordering_definition 
--X     |    transform_definition 
--X     |    sequence_generator_definition 
--X 
--X  SQL_schema_manipulation_statement  ::=
--X          drop_schema_statement 
--X     |    alter_table_statement 
--X     |    drop_table_statement 
--X     |    drop_view_statement 
--X     |    alter_routine_statement 
--X     |    drop_routine_statement 
--X     |    drop_user_defined_cast_statement 
--X     |    revoke_statement 
--X     |    drop_role_statement 
--X     |    alter_domain_statement 
--X     |    drop_domain_statement 
--X     |    drop_character_set_statement 
--X     |    drop_collation_statement 
--X     |    drop_transliteration_statement 
--X     |    drop_assertion_statement 
--X     |    drop_trigger_statement 
--X     |    alter_type_statement 
--X     |    drop_data_type_statement 
--X     |    drop_user_defined_ordering_statement 
--X     |    alter_transform_statement 
--X     |    drop_transform_statement  |  alter_sequence_generator_statement 
--X     |    drop_sequence_generator_statement 
--X 
--X  SQL_data_statement  ::=
--X          open_statement 
--X     |    fetch_statement 
--X     |    close_statement 
--X     |    select_statement_single_row 
--X     |    free_locator_statement 
--X     |    hold_locator_statement 
--X     |    SQL_data_change_statement 
--X 
--X  SQL_data_change_statement  ::=
--X          delete_statement_positioned 
--X     |    delete_statement_searched 
--X     |    insert_statement 
--X     |    update_statement_positioned 
--X     |    update_statement_searched 
--X     |    merge_statement 
--X 
--X  SQL_control_statement  ::=
--X          call_statement 
--X     |    return_statement 
--X 
--X  SQL_transaction_statement  ::=
--X          start_transaction_statement 
--X     |    set_transaction_statement 
--X     |    set_constraints_mode_statement 
--X     |    savepoint_statement 
--X     |    release_savepoint_statement 
--X     |    commit_statement 
--X     |    rollback_statement 
--X 
--X  SQL_connection_statement  ::=
--X          connect_statement 
--X     |    set_connection_statement 
--X     |    disconnect_statement 
--X 
--X  SQL_session_statement  ::=
--X          set_session_user_identifier_statement 
--X     |    set_role_statement 
--X     |    set_local_time_zone_statement 
--X     |    set_session_characteristics_statement 
--X     |    set_catalog_statement 
--X     |    set_schema_statement 
--X     |    set_names_statement 
--X     |    set_path_statement 
--X     |    set_transform_group_statement 
--X     |    set_session_collation_statement 
--X 
--X  SQL_diagnostics_statement  ::=  get_diagnostics_statement 
--X 
--X  SQL_dynamic_statement  ::=
--X          system_descriptor_statement 
--X     |    prepare_statement 
--X     |    deallocate_prepared_statement 
--X     |    describe_statement 
--X     |    execute_statement 
--X     |    execute_immediate_statement 
--X     |    SQL_dynamic_data_statement 
--X 
--X  SQL_dynamic_data_statement  ::=
--X          allocate_cursor_statement 
--X     |    dynamic_open_statement 
--X     |    dynamic_fetch_statement 
--X     |    dynamic_close_statement 
--X     |    dynamic_delete_statement_positioned 
--X     |    dynamic_update_statement_positioned 
--X 
--X  system_descriptor_statement  ::=
--X          allocate_descriptor_statement 
--X     |    deallocate_descriptor_statement 
--X     |    set_descriptor_statement 
--X     |    get_descriptor_statement 
--X 
--X 
--X 
 
--X 
--X 
--X 
--X 
--X 
--X 
 
--X 
--X 
--X 
--X  select_statement_single_row  ::=
--X         SELECT [  set_quantifier  ]  select_list  INTO  select_target_list   table_expression 
--X 
--X  select_target_list  ::=  target_specification  [ {  COMMA   target_specification  }... ]
--X 
--X 
--X 
--X  insert_statement  ::= INSERT INTO  insertion_target   insert_columns_and_source 
--X 
--X  insertion_target  ::=  table_name 
--X 
--X  insert_columns_and_source  ::=
--X          from_subquery 
--X     |    from_constructor 
--X     |    from_default 
--X 
--X  from_subquery  ::= [  LPAR   insert_column_list   RPAR  ] [  override_clause  ]  query_expression 
--X 
--X  from_constructor  ::=
--X         [  LPAR   insert_column_list   RPAR  ] [  override_clause  ]  contextually_typed_table_value_constructor 
--X 
--X  override_clause  ::= OVERRIDING USER VALUE | OVERRIDING SYSTEM VALUE
--X 
--X  from_default  ::= DEFAULT VALUES
--X 
--X  insert_column_list  ::=  column_name_list 
--X 
--X 
--X 
--X  merge_statement  ::=
--X         MERGE INTO  target_table  [ [ AS ]  merge_correlation_name  ]
--X         USING  table_reference  ON  search_condition   merge_operation_specification 
--X 
--X  merge_correlation_name  ::=  correlation_name 
--X 
--X  merge_operation_specification  ::=  merge_when_clause ...
--X 
--X  merge_when_clause  ::=  merge_when_matched_clause  |  merge_when_not_matched_clause 
--X 
--X  merge_when_matched_clause  ::= WHEN MATCHED THEN  merge_update_specification 
--X 
--X  merge_when_not_matched_clause  ::= WHEN NOT MATCHED THEN  merge_insert_specification 
--X 
--X  merge_update_specification  ::= UPDATE SET  set_clause_list 
--X 
--X  merge_insert_specification  ::=
--X         INSERT [  LPAR   insert_column_list   RPAR  ]
--X         [  override_clause  ] VALUES  merge_insert_value_list 
--X 
--X  merge_insert_value_list  ::=
--X          LPAR   merge_insert_value_element  [ {  COMMA   merge_insert_value_element  }... ]  RPAR 
--X 
--X  merge_insert_value_element  ::=  value_expression  |  contextually_typed_value_specification 
--X 
--X 
--X 
--X  update_statement_positioned  ::= UPDATE  target_table  SET  set_clause_list  WHERE CURRENT OF  cursor_name 
--X 
--X 
--X 
--X  update_statement_searched  ::= UPDATE  target_table  SET  set_clause_list  [ WHERE  search_condition  ]
--X 
--X 
--X 
--X  set_clause_list  ::=  set_clause  [ {  COMMA   set_clause  }... ]
--X 
--X  set_clause  ::=
--X          multiple_column_assignment 
--X     |    set_target   EQUAL   update_source 
--X 
--X  set_target  ::=  update_target  |  mutated_set_clause 
--X 
--X  multiple_column_assignment  ::=  set_target_list   EQUAL   assigned_row 
--X 
--X  set_target_list  ::=  LPAR   set_target  [ {  COMMA   set_target  }... ]  RPAR 
--X 
--X  assigned_row  ::=  contextually_typed_row_value_expression 
--X 
--X  update_target  ::=
--X          object_column 
--X     |    object_column   left_bracket_or_trigraph   simple_value_specification   right_bracket_or_trigraph 
--X 
--X  object_column  ::=  column_name 
--X 
--X  mutated_set_clause  ::=  mutated_target   DOT   method_name 
--X 
--X  mutated_target  ::=  object_column  |  mutated_set_clause 
--X 
--X  update_source  ::=  value_expression  |  contextually_typed_value_specification 
--X 
--X 
--X 
--X  temporary_table_declaration  ::=
--X         DECLARE LOCAL TEMPORARY TABLE  table_name   table_element_list 
--X         [ ON COMMIT  table_commit_action  ROWS ]
--X 
--X 
--X 
--X  free_locator_statement  ::= FREE LOCATOR  locator_reference  [ {  COMMA   locator_reference  }... ]
--X 
--X  locator_reference  ::=  host_parameter_name  |  embedded_variable_name 
--X 
--X  hold_locator_statement  ::= HOLD LOCATOR  locator_reference  [ {  COMMA   locator_reference  }... ]
--X 
--X  call_statement  ::= CALL  routine_invocation 
--X 
--X  return_statement  ::= RETURN  return_value 
--X 
--X  return_value  ::=  value_expression  | NULL
--X 
--X  start_transaction_statement  ::= START TRANSACTION [  transaction_mode  [ {  COMMA   transaction_mode  }...] ]
--X 
--X  transaction_mode  ::=  isolation_level  |  transaction_access_mode  |  diagnostics_size 
--X 
--X  transaction_access_mode  ::= READ ONLY | READ WRITE
--X 
--X  isolation_level  ::= ISOLATION LEVEL  level_of_isolation 
--X 
--X  level_of_isolation  ::= READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE
--X 
--X  diagnostics_size  ::= DIAGNOSTICS SIZE  number_of_conditions 
--X 
--X  number_of_conditions  ::=  simple_value_specification 
--X 
--X 
--X 
--X  set_transaction_statement  ::= SET [ LOCAL ]  transaction_characteristics 
--X 
--X  transaction_characteristics  ::= TRANSACTION  transaction_mode  [ {  COMMA   transaction_mode  }... ]
--X 
--X 
--X 
--X  set_constraints_mode_statement  ::= SET CONSTRAINTS  constraint_name_list  { DEFERRED | IMMEDIATE }
--X 
--X  constraint_name_list  ::= ALL |  constraint_name  [ {  COMMA   constraint_name  }... ]
--X 
--X 
--X 
--X  savepoint_statement  ::= SAVEPOINT  savepoint_specifier 
--X 
--X  savepoint_specifier  ::=  savepoint_name 
--X 
--X 
--X 
--X  release_savepoint_statement  ::= RELEASE SAVEPOINT  savepoint_specifier 
--X 
--X 
--X 
--X  commit_statement  ::= COMMIT [ WORK ] [ AND [ NO ] CHAIN ]
--X 
--X 
--X 
--X  rollback_statement  ::= ROLLBACK [ WORK ] [ AND [ NO ] CHAIN ] [  savepoint_clause  ]
--X 
--X  savepoint_clause  ::= TO SAVEPOINT  savepoint_specifier 
--X 
--X 
--X 
--X 
--X 
--X  connect_statement  ::= CONNECT TO  connection_target 
--X 
--X  connection_target  ::=
--X          SQL_server_name  [ AS  connection_name  ] [ USER  connection_user_name  ]
--X     |   DEFAULT
--X 
--X 
--X 
--X  set_connection_statement  ::= SET CONNECTION  connection_object 
--X 
--X  connection_object  ::= DEFAULT |  connection_name  
--X 
--X 
--X 
--X  disconnect_statement  ::= DISCONNECT  disconnect_object 
--X 
--X  disconnect_object  ::=  connection_object  | ALL | CURRENT
--X 
--X 
--X 
--X 
--X 
--X  set_session_characteristics_statement  ::= SET SESSION CHARACTERISTICS AS  session_characteristic_list 
--X 
--X  session_characteristic_list  ::=  session_characteristic  [ {  COMMA   session_characteristic  }... ]
--X 
--X  session_characteristic  ::=  transaction_characteristics 
--X 
--X 
--X 
--X  set_session_user_identifier_statement  ::= SET SESSION AUTHORIZATION  value_specification 
--X 
--X 
--X 
--X  set_role_statement  ::= SET ROLE  role_specification 
--X 
--X  role_specification  ::=  value_specification  | NONE
--X 
--X 
--X 
--X  set_local_time_zone_statement  ::= SET TIME ZONE  set_time_zone_value 
--X 
--X  set_time_zone_value  ::=  interval_value_expression  | LOCAL
--X 
--X 
--X 
--X  set_catalog_statement  ::= SET  catalog_name_characteristic 
--X 
--X  catalog_name_characteristic  ::= CATALOG  value_specification 
--X 
--X 
--X 
--X  set_schema_statement  ::= SET  schema_name_characteristic 
--X 
--X  schema_name_characteristic  ::= SCHEMA  value_specification 
--X 
--X 
--X 
--X  set_names_statement  ::= SET  character_set_name_characteristic 
--X 
--X  character_set_name_characteristic  ::= NAMES  value_specification 
--X 
--X 
--X 
--X  set_path_statement  ::= SET  SQL_path_characteristic 
--X 
--X  SQL_path_characteristic  ::= PATH  value_specification 
--X 
--X 
--X 
--X  set_transform_group_statement  ::= SET  transform_group_characteristic 
--X 
--X  transform_group_characteristic  ::=
--X         DEFAULT TRANSFORM GROUP  value_specification 
--X     |   TRANSFORM GROUP FOR TYPE  path_resolved_user_defined_type_name   value_specification 
--X 
--X 
--X 
--X  set_session_collation_statement  ::=
--X         SET COLLATION  collation_specification  [ FOR  character_set_specification_list  ]
--X     |   SET NO COLLATION [ FOR  character_set_specification_list  ]
--X 
--X  character_set_specification_list  ::=  character_set_specification  [ ,  character_set_specification ... ]
--X 
--X  collation_specification  ::=  value_specification 
--X 
--X 
--X 
--X 
--X 
--X  allocate_descriptor_statement  ::= ALLOCATE [ SQL ] DESCRIPTOR  descriptor_name  [ WITH MAX  occurrences  ]
--X 
--X  occurrences  ::=  simple_value_specification 
--X 
--X 
--X 
--X  deallocate_descriptor_statement  ::= DEALLOCATE [ SQL ] DESCRIPTOR  descriptor_name 
--X 
--X 
--X 
--X  get_descriptor_statement  ::= GET [ SQL ] DESCRIPTOR  descriptor_name   get_descriptor_information 
--X 
--X  get_descriptor_information  ::=
--X          get_header_information  [ {  COMMA   get_header_information  }... ]
--X     |   VALUE  item_number   get_item_information  [ {  COMMA   get_item_information  }... ]
--X 
--X  get_header_information  ::=  simple_target_specification_1   EQUAL   header_item_name 
--X 
--X  header_item_name  ::= COUNT | KEY_TYPE | DYNAMIC_FUNCTION | DYNAMIC_FUNCTION_CODE | TOP_LEVEL_COUNT
--X 
--X  get_item_information  ::=  simple_target_specification_2   EQUAL   descriptor_item_name 
--X 
--X  item_number  ::=  simple_value_specification 
--X 
--X  simple_target_specification_1  ::=  simple_target_specification 
--X 
--X  simple_target_specification_2  ::=  simple_target_specification 
--X 
--X  descriptor_item_name  ::=
--X         CARDINALITY
--X     |   CHARACTER_SET_CATALOG
--X     |   CHARACTER_SET_NAME
--X     |   CHARACTER_SET_SCHEMA
--X     |   COLLATION_CATALOG
--X     |   COLLATION_NAME
--X     |   COLLATION_SCHEMA
--X     |   DATA
--X     |   DATETIME_INTERVAL_CODE
--X     |   DATETIME_INTERVAL_PRECISION
--X     |   DEGREE
--X     |   INDICATOR
--X     |   KEY_MEMBER
--X     |   LENGTH
--X     |   LEVEL
--X     |   NAME
--X     |   NULLABLE
--X     |   OCTET_LENGTH
--X     |   PARAMETER_MODE
--X     |   PARAMETER_ORDINAL_POSITION
--X     |   PARAMETER_SPECIFIC_CATALOG
--X     |   PARAMETER_SPECIFIC_NAME
--X     |   PARAMETER_SPECIFIC_SCHEMA
--X     |   PRECISION
--X     |   RETURNED_CARDINALITY
--X     |   RETURNED_LENGTH
--X     |   RETURNED_OCTET_LENGTH
--X     |   SCALE
--X     |   SCOPE_CATALOG
--X     |   SCOPE_NAME
--X     |   SCOPE_SCHEMA
--X     |   TYPE
--X     |   UNNAMED
--X     |   USER_DEFINED_TYPE_CATALOG
--X     |   USER_DEFINED_TYPE_NAME
--X     |   USER_DEFINED_TYPE_SCHEMA
--X     |   USER_DEFINED_TYPE_CODE
--X 
--X 
--X 
--X  set_descriptor_statement  ::= SET [ SQL ] DESCRIPTOR  descriptor_name   set_descriptor_information 
--X 
--X  set_descriptor_information  ::=
--X          set_header_information  [ {  COMMA   set_header_information  }... ]
--X     |   VALUE  item_number   set_item_information  [ {  COMMA   set_item_information  }... ]
--X 
--X  set_header_information  ::=  header_item_name   EQUAL   simple_value_specification_1 
--X 
--X  set_item_information  ::=  descriptor_item_name   EQUAL   simple_value_specification_2 
--X 
--X  simple_value_specification_1  ::=  simple_value_specification 
--X 
--X  simple_value_specification_2  ::=  simple_value_specification 
--X 
--X  item_number  ::=  simple_value_specification 
--X 
--X 
--X 
--X  prepare_statement  ::=
--X         PREPARE  SQL_statement_name  [  attributes_specification  ] FROM  SQL_statement_variable 
--X 
--X  attributes_specification  ::= ATTRIBUTES  attributes_variable 
--X 
--X  attributes_variable  ::=  simple_value_specification 
--X 
--X  SQL_statement_variable  ::=  simple_value_specification 
--X 
--X  preparable_statement  ::=
--X          preparable_SQL_data_statement 
--X     |    preparable_SQL_schema_statement 
--X     |    preparable_SQL_transaction_statement 
--X     |    preparable_SQL_control_statement 
--X     |    preparable_SQL_session_statement 
--X     |    preparable_implementation_defined_statement 
--X 
--X  preparable_SQL_data_statement  ::=
--X          delete_statement_searched 
--X     |    dynamic_single_row_select_statement 
--X     |    insert_statement 
--X     |    dynamic_select_statement 
--X     |    update_statement_searched 
--X     |    merge_statement 
--X     |    preparable_dynamic_delete_statement_positioned 
--X     |    preparable_dynamic_update_statement_positioned 
--X 
--X  preparable_SQL_schema_statement  ::=  SQL_schema_statement 
--X 
--X  preparable_SQL_transaction_statement  ::=  SQL_transaction_statement 
--X 
--X  preparable_SQL_control_statement  ::=  SQL_control_statement 
--X 
--X  preparable_SQL_session_statement  ::=  SQL_session_statement 
--X 
--X  dynamic_select_statement  ::=  cursor_specification 
--X 
--X  preparable_implementation_defined_statement  ::= !! See the Syntax Rules.
--X 
--X 
--X 
--X  cursor_attributes  ::=  cursor_attribute ...
--X 
--X  cursor_attribute  ::=
--X          cursor_sensitivity 
--X     |    cursor_scrollability 
--X     |    cursor_holdability 
--X     |    cursor_returnability 
--X 
--X 
--X 
--X  deallocate_prepared_statement  ::= DEALLOCATE PREPARE  SQL_statement_name 
--X 
--X 
--X 
--X  describe_statement  ::=  describe_input_statement  |  describe_output_statement 
--X 
--X  describe_input_statement  ::= DESCRIBE INPUT  SQL_statement_name   using_descriptor  [  nesting_option  ]
--X 
--X  describe_output_statement  ::= DESCRIBE [ OUTPUT ]  described_object   using_descriptor  [  nesting_option  ]
--X 
--X  nesting_option  ::= WITH NESTING | WITHOUT NESTING
--X 
--X  using_descriptor  ::= USING [ SQL ] DESCRIPTOR  descriptor_name 
--X 
--X  described_object  ::=
--X          SQL_statement_name 
--X     |   CURSOR  extended_cursor_name  STRUCTURE
--X 
--X 
--X 
--X  input_using_clause  ::=  using_arguments  |  using_input_descriptor 
--X 
--X  using_arguments  ::= USING  using_argument  [ {  COMMA   using_argument  }... ]
--X 
--X  using_argument  ::=  general_value_specification 
--X 
--X  using_input_descriptor  ::=  using_descriptor 
--X 
--X 
--X 
--X  output_using_clause  ::=  into_arguments  |  into_descriptor 
--X 
--X  into_arguments  ::= INTO  into_argument  [ {  COMMA   into_argument  }... ]
--X 
--X  into_argument  ::=  target_specification 
--X 
--X  into_descriptor  ::= INTO [ SQL ] DESCRIPTOR  descriptor_name 
--X 
--X 
--X 
--X  execute_statement  ::= EXECUTE  SQL_statement_name  [  result_using_clause  ] [  parameter_using_clause  ]
--X 
--X  result_using_clause  ::=  output_using_clause 
--X 
--X  parameter_using_clause  ::=  input_using_clause 
--X 
--X 
--X 
--X  execute_immediate_statement  ::= EXECUTE IMMEDIATE  SQL_statement_variable 
--X 
--X 
--X 
--X  dynamic_declare_cursor  ::=
--X         DECLARE  cursor_name  [  cursor_sensitivity  ] [  cursor_scrollability  ] CURSOR
--X         [  cursor_holdability_returnability  ] FOR  statement_name 
--X 
--X 
--X 
--X  allocate_cursor_statement  ::= ALLOCATE  extended_cursor_name   cursor_intent 
--X 
--X  cursor_intent  ::=  statement_cursor  |  result_set_cursor 
--X 
--X  statement_cursor  ::=
--X         [  cursor_sensitivity  ] [  cursor_scrollability  ] CURSOR
--X         [  cursor_holdability_returnability  ] FOR  extended_statement_name 
--X 
--X  result_set_cursor  ::= FOR PROCEDURE  specific_routine_designator 
--X 
--X 
--X 
--X  dynamic_open_statement  ::= OPEN  dynamic_cursor_name  [  input_using_clause  ]
--X 
--X 
--X 
--X  dynamic_fetch_statement  ::= FETCH [ [  fetch_orientation  ] FROM ]  dynamic_cursor_name   output_using_clause 
--X 
--X 
--X 
--X  dynamic_single_row_select_statement  ::=  query_specification 
--X 
--X 
--X 
--X  dynamic_close_statement  ::= CLOSE  dynamic_cursor_name 
--X 
--X 
--X 
--X  dynamic_update_statement_positioned  ::=
--X         UPDATE  target_table  SET  set_clause_list  WHERE CURRENT OF  dynamic_cursor_name 
--X 
--X 
--X 
--X  preparable_dynamic_delete_statement_positioned  ::=
--X         DELETE [ FROM  target_table  ] WHERE CURRENT OF [  scope_option  ]  cursor_name 
--X 
--X 
--X 
--X  preparable_dynamic_update_statement_positioned  ::=
--X         UPDATE [  target_table  ] SET  set_clause_list  WHERE CURRENT OF [  scope_option  ]  cursor_name 
--X 
--X 
--X 
--X 
--X 
--X  embedded_SQL_host_program  ::=
--X          embedded_SQL_Ada_program 
--X     |    embedded_SQL_C_program 
--X     |    embedded_SQL_COBOL_program 
--X     |    embedded_SQL_Fortran_program 
--X     |    embedded_SQL_MUMPS_program 
--X     |    embedded_SQL_Pascal_program 
--X     |    embedded_SQL_PL_I_program 
--X 
--X  embedded_SQL_statement  ::=  SQL_prefix   statement_or_declaration  [  SQL_terminator  ]
--X 
--X  statement_or_declaration  ::=
--X          declare_cursor 
--X     |    dynamic_declare_cursor 
--X     |    temporary_table_declaration 
--X     |    embedded_authorization_declaration 
--X     |    embedded_path_specification 
--X     |    embedded_transform_group_specification 
--X     |    embedded_collation_specification 
--X     |    embedded_exception_declaration 
--X     |    handler_declaration 
--X     |    SQL_procedure_statement 
--X 
--X  SQL_prefix  ::= EXEC SQL |  AMPERSAND SQL LPAR 
--X 
--X  SQL_terminator  ::= ENDEXEC |  SEMICOLON  |  RPAR 
--X 
--X  embedded_authorization_declaration  ::= DECLARE  embedded_authorization_clause 
--X 
--X  embedded_authorization_clause  ::=
--X         SCHEMA  schema_name 
--X     |   AUTHORIZATION  embedded_authorization_identifier  [ FOR STATIC { ONLY | AND DYNAMIC } ]
--X     |   SCHEMA  schema_name  AUTHORIZATION  embedded_authorization_identifier  [ FOR STATIC { ONLY | AND DYNAMIC } ]
--X 
--X  embedded_authorization_identifier  ::=  module_authorization_identifier 
--X 
--X  embedded_path_specification  ::=  path_specification 
--X 
--X  embedded_transform_group_specification  ::=  transform_group_specification 
--X 
--X  embedded_collation_specification  ::=  module_collations 
--X 
--X  embedded_SQL_declare_section  ::=
--X          embedded_SQL_begin_declare  [  embedded_character_set_declaration  ] [  host_variable_definition ... ]  embedded_SQL_end_declare 
--X     |    embedded_SQL_MUMPS_declare 
--X 
--X  embedded_character_set_declaration  ::= SQL NAMES ARE  character_set_specification 
--X 
--X  embedded_SQL_begin_declare  ::=  SQL_prefix  BEGIN DECLARE SECTION [  SQL_terminator  ]
--X 
--X  embedded_SQL_end_declare  ::=  SQL_prefix  END DECLARE SECTION [  SQL_terminator  ]
--X 
--X  embedded_SQL_MUMPS_declare  ::=
--X          SQL_prefix  BEGIN DECLARE SECTION [  embedded_character_set_declaration  ]
--X         [  host_variable_definition ... ] END DECLARE SECTION  SQL_terminator 
--X 
--X  host_variable_definition  ::=
--X          Ada_variable_definition 
--X     |    C_variable_definition 
--X     |    COBOL_variable_definition 
--X     |    Fortran_variable_definition 
--X     |    MUMPS_variable_definition 
--X     |    Pascal_variable_definition 
--X     |    PL_I_variable_definition 
--X 
--X 
--X 
--X 
--X  embedded_exception_declaration  ::= WHENEVER  condition   condition_action 
--X 
--X  condition  ::=  SQL_condition 
--X 
--X  SQL_condition  ::=
--X          major_category 
--X     |   SQLSTATE (  SQLSTATE_class_value  [ ,  SQLSTATE_subclass_value  ] )
--X     |   CONSTRAINT  constraint_name 
--X 
--X  major_category  ::= SQLEXCEPTION | SQLWARNING | NOT FOUND
--X 
--X  SQLSTATE_class_value  ::=  SQLSTATE_char  SQLSTATE_char  !! See the Syntax Rules.
--X 
--X  SQLSTATE_subclass_value  ::=  SQLSTATE_char  SQLSTATE_char  SQLSTATE_char  !! See the Syntax Rules.
--X 
--X  SQLSTATE_char  ::=  simple_Latin_upper_case_letter  |  digit 
--X 
--X  condition_action  ::= CONTINUE |  go_to 
--X 
--X  go_to  ::= { GOTO | GO TO }  goto_target 
--X 
--X  goto_target  ::=
--X          host_label_identifier 
--X     |    unsigned_integer 
--X     |    host_PL_I_label_variable 
--X 
--X  host_label_identifier  ::= !! See the Syntax Rules.
--X 
--X  host_PL_I_label_variable  ::= !! See the Syntax Rules.
--X 
--X 
--X 
--X  embedded_SQL_Ada_program  ::= !! See the Syntax Rules.
--X 
--X  Ada_variable_definition  ::=
--X          Ada_host_identifier  [ {  COMMA   Ada_host_identifier  }... ]  COLON   Ada_type_specification  [  Ada_initial_value  ]
--X 
--X  Ada_initial_value  ::=  Ada_assignment_operator   character_representation ...
--X 
--X  Ada_assignment_operator  ::=  COLON  EQUAL 
--X 
--X  Ada_host_identifier  ::= !! See the Syntax Rules.
--X 
--X  Ada_type_specification  ::=
--X          Ada_qualified_type_specification 
--X     |    Ada_unqualified_type_specification 
--X     |    Ada_derived_type_specification 
--X 
--X  Ada_qualified_type_specification  ::=
--X         Interfaces.SQL  DOT  CHAR [ CHARACTER SET [ IS ]  character_set_specification  ]
--X          LPAR  1  double_period   length   RPAR 
--X     |   Interfaces.SQL  DOT  SMALLINT
--X     |   Interfaces.SQL  DOT  INT
--X     |   Interfaces.SQL  DOT  BIGINT
--X     |   Interfaces.SQL  DOT  REAL
--X     |   Interfaces.SQL  DOT  DOUBLE_PRECISION
--X     |   Interfaces.SQL  DOT  BOOLEAN
--X     |   Interfaces.SQL  DOT  SQLSTATE_TYPE
--X     |   Interfaces.SQL  DOT  INDICATOR_TYPE
--X 
--X  Ada_unqualified_type_specification  ::=
--X         CHAR  LPAR  1  double_period   length   RPAR 
--X     |   SMALLINT
--X     |   INT
--X     |   BIGINT
--X     |   REAL
--X     |   DOUBLE_PRECISION
--X     |   BOOLEAN
--X     |   SQLSTATE_TYPE
--X     |   INDICATOR_TYPE
--X 
--X  Ada_derived_type_specification  ::=
--X          Ada_CLOB_variable 
--X     |    Ada_CLOB_locator_variable 
--X     |    Ada_BLOB_variable 
--X     |    Ada_BLOB_locator_variable 
--X     |    Ada_user_defined_type_variable 
--X     |    Ada_user_defined_type_locator_variable 
--X     |    Ada_REF_variable 
--X     |    Ada_array_locator_variable 
--X     |    Ada_multiset_locator_variable 
--X 
--X  Ada_CLOB_variable  ::=
--X         SQL TYPE IS CLOB  LPAR   large_object_length   RPAR  [ CHARACTER SET [ IS ]  character_set_specification  ]
--X 
--X  Ada_CLOB_locator_variable  ::= SQL TYPE IS CLOB AS LOCATOR
--X 
--X  Ada_BLOB_variable  ::= SQL TYPE IS BLOB  LPAR   large_object_length   RPAR 
--X 
--X  Ada_BLOB_locator_variable  ::= SQL TYPE IS BLOB AS LOCATOR
--X 
--X  Ada_user_defined_type_variable  ::= SQL TYPE IS  path_resolved_user_defined_type_name  AS  predefined_type 
--X 
--X  Ada_user_defined_type_locator_variable  ::= SQL TYPE IS  path_resolved_user_defined_type_name  AS LOCATOR
--X 
--X  Ada_REF_variable  ::= SQL TYPE IS  reference_type 
--X 
--X  Ada_array_locator_variable  ::= SQL TYPE IS  array_type  AS LOCATOR
--X 
--X  Ada_multiset_locator_variable  ::= SQL TYPE IS  multiset_type  AS LOCATOR
--X 
--X 
--X 
--X  embedded_SQL_C_program  ::= !! See the Syntax Rules.
--X 
--X  C_variable_definition  ::= [  C_storage_class  ] [  C_class_modifier  ]  C_variable_specification   SEMICOLON 
--X 
--X  C_variable_specification  ::=  C_numeric_variable  |  C_character_variable  |  C_derived_variable 
--X 
--X  C_storage_class  ::= AUTO | EXTERN | STATIC
--X 
--X  C_class_modifier  ::= CONST | VOLATILE
--X 
--X  C_numeric_variable  ::=
--X         { long long | long | short | float | double }  C_host_identifier  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier  [  C_initial_value  ] }... ]
--X 
--X  C_character_variable  ::=
--X          C_character_type  [ CHARACTER SET [ IS ]  character_set_specification  ]
--X          C_host_identifier   C_array_specification  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier   C_array_specification  [  C_initial_value  ] }... ]
--X 
--X  C_character_type  ::= char | unsigned char | unsigned short
--X 
--X  C_array_specification  ::=  LCOR   length   RCOR 
--X 
--X  C_host_identifier  ::= !! See the Syntax Rules.
--X 
--X  C_derived_variable  ::=
--X          C_VARCHAR_variable 
--X     |    C_NCHAR_variable 
--X     |    C_NCHAR_VARYING_variable 
--X     |    C_CLOB_variable 
--X     |    C_NCLOB_variable 
--X     |    C_BLOB_variable 
--X     |    C_user_defined_type_variable 
--X     |    C_CLOB_locator_variable 
--X     |    C_BLOB_locator_variable 
--X     |    C_array_locator_variable 
--X     |    C_multiset_locator_variable 
--X     |    C_user_defined_type_locator_variable 
--X     |    C_REF_variable 
--X 
--X  C_VARCHAR_variable  ::=
--X         VARCHAR [ CHARACTER SET [ IS ]  character_set_specification  ]
--X          C_host_identifier   C_array_specification  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier   C_array_specification  [  C_initial_value  ] }... ]
--X 
--X  C_NCHAR_variable  ::=
--X         NCHAR [ CHARACTER SET [ IS ]  character_set_specification  ]
--X          C_host_identifier   C_array_specification  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier   C_array_specification  [  C_initial_value  ] } ... ]
--X 
--X  C_NCHAR_VARYING_variable  ::=
--X         NCHAR VARYING [ CHARACTER SET [ IS ]  character_set_specification  ]
--X          C_host_identifier   C_array_specification  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier   C_array_specification  [  C_initial_value  ] } ... ]
--X 
--X  C_CLOB_variable  ::=
--X         SQL TYPE IS CLOB  LPAR   large_object_length   RPAR 
--X         [ CHARACTER SET [ IS ]  character_set_specification  ]
--X          C_host_identifier  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier  [  C_initial_value  ] }... ]
--X 
--X  C_NCLOB_variable  ::=
--X         SQL TYPE IS NCLOB  LPAR   large_object_length   RPAR 
--X         [ CHARACTER SET [ IS ]  character_set_specification  ]
--X          C_host_identifier  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier  [  C_initial_value  ] }... ]
--X 
--X  C_user_defined_type_variable  ::=
--X         SQL TYPE IS  path_resolved_user_defined_type_name  AS  predefined_type 
--X          C_host_identifier  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier  [  C_initial_value  ] } ... ]
--X 
--X  C_BLOB_variable  ::=
--X         SQL TYPE IS BLOB  LPAR   large_object_length   RPAR 
--X          C_host_identifier  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier  [  C_initial_value  ] } ... ]
--X 
--X  C_CLOB_locator_variable  ::=
--X         SQL TYPE IS CLOB AS LOCATOR
--X          C_host_identifier  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier  [  C_initial_value  ] } ... ]
--X 
--X  C_BLOB_locator_variable  ::=
--X         SQL TYPE IS BLOB AS LOCATOR
--X          C_host_identifier  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier  [  C_initial_value  ] } ... ]
--X 
--X  C_array_locator_variable  ::=
--X         SQL TYPE IS  array_type  AS LOCATOR
--X          C_host_identifier  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier  [  C_initial_value  ] } ... ]
--X 
--X  C_multiset_locator_variable  ::=
--X         SQL TYPE IS  multiset_type  AS LOCATOR
--X          C_host_identifier  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier  [  C_initial_value  ] } ... ]
--X 
--X  C_user_defined_type_locator_variable  ::=
--X         SQL TYPE IS
--X          path_resolved_user_defined_type_name  AS LOCATOR
--X          C_host_identifier  [  C_initial_value  ]
--X         [ {  COMMA   C_host_identifier  [  C_initial_value  ] }... ]
--X 
--X  C_REF_variable  ::= SQL TYPE IS  reference_type 
--X 
--X  C_initial_value  ::=  EQUAL   character_representation ...
--X 
--X 
--X 
--X  embedded_SQL_COBOL_program  ::= !! See the Syntax Rules.
--X 
--X  COBOL_variable_definition  ::=
--X         { 01 | 77 }  COBOL_host_identifier   COBOL_type_specification 
--X         [  character_representation ... ]  DOT 
--X 
--X  COBOL_host_identifier  ::= !! See the Syntax Rules.
--X 
--X  COBOL_type_specification  ::=
--X          COBOL_character_type 
--X     |    COBOL_national_character_type 
--X     |    COBOL_numeric_type 
--X     |    COBOL_integer_type 
--X     |    COBOL_derived_type_specification 
--X 
--X  COBOL_derived_type_specification  ::=
--X          COBOL_CLOB_variable 
--X     |    COBOL_NCLOB_variable 
--X     |    COBOL_BLOB_variable 
--X     |    COBOL_user_defined_type_variable 
--X     |    COBOL_CLOB_locator_variable 
--X     |    COBOL_BLOB_locator_variable 
--X     |    COBOL_array_locator_variable 
--X     |    COBOL_multiset_locator_variable 
--X     |    COBOL_user_defined_type_locator_variable 
--X     |    COBOL_REF_variable 
--X 
--X  COBOL_character_type  ::=
--X         [ CHARACTER SET [ IS ]  character_set_specification  ]
--X         { PIC | PICTURE } [ IS ] { X [  LPAR   length   RPAR  ] }...
--X 
--X  COBOL_national_character_type  ::=
--X         [ CHARACTER SET [ IS ]  character_set_specification  ]
--X         { PIC | PICTURE } [ IS ] { N [  LPAR   length   RPAR  ] }...
--X 
--X  COBOL_CLOB_variable  ::=
--X         [ USAGE [ IS ] ]
--X         SQL TYPE IS CLOB  LPAR   large_object_length   RPAR 
--X         [ CHARACTER SET [ IS ]  character_set_specification  ]
--X 
--X  COBOL_NCLOB_variable  ::=
--X         [ USAGE [ IS ] ]
--X         SQL TYPE IS NCLOB  LPAR   large_object_length   RPAR 
--X         [ CHARACTER SET [ IS ]  character_set_specification  ]
--X 
--X  COBOL_BLOB_variable  ::=
--X         [ USAGE [ IS ] ]
--X         SQL TYPE IS BLOB  LPAR   large_object_length   RPAR 
--X 
--X  COBOL_user_defined_type_variable  ::=
--X         [ USAGE [ IS ] ] SQL TYPE IS  path_resolved_user_defined_type_name  AS  predefined_type 
--X 
--X  COBOL_CLOB_locator_variable  ::=
--X         [ USAGE [ IS ] ] SQL TYPE IS CLOB AS LOCATOR
--X 
--X  COBOL_BLOB_locator_variable  ::=
--X         [ USAGE [ IS ] ] SQL TYPE IS BLOB AS LOCATOR
--X 
--X  COBOL_array_locator_variable  ::=
--X     [ USAGE [ IS ] ] SQL TYPE IS  array_type  AS LOCATOR
--X 
--X  COBOL_multiset_locator_variable  ::=
--X     [ USAGE [ IS ] ] SQL TYPE IS  multiset_type  AS LOCATOR
--X 
--X  COBOL_user_defined_type_locator_variable  ::=
--X     [ USAGE [ IS ] ] SQL TYPE IS  path_resolved_user_defined_type_name  AS LOCATOR
--X 
--X  COBOL_REF_variable  ::= [ USAGE [ IS ] ] SQL TYPE IS  reference_type 
--X 
--X  COBOL_numeric_type  ::=
--X         { PIC | PICTURE } [ IS ] S  COBOL_nines_specification  [ USAGE [ IS ] ] DISPLAY SIGN LEADING SEPARATE
--X 
--X  COBOL_nines_specification  ::=
--X          COBOL_nines  [ V [  COBOL_nines  ] ]
--X     |   V  COBOL_nines 
--X 
--X  COBOL_integer_type  ::=  COBOL_binary_integer 
--X 
--X  COBOL_binary_integer  ::= { PIC | PICTURE } [ IS ] S COBOL_nines  [ USAGE [ IS ] ] BINARY
--X 
--X  COBOL_nines  ::= { 9 [  LPAR   length   RPAR  ] }...
--X 
--X 
--X 
--X  embedded_SQL_Fortran_program  ::= !! See the Syntax Rules.
--X 
--X  Fortran_variable_definition  ::=
--X          Fortran_type_specification   Fortran_host_identifier  [ {  COMMA   Fortran_host_identifier  }... ]
--X 
--X  Fortran_host_identifier  ::= !! See the Syntax Rules.
--X 
--X  Fortran_type_specification  ::=
--X         CHARACTER [  ASTERISK   length  ] [ CHARACTER SET [ IS ]  character_set_specification  ]
--X     |   CHARACTER KIND = n [  ASTERISK   length  ] [ CHARACTER SET [ IS ]  character_set_specification  ]
--X     |   INTEGER
--X     |   REAL
--X     |   DOUBLE PRECISION
--X     |   LOGICAL
--X     |    Fortran_derived_type_specification 
--X 
--X  Fortran_derived_type_specification  ::=
--X          Fortran_CLOB_variable 
--X     |    Fortran_BLOB_variable 
--X     |    Fortran_user_defined_type_variable 
--X     |    Fortran_CLOB_locator_variable 
--X     |    Fortran_BLOB_locator_variable 
--X     |    Fortran_user_defined_type_locator_variable 
--X     |    Fortran_array_locator_variable 
--X     |    Fortran_multiset_locator_variable 
--X     |    Fortran_REF_variable 
--X 
--X  Fortran_CLOB_variable  ::=
--X         SQL TYPE IS CLOB  LPAR   large_object_length   RPAR 
--X         [ CHARACTER SET [ IS ]  character_set_specification  ]
--X 
--X  Fortran_BLOB_variable  ::=
--X         SQL TYPE IS BLOB  LPAR   large_object_length   RPAR 
--X 
--X  Fortran_user_defined_type_variable  ::=
--X         SQL TYPE IS  path_resolved_user_defined_type_name  AS  predefined_type 
--X 
--X  Fortran_CLOB_locator_variable  ::= SQL TYPE IS CLOB AS LOCATOR
--X 
--X  Fortran_BLOB_locator_variable  ::= SQL TYPE IS BLOB AS LOCATOR
--X 
--X  Fortran_user_defined_type_locator_variable  ::= SQL TYPE IS  path_resolved_user_defined_type_name  AS LOCATOR
--X 
--X  Fortran_array_locator_variable  ::= SQL TYPE IS  array_type  AS LOCATOR
--X 
--X  Fortran_multiset_locator_variable  ::= SQL TYPE IS  multiset_type  AS LOCATOR
--X 
--X  Fortran_REF_variable  ::= SQL TYPE IS  reference_type 
--X 
--X 
--X 
--X  embedded_SQL_MUMPS_program  ::= !! See the Syntax Rules.
--X 
--X  MUMPS_variable_definition  ::=
--X          MUMPS_numeric_variable   SEMICOLON 
--X     |    MUMPS_character_variable   SEMICOLON 
--X     |    MUMPS_derived_type_specification   SEMICOLON 
--X 
--X  MUMPS_character_variable  ::=
--X         VARCHAR  MUMPS_host_identifier   MUMPS_length_specification 
--X         [ {  COMMA   MUMPS_host_identifier   MUMPS_length_specification  }... ]
--X 
--X  MUMPS_host_identifier  ::= !! See the Syntax Rules.
--X 
--X  MUMPS_length_specification  ::=  LPAR   length   RPAR 
--X 
--X  MUMPS_numeric_variable  ::=  MUMPS_type_specification   MUMPS_host_identifier  [ {  COMMA   MUMPS_host_identifier  }... ]
--X 
--X  MUMPS_type_specification  ::=
--X         INT
--X     |   DEC [  LPAR   precision  [  COMMA   scale  ]  RPAR  ]
--X     |   REAL
--X 
--X  MUMPS_derived_type_specification  ::=
--X          MUMPS_CLOB_variable 
--X     |    MUMPS_BLOB_variable 
--X     |    MUMPS_user_defined_type_variable 
--X     |    MUMPS_CLOB_locator_variable 
--X     |    MUMPS_BLOB_locator_variable 
--X     |    MUMPS_user_defined_type_locator_variable 
--X     |    MUMPS_array_locator_variable 
--X     |    MUMPS_multiset_locator_variable 
--X     |    MUMPS_REF_variable 
--X 
--X  MUMPS_CLOB_variable  ::=
--X         SQL TYPE IS CLOB  LPAR   large_object_length   RPAR 
--X         [ CHARACTER SET [ IS ]  character_set_specification  ]
--X 
--X  MUMPS_BLOB_variable  ::= SQL TYPE IS BLOB  LPAR   large_object_length   RPAR 
--X 
--X  MUMPS_user_defined_type_variable  ::= SQL TYPE IS  path_resolved_user_defined_type_name  AS  predefined_type 
--X 
--X  MUMPS_CLOB_locator_variable  ::= SQL TYPE IS CLOB AS LOCATOR
--X 
--X  MUMPS_BLOB_locator_variable  ::= SQL TYPE IS BLOB AS LOCATOR
--X 
--X  MUMPS_user_defined_type_locator_variable  ::= SQL TYPE IS  path_resolved_user_defined_type_name  AS LOCATOR
--X 
--X  MUMPS_array_locator_variable  ::= SQL TYPE IS  array_type  AS LOCATOR
--X 
--X  MUMPS_multiset_locator_variable  ::= SQL TYPE IS  multiset_type  AS LOCATOR
--X 
--X  MUMPS_REF_variable  ::= SQL TYPE IS  reference_type 
--X 
--X 
--X 
--X  embedded_SQL_Pascal_program  ::= !! See the Syntax Rules.
--X 
--X  Pascal_variable_definition  ::=
--X          Pascal_host_identifier  [ {  COMMA   Pascal_host_identifier  }... ]  COLON   Pascal_type_specification   SEMICOLON 
--X 
--X  Pascal_host_identifier  ::= !! See the Syntax Rules.
--X 
--X  Pascal_type_specification  ::=
--X         PACKED ARRAY  LCOR  1  double_period   length   RCOR  OF CHAR
--X         [ CHARACTER SET [ IS ]  character_set_specification  ]
--X     |   INTEGER
--X     |   REAL
--X     |   CHAR [ CHARACTER SET [ IS ]  character_set_specification  ]
--X     |   BOOLEAN
--X     |    Pascal_derived_type_specification 
--X 
--X  Pascal_derived_type_specification  ::=
--X          Pascal_CLOB_variable 
--X     |    Pascal_BLOB_variable 
--X     |    Pascal_user_defined_type_variable 
--X     |    Pascal_CLOB_locator_variable 
--X     |    Pascal_BLOB_locator_variable 
--X     |    Pascal_user_defined_type_locator_variable 
--X     |    Pascal_array_locator_variable 
--X     |    Pascal_multiset_locator_variable 
--X     |    Pascal_REF_variable 
--X 
--X  Pascal_CLOB_variable  ::=
--X         SQL TYPE IS CLOB  LPAR   large_object_length   RPAR 
--X         [ CHARACTER SET [ IS ]  character_set_specification  ]
--X 
--X  Pascal_BLOB_variable  ::= SQL TYPE IS BLOB  LPAR   large_object_length   RPAR 
--X 
--X  Pascal_CLOB_locator_variable  ::= SQL TYPE IS CLOB AS LOCATOR
--X 
--X  Pascal_user_defined_type_variable  ::= SQL TYPE IS  path_resolved_user_defined_type_name  AS  predefined_type 
--X 
--X  Pascal_BLOB_locator_variable  ::= SQL TYPE IS BLOB AS LOCATOR
--X 
--X  Pascal_user_defined_type_locator_variable  ::= SQL TYPE IS  path_resolved_user_defined_type_name  AS LOCATOR
--X 
--X  Pascal_array_locator_variable  ::= SQL TYPE IS  array_type  AS LOCATOR
--X 
--X  Pascal_multiset_locator_variable  ::= SQL TYPE IS  multiset_type  AS LOCATOR
--X 
--X  Pascal_REF_variable  ::= SQL TYPE IS  reference_type 
--X 
--X 
--X 
--X  embedded_SQL_PL_I_program  ::= !! See the Syntax Rules.
--X 
--X  PL_I_variable_definition  ::=
--X         { DCL | DECLARE } {  PL_I_host_identifier 
--X     |    LPAR   PL_I_host_identifier  [ {  COMMA   PL_I_host_identifier  }... ]  RPAR  }
--X          PL_I_type_specification  [  character_representation ... ]  SEMICOLON 
--X 
--X  PL_I_host_identifier  ::= !! See the Syntax Rules.
--X 
--X  PL_I_type_specification  ::=
--X         { CHAR | CHARACTER } [ VARYING ]  LPAR  length  RPAR  [ CHARACTER SET [ IS ]  character_set_specification  ]
--X     |    PL_I_type_fixed_decimal   LPAR   precision  [  COMMA   scale  ]  RPAR 
--X     |    PL_I_type_fixed_binary  [  LPAR   precision   RPAR  ]
--X     |    PL_I_type_float_binary   LPAR   precision   RPAR 
--X     |    PL_I_derived_type_specification 
--X 
--X  PL_I_derived_type_specification  ::=
--X          PL_I_CLOB_variable 
--X     |    PL_I_BLOB_variable 
--X     |    PL_I_user_defined_type_variable 
--X     |    PL_I_CLOB_locator_variable 
--X     |    PL_I_BLOB_locator_variable 
--X     |    PL_I_user_defined_type_locator_variable 
--X     |    PL_I_array_locator_variable 
--X     |    PL_I_multiset_locator_variable 
--X     |    PL_I_REF_variable 
--X 
--X  PL_I_CLOB_variable  ::=
--X         SQL TYPE IS CLOB  LPAR   large_object_length   RPAR 
--X         [ CHARACTER SET [ IS ]  character_set_specification  ]
--X 
--X  PL_I_BLOB_variable  ::= SQL TYPE IS BLOB  LPAR   large_object_length   RPAR 
--X 
--X  PL_I_user_defined_type_variable  ::= SQL TYPE IS  path_resolved_user_defined_type_name  AS  predefined_type 
--X 
--X  PL_I_CLOB_locator_variable  ::= SQL TYPE IS CLOB AS LOCATOR
--X 
--X  PL_I_BLOB_locator_variable  ::= SQL TYPE IS BLOB AS LOCATOR
--X 
--X  PL_I_user_defined_type_locator_variable  ::= SQL TYPE IS  path_resolved_user_defined_type_name  AS LOCATOR
--X 
--X  PL_I_array_locator_variable  ::= SQL TYPE IS  array_type  AS LOCATOR
--X 
--X  PL_I_multiset_locator_variable  ::= SQL TYPE IS  multiset_type  AS LOCATOR
--X 
--X  PL_I_REF_variable  ::= SQL TYPE IS  reference_type 
--X 
--X  PL_I_type_fixed_decimal  ::=
--X         { DEC | DECIMAL } FIXED
--X     |   FIXED { DEC | DECIMAL }
--X 
--X  PL_I_type_fixed_binary  ::=
--X         { BIN | BINARY } FIXED
--X     |   FIXED { BIN | BINARY }
--X 
--X  PL_I_type_float_binary  ::=
--X         { BIN | BINARY } FLOAT
--X     |   FLOAT { BIN | BINARY }
--X 
--X 
--X 
--X 
--X 
--X  direct_SQL_statement  ::=  directly_executable_statement   SEMICOLON 
--X 
--X  directly_executable_statement  ::=
--X          direct_SQL_data_statement 
--X     |    SQL_schema_statement 
--X     |    SQL_transaction_statement 
--X     |    SQL_connection_statement 
--X     |    SQL_session_statement 
--X     |    direct_implementation_defined_statement 
--X 
--X  direct_SQL_data_statement  ::=
--X          delete_statement_searched 
--X     |    direct_select_statement_multiple_rows 
--X     |    insert_statement 
--X     |    update_statement_searched 
--X     |    merge_statement 
--X     |    temporary_table_declaration 
--X 
--X  direct_implementation_defined_statement  ::= !! See the Syntax Rules.
--X 
--X 
--X 
--X  direct_select_statement_multiple_rows  ::=  cursor_specification 
--X 
--X  get_diagnostics_statement  ::= GET DIAGNOSTICS  SQL_diagnostics_information 
--X 
--X  SQL_diagnostics_information  ::=  statement_information  |  condition_information 
--X 
--X  statement_information  ::=  statement_information_item  [ {  COMMA   statement_information_item  }... ]
--X 
--X  statement_information_item  ::=  simple_target_specification   EQUAL   statement_information_item_name 
--X 
--X  statement_information_item_name  ::=
--X         NUMBER
--X     |   MORE
--X     |   COMMAND_FUNCTION
--X     |   COMMAND_FUNCTION_CODE
--X     |   DYNAMIC_FUNCTION
--X     |   DYNAMIC_FUNCTION_CODE
--X     |   ROW_COUNT
--X     |   TRANSACTIONS_COMMITTED
--X     |   TRANSACTIONS_ROLLED_BACK
--X     |   TRANSACTION_ACTIVE
--X 
--X  condition_information  ::=
--X         { EXCEPTION | CONDITION }  condition_number   condition_information_item  [ {  COMMA   condition_information_item  }... ]
--X 
--X  condition_information_item  ::=  simple_target_specification   EQUAL   condition_information_item_name 
--X 
--X  condition_information_item_name  ::=
--X         CATALOG_NAME
--X     |   CLASS_ORIGIN
--X     |   COLUMN_NAME
--X     |   CONDITION_NUMBER
--X     |   CONNECTION_NAME
--X     |   CONSTRAINT_CATALOG
--X     |   CONSTRAINT_NAME
--X     |   CONSTRAINT_SCHEMA
--X     |   CURSOR_NAME
--X     |   MESSAGE_LENGTH
--X     |   MESSAGE_OCTET_LENGTH
--X     |   MESSAGE_TEXT
--X     |   PARAMETER_MODE
--X     |   PARAMETER_NAME
--X     |   PARAMETER_ORDINAL_POSITION
--X     |   RETURNED_SQLSTATE
--X     |   ROUTINE_CATALOG
--X     |   ROUTINE_NAME
--X     |   ROUTINE_SCHEMA
--X     |   SCHEMA_NAME
--X     |   SERVER_NAME
--X     |   SPECIFIC_NAME
--X     |   SUBCLASS_ORIGIN
--X     |   TABLE_NAME
--X     |   TRIGGER_CATALOG
--X     |   TRIGGER_NAME
--X     |   TRIGGER_SCHEMA
--X 
--X  condition_number  ::=  simple_value_specification 


*/        