library(readr)
parse_number("class5")
submit()
submit()
students4
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status ="passed")
failed <- mutate(passed, status ="failed")
failed <- failed %>% mutate(status ="failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
?separate
submit()
submit()
getwd()
data <- read.csv("ss06hid.csv")
list.files()
data <- read.csv("ss06hid.csv")
data
colnames(data)
v <- data(data$acr == 3 & data$ags == 6)
v <- data(data$acr = 3 & data$ags = 6)
v <- data$acr == 3 & data$ags == 6
v
agricultureLogical <- "acr == 3 & ags == 6"
?which
data[which(data$acr == 3 & data$ags == 6)]
data[which(data$acr == 3 & data$ags == 6),]
data[which(data$acr == 3),]
data[,which(data$acr == 3)]
data
data[,which(data$acr = 3)]
data[which(data$acr == 3),]
data[,"acr"]
colnames(data)
data[which(data$ACR == 3 & data$AGS == 6),]
install.packages("jpeg")
jpg <- readJPEG("jeff.jpg", native=TRUE)
library(jpeg)
jpg <- readJPEG("jeff.jpg", native=TRUE)
quantile(jpg, c(30,80))
quantile(jpg, c(0.30,0.80))
gdp <- read.csv("GDP.csv")
gdp
country <- read.csv("country.csv")
country
?merge
colnames(gdp)
head(gdp, n=3)
head(gdp, n=30)
head(country, n=30)
colnames(country)
colnames(gdp)
merge(gdp, country, by.x="X", by.y="CountryCode")
gdp
merged <- merge(gdp, country, by.x="X", by.y="CountryCode")
arrange(merged, "X.3")
arrange(merged, X.3)
s <- arrange(merged, X.3)
s[13,]
colnames(gdp)
View(gdp)
?read.csv
gdp <- read.csv("GDP.csv", skip=5)
View(gdp)
gdp <- read.csv("GDP.csv", skip=4)
colnames(gdp) <- c("Code", "Ranking", "X3", "Name", "dollars")
arrange(gdp, desc(Ranking))
arrange(gdp, desc("Ranking"))
gdp
colnames(gdp)
arrange(gdp, Ranking)
colnames(gdp) <- c("Code", "Ranking", "X3", "Name", "dollars", "X6", "X7", "X8", "X9", "X0")
arrange(gdp, Ranking)
arrange(gdp, desc(Ranking)
)
d <- arrange(gdp, desc(Ranking))
d[13,]
colnames(country)
country[,"CountryCode"]
m <- merga(gdp, country, by.x="Code", by.y="CountryCode")
m <- merge(gdp, country, by.x="Code", by.y="CountryCode")
View(m)
View(country)
filter(gdp, !is.na(Code))
gdp2 <- filter(gdp, !is.na(Code))
gdp2
nrow(gdp2)
gdp2 <- filter(gdp, is.na(Code))
nrow(gdp2)
gdp2 <- filter(gdp, Code == "")
nrow(gdp2)
gdp2 <- filter(gdp, Code != "")
nrow(gdp2)
m <- merge(gdp, country, by.x="Code", by.y="CountryCode")
nrow(m)
filter(m, Income.Group=="High income: OECD")
select(filter(m, Income.Group=="High income: OECD"), mean(dollars)
)
f <- filter(m, Income.Group=="High income: OECD")
f
mm <- select(m,Code, Ranking, dollars, "Income.Group")
mm <- select(m,Code, Ranking, dollars, Income.Group)
mm
ocde <- filter(mm, Income.Group == "High income: OECD")
ocde
mean(ocde$dollars)
?mean
mean(ocde$dollars, na.rm=T)
gdp <- read.csv("GDP.csv", skip=4)
View(gdp)
gdp2 <- select(gdp, X, X.1, X.3, X.4)
View (gdp2)
gp2 <- na.omit(gdp2)
View (gdp2)
pais <- read.csv("country.csv")
merge(gdp2, pais, by.x="X", by.y="CountryCode")
m <- merge(gdp2, pais, by.x="X", by.y="CountryCode")
View (m)
r <- filter(!is.na(X.1))
r <- filter(m,!is.na(X.1))
head(r)
View(r)
r <- filter(m,X.1>0)
m$X.1 <- as.numeric(as.character(m$X.1))
View(m)
r <- filter(m, !is.na(X.1))
View (r)
r <- arrange(r, desc(X.4))
View(r)
m$X.4 <- as.numeric(as.character(m$X.4))
r <- arrange(r, desc(X.4))
r <- filter(m, !is.na(X.1))
r <- filter(r, !is.na(X.4))
gdp <- read.csv("GDP.csv", skip=4)
View(gdp)
gdp$X.4 <- as.numeric(as.character(gdp$X.4))
View(gdp)
gdp <- read.csv("GDP.csv", skip=4)
parse_numeric("12,345")
parse_number("12,345")
gdp2 <- mutate(gdp, X.4=parse_numer(X.4))
gdp2 <- mutate(gdp, X.4=parse_number(X.4))
View(gdp2)
gdp2 <- gdp %>% select(X, X.1, X.3, X.4) %>% na.omit()
View(gdp2)
m <- merge(gdp2, country, by.x="X", by.y="CountryCode")
View(m)
ig <- m %>% select(X, X.1, X.4, Income.Group)
ig
m$X.4 <- as.numeric(as.character(m$X.4))
summary(gdp2)
gdp2 <- mutate(gdp, X.4=parse_number(X.4))
gdp2 <- na.omit(gdp2)
View(gdp2)
gdp2 <- mutate(gdp, X.4=parse_number(X.4))
View(gdp2)
gdp2 <- select(gdp, X, X.1, X.3, X.4)
gdp2 <- mutate(gdp2, X.4=parse_number(X.4))
na_omit(gdp2)
na.omit(gdp2)
gdp2 <- na.omit(gdp2)
View(gdp2)
m <- merge(gdp2, country, by.x="X", by.y="CountryCode")
View(m)
mm <- arrange(m, desc(X.1))
view(mm)
View(mm)
m %>% filter(Income.Group == "High income: OCDE") %>% mean(X.4)
filter(m, is.na(X.4))
mean(m$X.4)
x <- m %>% filter(Income.Group == "High income: OCDE")
mean(x$X.4)
x
x <- m %>% filter(Income.Group == "High income: OECD") %>% mean(X.4)
x <- m %>% filter(Income.Group == "High income: OECD")
x
mean(X.4)
mean(x$X.4)
mean(x$X.1)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label=T)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_Date
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920`1`2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone="Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?mdy
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
hid <- read_csv("ss06hid.csv")
colnames(hid)
strsplit(names(hid), "wgtp")
l <-strsplit(names(hid), "wgtp")
l
l[[13]]
l[[123]]
head(gdp)
gdp2
mean(gdp2$X.4)
View(gdp)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
amzn
sampleTimes = index(amzn)
sampleTimes
sampleTimes["s010-12-20"]
y <- sampleTimes == "s010-12-20"
class(sampleTimes)
y <- year(sampleTimes) == 2012
sampleTimes[y]
v2012 <- sampleTimes[y]
length(v2012)
mean(gdp2$X.4)
length(v2012)
.libPaths()
install.packages("devtools")
install.packages("ggplot2")
install.packages("roxygen2")
install.packages("markdown")
install.packages("knitr")
.libPaths()
.libPaths()
getwd()
source("P:/R/DataScience/JGGTidy/R/loadFiles.R")
dt <- run_analysis("uci.zip")
head(dt)
?data.table
install.packages("dptlyr")
libray(dplyr)
library(dplyr)
library(data.table)
install.packages("dtplyr")
library(dptlyr)
library(dtplyr)
?data.table
app <- c("app0", app1", "app2", "app3","app4","app5","app6","app7","app8","app9")
app <- c("app0", "app1", "app2", "app3","app4","app5","app6","app7","app8","app9")
size <- c(100,200,300,400,500,600,700,800,1000)
chg <- c(10,20,30,40,50,0,0,0,0,0)
area <- data.frame(app,size,chg)
size <- c(100,200,300,400,500,600,700,800,900,1000)
area <- data.frame(app,size,chg)
area
install.packages("d3heatmap")
d3heatmap(area)
library(d3heatmap)
d3heatmap(area)
?d3heatmap
area
d3heatmap(area$size)
library(highcharter)
?hc_add_series
highchart2() %>% hc_add_series(data = area, type = "treemap", colorByPoint = TRUE)
highchart2() %>% hc_add_series(data = area$size, type = "treemap", colorByPoint = TRUE)
highchart() %>% hc_add_series(data = area$size, type = "treemap", colorByPoint = TRUE)
highchart() %>% hc_add_series(data = c(area$app, area$size), type = "treemap", colorByPoint = TRUE)
colnames(area) <- c("name", "valuE", "size")
highchart() %>% hc_add_series(data = area, type = "treemap", colorByPoint = TRUE)
highchart() %>% hc_add_series(data = area[,1:2], type = "treemap", colorByPoint = TRUE)
highchart() %>% hc_add_series(data = c(area$name, area$value), type = "treemap", colorByPoint = TRUE)
?treemap
?highchart
pp<- highchart() %>% hc_add_series(data = c(area$name, area$value), type = "treemap", colorByPoint = TRUE)
pp
pp()
str(pp)
?hc_add_series_treemap()
highchart() %>% hc_add_series(data = c(area$name, area$value), type = "treemap", colorByPoint = TRUE)
highchart() %>% hc_add_series(data = c(area$name, area$value), type = "treemap", colorByPoint = TRUE) %>% hc_tooltip(crosshairs = TRUE, backgroundColor = "#FCFFC5", shared = TRUE, borderWidth = 5)
GNI2010
data(GNI2010)
install.packages("viridisLite")
install.packages("viridisLite")
library(viridisLite)
data(GNI2010)
library(treemap)
install.packages("treemap")
data(GNI2010)
library(treemap)
data(GNI2010)
data("GNI2014")
GNI2014
tm <- treemap(GNI2010, index = c("continent", "iso3"),vSize = "population", vColor = "GNI", type = "comp", palette = rev(viridis(6)))
tm <- treemap(GNI2014, index = c("continent", "iso3"),vSize = "population", vColor = "GNI", type = "comp", palette = rev(viridis(6)))
area
tm <- treemap(area, index = c("name"),vSize = "value", vColor = "GNI", type = "comp", palette = rev(viridis(6)))
tm <- treemap(area, index = c("name"),vSize = "valuE", vColor = "GNI", type = "comp", palette = rev(viridis(6)))
tm <- treemap(area, index = c("name"),vSize = "valuE", vColor = "size", type = "comp", palette = rev(viridis(6)))
tm <- treemap(area, index = c("name"),vSize = "size", vColor = "valuE", type = "comp", palette = rev(viridis(6)))
tm <- treemap(area, index = c("name"),vSize = "size", vColor = "valuE", palette = rev(viridis(6)))
tm <- treemap(area, index = c("name"),vSize = "size", vColor = "valuE", palette = rev(viridis(6))) %>% hc_tooltip(crosshairs = TRUE, backgroundColor = "#FCFFC5", shared = TRUE, borderWidth = 5)
tm <- treemap(area, index = c("name"),vSize = "size", vColor = "valuE", palette = rev(viridis(6))) %>% hc_tooltip(backgroundColor = "#FCFFC5", shared = TRUE, borderWidth = 5)
tm <- treemap(area, index = c("name"),vSize = "size", vColor = "valuE") %>% hc_tooltip(backgroundColor = "#FCFFC5", shared = TRUE, borderWidth = 5)
tm <- treemap(area, index = c("name"),vSize = "size", vColor = "valuE") %>% hc_add_theme(hc_theme_gridlight())  %>% hc_tooltip(backgroundColor = "#FCFFC5", shared = TRUE, borderWidth = 5)
?hc_theme
?treemap
tm <lt;- treemap(GNI2010, index = c("continent", "iso3"),
vSize = "population", vColor = "GNI",
type = "value", palette = viridis(6))
tm <lt;- treemap(GNI2014, index = c("continent", "iso3"),vSize = "population", vColor = "GNI",type = "value", palette = viridis(6))
tm <- treemap(GNI2014, index = c("continent", "iso3"),vSize = "population", vColor = "GNI",type = "value", palette = viridis(6))
hc <- highcharts()
hc <- highchart()
hc_add_series_treemap(tm, allowDrillToNode = TRUE,layoutAlgorithm = "squarified",name = "tmdata")
?hc_add_series_treemap()
hc_add_series_treemap(hc, tm, allowDrillToNode = TRUE,layoutAlgorithm = "squarified",name = "tmdata")
hc_tooltip(hc, pointFormat = "<b>{point.name}</b>:<br> Pop: {point.value:,.0f}<br>GNI: {point.valuecolor:,.0f}")
hc
hc_tooltip(hc)
hc <- highchart()
tm <- treemap(GNI2014, index = c("continent", "iso3"),vSize = "population", vColor = "GNI",type = "value", palette = viridis(6))
hc_add_series_treemap(hc, tm, allowDrillToNode = TRUE,layoutAlgorithm = "squarified",name = "tmdata")
GN12014
GNI2014
head(GNI2014)
area
area <- c(1)
app<- c(10)
area <- c(1,2)
app<- c(10,20)
area <- c(1,1,2,2)
area <- c(1,2)
app <- (10,20)
app <- c(10,20)
nArea <- c("Area 1", "Area 2")
nApp<- c("Appl 1", "Appl 2")
mod <- c(5, 10)
chg <- c(1,3)
df <- data.frame(area, app, nArea, nApp, mod, chg)
?list.parse3
?list.parse
ds <- list.parse3(df)
ds <- list.parse(df)
install.packages("rlist")
install.packages("rlist")
library(rlist)
ds <- list.parse(df)
highchart() %>% hc_add_series(data =ds, type = "treemap")
highchart() %>% hc_add_series(data =ds, type = "treemap", colorByPoint=T)
?hs_add_series
?hc_add_series
View(ds)
View(df)
tm <- treemap(df, index="area", vSize="mod",vColor="chg", type="value")
?viridis
tm <- treemap(df, index="area", vSize="mod",vColor="chg", type="value", palette=viridis(option="C"))
tm <- treemap(df, index="area", vSize="mod",vColor="chg", type="value", palette=viridis(5, option="C"))
hc <- highcharts() %>% hc_add_series_treemap(tm, layoutAlgorithm = "squarified", name="data")
hc <- highchart() %>% hc_add_series_treemap(tm, layoutAlgorithm = "squarified", name="data")
hc
hc <- highchart() %>% hc_add_series_treemap(tm, layoutAlgorithm = "squarified", name="data") %>% hc_tooltip(pointFormat = "<b>{point.name}</b>:<br>Pop: {point.value:,.0f}<br>chg: {point.valuecolor:,.0f}")
tm <- treemap(df, index=c("area", "app", vSize="mod",vColor="chg", type="value", palette=viridis(option="C"))
)
tm <- treemap(df, index=c("area", "app"), vSize="mod",vColor="chg", type="value", palette=viridis(option="C"))
tm <- treemap(df, index=c("area", "app"), vSize="mod",vColor="chg", type="value", palette=viridis(n=5, option="C"))
area <- c(1,1,2,2)
app <- c(10,15,20,25)
nArea <- c("Area 1", "Area 1", "Area 2", "Area 2")
nApp<- c("Appl 10", "Appl 11", "Appl 20", "Appl 21")
mod <- c(5, 10, 15, 20)
chg <- c(0,0,5,10)
df <- data.frame(area, app, nArea, nApp, mod, chg)
tm <- treemap(df, index=c("area", "app"), vSize="mod",vColor="chg", type="value", palette=viridis(n=5, option="C"))
tm <- treemap(df, index=c("area", "app"), vSize="mod",vColor="chg", type="index", palette=viridis(n=5, option="C"))
tm <- treemap(df, index=c("area", "app"), vSize="mod",vColor="chg", type="index", algorithm="squarified", palette=viridis(n=5, option="C"))
hc <- highcharts() %>% hc_add_series_treemap(tm, layoutAlgorithm = "squarified", name="data")
hc <- highchart() %>% hc_add_series_treemap(tm, layoutAlgorithm = "squarified", name="data")
hc <- highchart() %>% hc_add_series_treemap(tm, AlloqDrillToNode = T, layoutAlgorithm = "squarified", name="data")
tm <- treemap(df, index=c("area", "app"), vSize="mod",vColor="chg", type="value", algorithm="squarified", palette=viridis(n=5, option="C"))
hc <- highchart() %>% hc_add_series_treemap(tm, AlloqDrillToNode = T, layoutAlgorithm = "squarified", name="data")
tm <- treemap(df, index=c("area", "app"), vSize="mod",vColor="chg", type="value", algorithm="squarified", palette=viridis(3))
hc <- highchart() %>% hc_add_series_treemap(tm, AlloqDrillToNode = T, layoutAlgorithm = "squarified", name="data")
hc
tm <- treemap(df, index=c("nArea", "nApp"), vSize="mod",vColor="chg", type="value", algorithm="squarified", palette=viridis(3))
hc <- highchart() %>% hc_add_series_treemap(tm, AlloqDrillToNode = T, layoutAlgorithm = "squarified", name="data")
tm <- treemap(df, index=c("nArea", "nApp"), vSize="mod",vColor="chg", type="value", algorithm="squarified", palette=viridis(3))
hc
tm <- treemap(df, index=c("nArea", "nApp"), vSize="mod",vColor="chg", type="value", algorithm="squarified", palette=viridis(3))
hc <- highchart() %>% hc_add_series_treemap(tm, AlloqDrillToNode = T, layoutAlgorithm = "squarified", name="data")
hc
hc <- highchart() %>% hc_add_series_treemap(tm, AlloqDrillToNode = T, layoutAlgorithm = "squarified", name="data") %>% hc_Add_theme(hc_theme_null())
hc <- highchart() %>% hc_add_series_treemap(tm, AlloqDrillToNode = T, layoutAlgorithm = "squarified", name="data") %>% hc_add_theme(hc_theme_null())
hc
library()ç
library()
tm <- treemap(df, index=c("nArea", "nApp"), vSize="mod",vColor="chg", type="color", algorithm="squarified", palette=viridis(3))
tm <- treemap(df, index=c("nArea", "nApp"), vSize="mod",vColor="chg", type="value", algorithm="squarified", palette=viridis(3))
?treemap
RColorBrewer::display.brewer.all()
tm <- treemap(df, index=c("nArea", "nApp"), vSize="mod",vColor="chg", type="value", algorithm="squarified", palette="viridis(3)"Pastel1)
tm <- treemap(df, index=c("nArea", "nApp"), vSize="mod",vColor="chg", type="value", algorithm="squarified", palette="Pastel1")
RColorBrewer::display.brewer.all()
tm <- treemap(df, index=c("nArea", "nApp"), vSize="mod",vColor="chg", type="value", algorithm="squarified", palette="Set3")
.libPaths("P:/SDK/Rstudio/library")
.libPaths()
.libPaths("P:/SDK/RStudio/library")
.libPaths()
.libPaths("D:/SDK/RStudio/library")
.libPaths()
.libPaths("D:/SDK/R/library")
.libPaths()
.libPaths("D:/SDK/RStudio/library")
.libPaths()
sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL", "C")
?setLocale
??setLocale
install.packages("igraph")
setwd("P:/SDP/R")
library(igraph)
name=c("node 1", "node 2", "node 3", "node 4", "node 5")
edges = data.frame(from=c(1,1,2,3,4), to=c(2,3,4,4,5))
g <- graph_from_data_frame(edges, directed=TRUE, vertices=nodes)
nodes = data.frame(name)
nodes
g <- graph_from_data_frame(edges, directed=TRUE, vertices=nodes)
plot(g)
ids=c(1,2,3,4,5)
nodes = data.frame(id=ids,name=name)
nodes
g <- graph_from_data_frame(edges, directed=TRUE, vertices=nodes)
plot(g)
g$layout <- layout.reingold.tilford()
g$layout <- layout.reingold.tilford
plot(g)
ids=c(1,2,3,4,5)
names=c("node 1", "node 2", "node 3", "node 4", "node 5")
edges = data.frame(from=c(1,1,2,3,4), to=c(2,3,4,4,5))
nodes = data.frame(id=ids,name=name)
g <- graph_from_data_frame(edges, directed=TRUE, vertices=nodes)
g$layout <- layout.reingold.tilford
plot.igraph(g, vertex.shape="rectangle", vertex.size=50)
tkplot(g)
tkplot(g,canvas.width = 450, canvas.height = 450)
install.packages("visNetwork")
library(visNetwork)
visNetwork(nodes,edges)
visNetwork(nodes,edges) %>% visEdges(arrows = "from") %>%
visHierarchicalLayout()
shinyApp(ui = ui, server = server)
library(shiny)
runApp('visNetwork.R')
runApp('visNetwork.R')
runApp('visNetwork.R')
runApp('visNetwork.R')
runApp('visNetwork.R')
runApp('visNetwork.R')
runApp('visNetwork.R')
runApp('visNetwork.R')
runApp('visNetwork.R')
?renderVisNetwork
runApp('visNetwork.R')
runApp('visNetwork.R')
runApp('visNetwork.R')
?tabPanel
runApp('visNetwork.R')
runApp('rules')
